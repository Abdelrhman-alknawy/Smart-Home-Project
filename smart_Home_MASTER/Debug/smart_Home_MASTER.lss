
smart_Home_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00004a68  00004afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800188  00800188  00004c24  2**0
                  ALLOC
  3 .stab         00004ddc  00000000  00000000  00004c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d49  00000000  00000000  00009a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b749  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b889  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d642  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fe97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_1>
       8:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_2>
       c:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_15>
      40:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <main>
      8a:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 27 25 	jmp	0x4a4e	; 0x4a4e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidEnable>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_config.h"

void WDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR, WDTCR_WDE);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	/*Set WDTOE and WDE in the same operation*/
	WDTCR = (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);	
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24
	/*Within The Next Four Clock Cycles, Write Logic 0 to WDE*/
	WDTCR = 0;
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <WDT_voidSleep>:


void WDT_voidSleep(u8 Copy_u8SleepTimeOut)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepTimeOut < MAX_NUMBER_FOR_PRESCALER)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	78 f4       	brcc	.+30     	; 0xbae <WDT_voidSleep+0x30>
	{
		WDTCR &= PRESCALER_RESET_MASK;
     b90:	a1 e4       	ldi	r26, 0x41	; 65
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e1 e4       	ldi	r30, 0x41	; 65
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepTimeOut;
     b9e:	a1 e4       	ldi	r26, 0x41	; 65
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e1 e4       	ldi	r30, 0x41	; 65
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	90 81       	ld	r25, Z
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24
	}
	else
	{
		/* An Error To Be Displayed */
	}
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <M_UART_voidInit>:
#include"UART_Private.h"
#include"Uart_Config.h"

void (*ptr)(void) = NULL;
void M_UART_voidInit(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	//enable rx and tx
    SET_BIT(UCSRB_REG,UCSRB_TXEN);
    SET_BIT(UCSRB_REG,UCSRB_RXEN);*/
    /**AMGAD SAMIR **/

	u8 Local_UCSRC = 0;
     bc0:	19 82       	std	Y+1, r1	; 0x01
	/*select UCSRC_REG */
	SET_BIT(Local_UCSRC,7);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	89 83       	std	Y+1, r24	; 0x01

	/*select async mode */
	CLR_BIT(Local_UCSRC,6);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	89 83       	std	Y+1, r24	; 0x01

	/*parity mode (disable)*/
    CLR_BIT(Local_UCSRC,5);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	8f 7d       	andi	r24, 0xDF	; 223
     bd2:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_UCSRC,4);
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	89 83       	std	Y+1, r24	; 0x01

    /*select one stop bit*/
    CLR_BIT(Local_UCSRC,3);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	87 7f       	andi	r24, 0xF7	; 247
     bde:	89 83       	std	Y+1, r24	; 0x01

    /*character size 8 bits*/
    SET_BIT(Local_UCSRC,2);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_UCSRC,1);
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(UCSRB_REG,UCSRB_UCSZ2);
     bec:	aa e2       	ldi	r26, 0x2A	; 42
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	ea e2       	ldi	r30, 0x2A	; 42
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8b 7f       	andi	r24, 0xFB	; 251
     bf8:	8c 93       	st	X, r24

    UCSRC_REG = Local_UCSRC;
     bfa:	e0 e4       	ldi	r30, 0x40	; 64
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	80 83       	st	Z, r24
    /*select baud rate register */
    CLR_BIT(UCSRC_REG,UCSRC_URSEL);
     c02:	a0 e4       	ldi	r26, 0x40	; 64
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e0 e4       	ldi	r30, 0x40	; 64
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	8c 93       	st	X, r24

    SET_BIT(UCSRB_REG,6);
     c10:	aa e2       	ldi	r26, 0x2A	; 42
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ea e2       	ldi	r30, 0x2A	; 42
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24
    /*select baud rate */
    UBRRL_REG = 51;
     c1e:	e9 e2       	ldi	r30, 0x29	; 41
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	83 e3       	ldi	r24, 0x33	; 51
     c24:	80 83       	st	Z, r24
    /*UBRRH_REG = (u8)(BAUD_RATE>>8);
    UBRRL_REG = (u8)(BAUD_RATE);*/
    /*enable rx and tx */
    SET_BIT(UCSRB_REG,UCSRB_TXEN);
     c26:	aa e2       	ldi	r26, 0x2A	; 42
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ea e2       	ldi	r30, 0x2A	; 42
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_RXEN);
     c34:	aa e2       	ldi	r26, 0x2A	; 42
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ea e2       	ldi	r30, 0x2A	; 42
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 61       	ori	r24, 0x10	; 16
     c40:	8c 93       	st	X, r24

}
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <M_UART_voidSendData>:
void M_UART_voidSendData(u8 Copy_u8Data)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
	/**AMGAD SAMIR**/
    /*polling*/
	//wait until transimtte data empty
	while((GET_BIT(UCSRA_REG,UCSRA_UDRE))==0);
     c56:	eb e2       	ldi	r30, 0x2B	; 43
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	82 95       	swap	r24
     c5e:	86 95       	lsr	r24
     c60:	87 70       	andi	r24, 0x07	; 7
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	81 70       	andi	r24, 0x01	; 1
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	a1 f3       	breq	.-24     	; 0xc56 <M_UART_voidSendData+0xc>
		UDR_REG = Copy_u8Data;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	80 83       	st	Z, r24
}
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <M_UART_voidRecieveData>:
u8 M_UART_voidRecieveData(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     /*POLLING*/
	while((GET_BIT(UCSRA_REG,UCSRA_RXC))==0);
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	dc f7       	brge	.-10     	; 0xc86 <M_UART_voidRecieveData+0x8>
		return UDR_REG;
     c90:	ec e2       	ldi	r30, 0x2C	; 44
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <M_UART_voidSendString>:

void M_UART_voidSendString(u8 *ptr)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <M_UART_voidSendString+0x6>
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	0e c0       	rjmp	.+28     	; 0xccc <M_UART_voidSendString+0x30>
	while(ptr[i] != '\0')
	{
		M_UART_voidSendData(ptr[i]);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	80 81       	ld	r24, Z
     cc2:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
		i++;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	89 83       	std	Y+1, r24	; 0x01
}

void M_UART_voidSendString(u8 *ptr)
{
	u8 i =0;
	while(ptr[i] != '\0')
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	88 23       	and	r24, r24
     ce0:	39 f7       	brne	.-50     	; 0xcb0 <M_UART_voidSendString+0x14>
	{
		M_UART_voidSendData(ptr[i]);
		i++;
	}
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <SetCallback>:

void SetCallback(void (*pv)(void))
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <SetCallback+0x6>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
	if(pv != NULL)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	31 f0       	breq	.+12     	; 0xd10 <SetCallback+0x22>
	{
		ptr = pv;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	90 93 89 01 	sts	0x0189, r25
     d0c:	80 93 88 01 	sts	0x0188, r24
	}
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <__vector_15>:

void __vector_15(void)     __attribute__((signal));
void __vector_15(void)
{
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
    if(ptr != NULL)
     d44:	80 91 88 01 	lds	r24, 0x0188
     d48:	90 91 89 01 	lds	r25, 0x0189
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	29 f0       	breq	.+10     	; 0xd5a <__vector_15+0x40>
    {
    	ptr();
     d50:	e0 91 88 01 	lds	r30, 0x0188
     d54:	f0 91 89 01 	lds	r31, 0x0189
     d58:	09 95       	icall
    }
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/

	SET_BIT(TWCR, TWCR_TWEA);
     d8c:	a6 e5       	ldi	r26, 0x56	; 86
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e6 e5       	ldi	r30, 0x56	; 86
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
     d9a:	e0 e2       	ldi	r30, 0x20	; 32
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
     da2:	a1 e2       	ldi	r26, 0x21	; 33
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e1 e2       	ldi	r30, 0x21	; 33
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     db0:	a1 e2       	ldi	r26, 0x21	; 33
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e1 e2       	ldi	r30, 0x21	; 33
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	88 23       	and	r24, r24
     dc2:	29 f0       	breq	.+10     	; 0xdce <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR = (Copy_u8Address << 1);
     dc4:	e2 e2       	ldi	r30, 0x22	; 34
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	88 0f       	add	r24, r24
     dcc:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     dce:	a6 e5       	ldi	r26, 0x56	; 86
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	8c 93       	st	X, r24
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
     df0:	e2 e2       	ldi	r30, 0x22	; 34
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 0f       	add	r24, r24
     df8:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     dfa:	a6 e5       	ldi	r26, 0x56	; 86
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e6 e5       	ldi	r30, 0x56	; 86
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     e08:	a6 e5       	ldi	r26, 0x56	; 86
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	8c 93       	st	X, r24
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e28:	19 82       	std	Y+1, r1	; 0x01
//	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
	/*Send Start Condition Bit*/
		SET_BIT(TWCR, TWCR_TWSTA);
     e2a:	a6 e5       	ldi	r26, 0x56	; 86
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
		SET_BIT(TWCR, TWCR_TWINT);
     e38:	a6 e5       	ldi	r26, 0x56	; 86
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e6 e5       	ldi	r30, 0x56	; 86
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 23       	and	r24, r24
     e4e:	dc f7       	brge	.-10     	; 0xe46 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
     e50:	e1 e2       	ldi	r30, 0x21	; 33
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	88 7f       	andi	r24, 0xF8	; 248
     e5c:	90 70       	andi	r25, 0x00	; 0
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	91 05       	cpc	r25, r1
     e62:	11 f0       	breq	.+4      	; 0xe68 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e7c:	19 82       	std	Y+1, r1	; 0x01
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
     e7e:	a6 e5       	ldi	r26, 0x56	; 86
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e6 e5       	ldi	r30, 0x56	; 86
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	84 6a       	ori	r24, 0xA4	; 164
     e8a:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     e8c:	e6 e5       	ldi	r30, 0x56	; 86
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	dc f7       	brge	.-10     	; 0xe8c <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
     e96:	e1 e2       	ldi	r30, 0x21	; 33
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	80 31       	cpi	r24, 0x10	; 16
     ea6:	91 05       	cpc	r25, r1
     ea8:	11 f0       	breq	.+4      	; 0xeae <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     ec6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
     ec8:	19 82       	std	Y+1, r1	; 0x01



	/*Set 7 bits slave address to the bus*/
	TWDR = ((Copy_u8SlaveAddress << 1)&0b11111110);
     eca:	e3 e2       	ldi	r30, 0x23	; 35
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	//CLR_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     eda:	a6 e5       	ldi	r26, 0x56	; 86
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e5       	ldi	r30, 0x56	; 86
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     ee8:	a6 e5       	ldi	r26, 0x56	; 86
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     ef6:	e6 e5       	ldi	r30, 0x56	; 86
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x3e>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
     f00:	e1 e2       	ldi	r30, 0x21	; 33
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	90 70       	andi	r25, 0x00	; 0
     f0e:	88 31       	cpi	r24, 0x18	; 24
     f10:	91 05       	cpc	r25, r1
     f12:	11 f0       	breq	.+4      	; 0xf18 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x60>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f32:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1)|1;
     f34:	e3 e2       	ldi	r30, 0x23	; 35
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	//SET_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     f46:	a6 e5       	ldi	r26, 0x56	; 86
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e5       	ldi	r30, 0x56	; 86
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     f54:	a6 e5       	ldi	r26, 0x56	; 86
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e5       	ldi	r30, 0x56	; 86
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     f62:	e6 e5       	ldi	r30, 0x56	; 86
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 23       	and	r24, r24
     f6a:	dc f7       	brge	.-10     	; 0xf62 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x3c>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
     f6c:	e1 e2       	ldi	r30, 0x21	; 33
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	88 7f       	andi	r24, 0xF8	; 248
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	80 34       	cpi	r24, 0x40	; 64
     f7c:	91 05       	cpc	r25, r1
     f7e:	11 f0       	breq	.+4      	; 0xf84 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x5e>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
     f80:	84 e0       	ldi	r24, 0x04	; 4
     f82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f9c:	19 82       	std	Y+1, r1	; 0x01



	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
     f9e:	e3 e2       	ldi	r30, 0x23	; 35
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     fa6:	a6 e5       	ldi	r26, 0x56	; 86
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e5       	ldi	r30, 0x56	; 86
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     fb4:	e6 e5       	ldi	r30, 0x56	; 86
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	dc f7       	brge	.-10     	; 0xfb4 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
     fbe:	e1 e2       	ldi	r30, 0x21	; 33
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	88 7f       	andi	r24, 0xF8	; 248
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	88 32       	cpi	r24, 0x28	; 40
     fce:	91 05       	cpc	r25, r1
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
     fd2:	85 e0       	ldi	r24, 0x05	; 5
     fd4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
     ff4:	a6 e5       	ldi	r26, 0x56	; 86
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    1002:	e6 e5       	ldi	r30, 0x56	; 86
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 23       	and	r24, r24
    100a:	dc f7       	brge	.-10     	; 0x1002 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    100c:	e1 e2       	ldi	r30, 0x21	; 33
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	88 7f       	andi	r24, 0xF8	; 248
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	80 35       	cpi	r24, 0x50	; 80
    101c:	91 05       	cpc	r25, r1
    101e:	19 f0       	breq	.+6      	; 0x1026 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    1026:	e3 e2       	ldi	r30, 0x23	; 35
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	ea 81       	ldd	r30, Y+2	; 0x02
    102e:	fb 81       	ldd	r31, Y+3	; 0x03
    1030:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    1032:	89 81       	ldd	r24, Y+1	; 0x01

}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <TWI_ErrorStatusMasterReadDataByteWithNACK>:

TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithNACK(u8 * Copy_pu8ReceivedByte)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x6>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
	/* Clear the Ack  */
	CLR_BIT(TWCR, TWCR_TWEA);
    1050:	a6 e5       	ldi	r26, 0x56	; 86
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e6 e5       	ldi	r30, 0x56	; 86
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	8c 93       	st	X, r24

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    105e:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    1060:	a6 e5       	ldi	r26, 0x56	; 86
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e5       	ldi	r30, 0x56	; 86
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 68       	ori	r24, 0x80	; 128
    106c:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    106e:	e6 e5       	ldi	r30, 0x56	; 86
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 23       	and	r24, r24
    1076:	dc f7       	brge	.-10     	; 0x106e <TWI_ErrorStatusMasterReadDataByteWithNACK+0x2e>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_NACK)
    1078:	e1 e2       	ldi	r30, 0x21	; 33
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	88 35       	cpi	r24, 0x58	; 88
    1088:	91 05       	cpc	r25, r1
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x52>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    108c:	86 e0       	ldi	r24, 0x06	; 6
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	06 c0       	rjmp	.+12     	; 0x109e <TWI_ErrorStatusMasterReadDataByteWithNACK+0x5e>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    1092:	e3 e2       	ldi	r30, 0x23	; 35
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    109e:	89 81       	ldd	r24, Y+1	; 0x01

}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    10b4:	a6 e5       	ldi	r26, 0x56	; 86
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e6 e5       	ldi	r30, 0x56	; 86
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    10c2:	a6 e5       	ldi	r26, 0x56	; 86
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24

}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <TIMER_voidTimer0Init>:

void (* TIMER_pvTimer0NotificationFunction)(void) = NULL_POINTER; 
void (* TIMER_pvICUNotificationFunction)(void) = NULL_POINTER;

void TIMER_voidTimer0Init(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	/*Set Timer 0 in Fast PWM Mode*/
	SET_BIT(TCCR0, TCCR0_WGM00);
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 60       	ori	r24, 0x08	; 8
    10f8:	8c 93       	st	X, r24
	
	/*Set The Prescaler to be 8*/
	CLR_BIT(TCCR0, TCCR0_CS00);
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8e 7f       	andi	r24, 0xFE	; 254
    1106:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    1108:	a3 e5       	ldi	r26, 0x53	; 83
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e3 e5       	ldi	r30, 0x53	; 83
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    1116:	a3 e5       	ldi	r26, 0x53	; 83
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e3 e5       	ldi	r30, 0x53	; 83
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8b 7f       	andi	r24, 0xFB	; 251
    1122:	8c 93       	st	X, r24

	/*Set The Set On TOP, Clear On Compare Mode (Non-Inverted)*/
	CLR_BIT(TCCR0, TCCR0_COM00);
    1124:	a3 e5       	ldi	r26, 0x53	; 83
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7e       	andi	r24, 0xEF	; 239
    1130:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_COM01);
    1132:	a3 e5       	ldi	r26, 0x53	; 83
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e3 e5       	ldi	r30, 0x53	; 83
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 62       	ori	r24, 0x20	; 32
    113e:	8c 93       	st	X, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <TIMER_voidTimer1Init>:


void TIMER_voidTimer1Init(void)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	/*Select The Normal Mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    114e:	af e4       	ldi	r26, 0x4F	; 79
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ef e4       	ldi	r30, 0x4F	; 79
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8e 7f       	andi	r24, 0xFE	; 254
    115a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
    115c:	af e4       	ldi	r26, 0x4F	; 79
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ef e4       	ldi	r30, 0x4F	; 79
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8d 7f       	andi	r24, 0xFD	; 253
    1168:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM12);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	87 7f       	andi	r24, 0xF7	; 247
    1176:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8f 7e       	andi	r24, 0xEF	; 239
    1184:	8c 93       	st	X, r24

	/*Set Prescaler to be 8*/
	CLR_BIT(TCCR1B, TCCR1B_CS10);
    1186:	ae e4       	ldi	r26, 0x4E	; 78
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ee e4       	ldi	r30, 0x4E	; 78
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS11);
    1194:	ae e4       	ldi	r26, 0x4E	; 78
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ee e4       	ldi	r30, 0x4E	; 78
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_CS12);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8b 7f       	andi	r24, 0xFB	; 251
    11ae:	8c 93       	st	X, r24
}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <TIMER_voidTimer1ASetCompareValue>:


void TIMER_voidTimer1ASetCompareValue(u16 Copy_u16CompareValue)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <TIMER_voidTimer1ASetCompareValue+0x6>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel A Register*/
	OCR1A = Copy_u16CompareValue;
    11c4:	ea e4       	ldi	r30, 0x4A	; 74
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <TIMER_voidTimer1BSetCompareValue>:

void TIMER_voidTimer1BSetCompareValue(u16 Copy_u16CompareValue)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <TIMER_voidTimer1BSetCompareValue+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel B Register*/
	OCR1B = Copy_u16CompareValue;
    11e8:	e8 e4       	ldi	r30, 0x48	; 72
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <TIMER_voidTimer1SetInputCaptureValue>:

void TIMER_voidTimer1SetInputCaptureValue(u16 Copy_u16CaptureValue)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <TIMER_voidTimer1SetInputCaptureValue+0x6>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Input Capture Value to ICR1 Register*/
	ICR1 = Copy_u16CaptureValue;
    120c:	e6 e4       	ldi	r30, 0x46	; 70
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <TIMER_voidTimer0SetCompareValue>:


void TIMER_voidTimer0SetCompareValue(u8 Copy_u8CompareValue)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Value to the OCR0 Register*/
	OCR0 = Copy_u8CompareValue;
    122e:	ec e5       	ldi	r30, 0x5C	; 92
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	80 83       	st	Z, r24
}
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <TIMER_voidTimer0SetCallBack>:

void TIMER_voidTimer0SetCallBack(void (*Copy_pvNotificationFunction)(void))
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <TIMER_voidTimer0SetCallBack+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the function address to the global pointer to function*/
	TIMER_pvTimer0NotificationFunction = Copy_pvNotificationFunction;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	90 93 8b 01 	sts	0x018B, r25
    1254:	80 93 8a 01 	sts	0x018A, r24
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <ICU_voidInit>:


void ICU_voidInit(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	/*Set Trigger to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    126a:	ae e4       	ldi	r26, 0x4E	; 78
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ee e4       	ldi	r30, 0x4E	; 78
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 64       	ori	r24, 0x40	; 64
    1276:	8c 93       	st	X, r24

	/*Enable The ICU Interrupt*/
	SET_BIT(TIMSK, TIMSK_TICIE1);
    1278:	a9 e5       	ldi	r26, 0x59	; 89
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e9 e5       	ldi	r30, 0x59	; 89
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 62       	ori	r24, 0x20	; 32
    1284:	8c 93       	st	X, r24
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <ICU_voidSetTrigger>:



void ICU_voidSetTrigger(u8 Copy_u8TriggerSource)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <ICU_voidSetTrigger+0x6>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TriggerSource)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3b 83       	std	Y+3, r19	; 0x03
    12a2:	2a 83       	std	Y+2, r18	; 0x02
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <ICU_voidSetTrigger+0x2c>
    12ac:	2a 81       	ldd	r18, Y+2	; 0x02
    12ae:	3b 81       	ldd	r19, Y+3	; 0x03
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	31 05       	cpc	r19, r1
    12b4:	49 f0       	breq	.+18     	; 0x12c8 <ICU_voidSetTrigger+0x3c>
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <ICU_voidSetTrigger+0x4a>
	{
		case RISING_EDGE:
			/*Set The Rising Edge to be the trigger source*/
			SET_BIT(TCCR1B, TCCR1B_ICES1);
    12b8:	ae e4       	ldi	r26, 0x4E	; 78
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ee e4       	ldi	r30, 0x4E	; 78
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	8c 93       	st	X, r24
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <ICU_voidSetTrigger+0x4a>
			break;
		case FALLING_EDGE:
			/*Set The Falling Edge to be the trigger source*/
			CLR_BIT(TCCR1B, TCCR1B_ICES1);
    12c8:	ae e4       	ldi	r26, 0x4E	; 78
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ee e4       	ldi	r30, 0x4E	; 78
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7b       	andi	r24, 0xBF	; 191
    12d4:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	/*Get The Captured Value From ICR1 Register*/
	return ICR1;
    12ea:	e6 e4       	ldi	r30, 0x46	; 70
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <ICU_voidInterruptDisbale>:

void ICU_voidInterruptDisbale(void)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
	/*Disable The ICU Interrupt*/
	CLR_BIT(TIMSK, TIMSK_TICIE1);
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	8c 93       	st	X, r24
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <ICU_voidSetCallBack>:

void ICU_voidSetCallBack(void (*Copy_pvNotificationFunction)(void))
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <ICU_voidSetCallBack+0x6>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
	TIMER_pvICUNotificationFunction = Copy_pvNotificationFunction;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	90 93 8d 01 	sts	0x018D, r25
    132a:	80 93 8c 01 	sts	0x018C, r24
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <__vector_10>:

/*ISR for Timer0 Compare Match Event */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	/*Check if the global pointer to function is changed or not*/
	if(TIMER_pvTimer0NotificationFunction != NULL_POINTER)
    1362:	80 91 8a 01 	lds	r24, 0x018A
    1366:	90 91 8b 01 	lds	r25, 0x018B
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	29 f0       	breq	.+10     	; 0x1378 <__vector_10+0x40>
	{
		/*Execute the global pointer to function*/
		TIMER_pvTimer0NotificationFunction();
    136e:	e0 91 8a 01 	lds	r30, 0x018A
    1372:	f0 91 8b 01 	lds	r31, 0x018B
    1376:	09 95       	icall
	}
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_6>:

/*ISR For ICU Capture Event*/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvICUNotificationFunction != NULL_POINTER)
    13c8:	80 91 8c 01 	lds	r24, 0x018C
    13cc:	90 91 8d 01 	lds	r25, 0x018D
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <__vector_6+0x40>
	{
		TIMER_pvICUNotificationFunction();
    13d4:	e0 91 8c 01 	lds	r30, 0x018C
    13d8:	f0 91 8d 01 	lds	r31, 0x018D
    13dc:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <SPI_voidMasterInit>:




void SPI_voidMasterInit(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	/*Set The Node To Be Master Node*/
	SET_BIT(SPCR, SPCR_MSTR);
    140c:	ad e2       	ldi	r26, 0x2D	; 45
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ed e2       	ldi	r30, 0x2D	; 45
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 61       	ori	r24, 0x10	; 16
    1418:	8c 93       	st	X, r24
	/*Set The MSB to be sent first*/
	CLR_BIT(SPCR, SPCR_DORD);
    141a:	ad e2       	ldi	r26, 0x2D	; 45
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ed e2       	ldi	r30, 0x2D	; 45
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 7d       	andi	r24, 0xDF	; 223
    1426:	8c 93       	st	X, r24

	/*Set The Leading Edge To be The Rising Edge*/
	CLR_BIT(SPCR, SPCR_CPOL);
    1428:	ad e2       	ldi	r26, 0x2D	; 45
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ed e2       	ldi	r30, 0x2D	; 45
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	87 7f       	andi	r24, 0xF7	; 247
    1434:	8c 93       	st	X, r24

	/*Sample At Leading Edge*/
	CLR_BIT(SPCR, SPCR_CPHA);
    1436:	ad e2       	ldi	r26, 0x2D	; 45
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ed e2       	ldi	r30, 0x2D	; 45
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8b 7f       	andi	r24, 0xFB	; 251
    1442:	8c 93       	st	X, r24

	/*Clock Prescaler, divide by 16*/
	SET_BIT(SPCR, SPCR_SPR0);
    1444:	ad e2       	ldi	r26, 0x2D	; 45
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ed e2       	ldi	r30, 0x2D	; 45
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    1452:	ad e2       	ldi	r26, 0x2D	; 45
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ed e2       	ldi	r30, 0x2D	; 45
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8d 7f       	andi	r24, 0xFD	; 253
    145e:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    1460:	ae e2       	ldi	r26, 0x2E	; 46
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ee e2       	ldi	r30, 0x2E	; 46
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	8c 93       	st	X, r24
	/*Enable The SPI*/
	SET_BIT(SPCR, SPCR_SPE);
    146e:	ad e2       	ldi	r26, 0x2D	; 45
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ed e2       	ldi	r30, 0x2D	; 45
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 64       	ori	r24, 0x40	; 64
    147a:	8c 93       	st	X, r24
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
	/*Set The Node To Be Salve Node*/
	CLR_BIT(SPCR, SPCR_MSTR);
    148a:	ad e2       	ldi	r26, 0x2D	; 45
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ed e2       	ldi	r30, 0x2D	; 45
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8f 7e       	andi	r24, 0xEF	; 239
    1496:	8c 93       	st	X, r24
	/*Set The MSB to be sent first*/
	CLR_BIT(SPCR, SPCR_DORD);
    1498:	ad e2       	ldi	r26, 0x2D	; 45
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ed e2       	ldi	r30, 0x2D	; 45
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 7d       	andi	r24, 0xDF	; 223
    14a4:	8c 93       	st	X, r24

	/*Set The Leading Edge To be The Rising Edge*/
	CLR_BIT(SPCR, SPCR_CPOL);
    14a6:	ad e2       	ldi	r26, 0x2D	; 45
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ed e2       	ldi	r30, 0x2D	; 45
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	87 7f       	andi	r24, 0xF7	; 247
    14b2:	8c 93       	st	X, r24

	/*Sample At Leading Edge*/
	CLR_BIT(SPCR, SPCR_CPHA);
    14b4:	ad e2       	ldi	r26, 0x2D	; 45
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ed e2       	ldi	r30, 0x2D	; 45
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8b 7f       	andi	r24, 0xFB	; 251
    14c0:	8c 93       	st	X, r24
	/*Enable The SPI*/
	SET_BIT(SPCR, SPCR_SPE);
    14c2:	ad e2       	ldi	r26, 0x2D	; 45
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ed e2       	ldi	r30, 0x2D	; 45
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 64       	ori	r24, 0x40	; 64
    14ce:	8c 93       	st	X, r24
}
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <SPI_u8Tranceive>:


u8 SPI_u8Tranceive(u8 Copy_u8Data)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Data in SPDR Register To Send*/
	SPDR = Copy_u8Data;
    14e2:	ef e2       	ldi	r30, 0x2F	; 47
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	80 83       	st	Z, r24

	/*Polling (Busy Waiting) until the transfer complete*/
	while(GET_BIT(SPSR, SPSR_SPIF) == 0);
    14ea:	ee e2       	ldi	r30, 0x2E	; 46
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	88 23       	and	r24, r24
    14f2:	dc f7       	brge	.-10     	; 0x14ea <SPI_u8Tranceive+0x14>

	/*Clear The Flag*/
	SET_BIT(SPSR, SPSR_SPIF);
    14f4:	ae e2       	ldi	r26, 0x2E	; 46
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ee e2       	ldi	r30, 0x2E	; 46
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	8c 93       	st	X, r24

	/*Get The Exchanged Data*/
	return SPDR;
    1502:	ef e2       	ldi	r30, 0x2F	; 47
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z

}
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GIE_voidEnableGlobalInterrupt>:




void GIE_voidEnableGlobalInterrupt(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1518:	af e5       	ldi	r26, 0x5F	; 95
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ef e5       	ldi	r30, 0x5F	; 95
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 68       	ori	r24, 0x80	; 128
    1524:	8c 93       	st	X, r24
}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt(void)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1534:	af e5       	ldi	r26, 0x5F	; 95
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ef e5       	ldi	r30, 0x5F	; 95
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8f 77       	andi	r24, 0x7F	; 127
    1540:	8c 93       	st	X, r24
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <EXTI_VoidInit>:
void (*GPF_3)(void) =NULL ;



void EXTI_VoidInit()
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62

#if INT_ID == INT0
	/*ENABLE INT0*/
	SET_BIT(GICR_REG,6);
    1550:	ab e5       	ldi	r26, 0x5B	; 91
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e5       	ldi	r30, 0x5B	; 91
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24
	/*Falling Edge */
	SET_BIT(MCUCR_REG,1);
	CLR_BIT(MCUCR_REG,0);
#elif INT_SENSE_CONTROL == RISING_EDGE
	/*RISING EDGE*/
	SET_BIT(MCUCR_REG,1);
    155e:	a5 e5       	ldi	r26, 0x55	; 85
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e5       	ldi	r30, 0x55	; 85
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	82 60       	ori	r24, 0x02	; 2
    156a:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,0);
    156c:	a5 e5       	ldi	r26, 0x55	; 85
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e5       	ldi	r30, 0x55	; 85
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	8c 93       	st	X, r24

#endif

#endif

}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <EXTI_VoidEnable>:
void EXTI_VoidEnable(u8 Copy_u8InterruptNumber, u8 Copy_u8SenseControll)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	2a 97       	sbiw	r28, 0x0a	; 10
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8InterruptNumber)
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3a 87       	std	Y+10, r19	; 0x0a
    15a0:	29 87       	std	Y+9, r18	; 0x09
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <EXTI_VoidEnable+0x2e>
    15ac:	6d c0       	rjmp	.+218    	; 0x1688 <EXTI_VoidEnable+0x108>
    15ae:	29 85       	ldd	r18, Y+9	; 0x09
    15b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <EXTI_VoidEnable+0x3a>
    15b8:	c9 c0       	rjmp	.+402    	; 0x174c <EXTI_VoidEnable+0x1cc>
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <EXTI_VoidEnable+0x44>
    15c2:	e9 c0       	rjmp	.+466    	; 0x1796 <EXTI_VoidEnable+0x216>
	{
			case INT0 : SET_BIT(GICR_REG,6);
    15c4:	ab e5       	ldi	r26, 0x5B	; 91
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	eb e5       	ldi	r30, 0x5B	; 91
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 64       	ori	r24, 0x40	; 64
    15d0:	8c 93       	st	X, r24

				switch(Copy_u8SenseControll)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	38 87       	std	Y+8, r19	; 0x08
    15da:	2f 83       	std	Y+7, r18	; 0x07
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	21 f1       	breq	.+72     	; 0x162e <EXTI_VoidEnable+0xae>
    15e6:	2f 81       	ldd	r18, Y+7	; 0x07
    15e8:	38 85       	ldd	r19, Y+8	; 0x08
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <EXTI_VoidEnable+0x7a>
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07
    15f2:	98 85       	ldd	r25, Y+8	; 0x08
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 f0       	breq	.+24     	; 0x1610 <EXTI_VoidEnable+0x90>
    15f8:	ce c0       	rjmp	.+412    	; 0x1796 <EXTI_VoidEnable+0x216>
    15fa:	2f 81       	ldd	r18, Y+7	; 0x07
    15fc:	38 85       	ldd	r19, Y+8	; 0x08
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	99 f1       	breq	.+102    	; 0x166a <EXTI_VoidEnable+0xea>
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	f9 f0       	breq	.+62     	; 0x164c <EXTI_VoidEnable+0xcc>
    160e:	c3 c0       	rjmp	.+390    	; 0x1796 <EXTI_VoidEnable+0x216>
				{
					case FALLING_EDGE :
						/*Falling Edge */
						SET_BIT(MCUCR_REG,1);
    1610:	a5 e5       	ldi	r26, 0x55	; 85
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e5       	ldi	r30, 0x55	; 85
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,0);
    161e:	a5 e5       	ldi	r26, 0x55	; 85
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e5       	ldi	r30, 0x55	; 85
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8e 7f       	andi	r24, 0xFE	; 254
    162a:	8c 93       	st	X, r24
    162c:	b4 c0       	rjmp	.+360    	; 0x1796 <EXTI_VoidEnable+0x216>
						break ;

					case RISING_EDGE :
						SET_BIT(MCUCR_REG,1);
    162e:	a5 e5       	ldi	r26, 0x55	; 85
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e5       	ldi	r30, 0x55	; 85
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	82 60       	ori	r24, 0x02	; 2
    163a:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,0);
    163c:	a5 e5       	ldi	r26, 0x55	; 85
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e5       	ldi	r30, 0x55	; 85
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	81 60       	ori	r24, 0x01	; 1
    1648:	8c 93       	st	X, r24
    164a:	a5 c0       	rjmp	.+330    	; 0x1796 <EXTI_VoidEnable+0x216>
						break;

					case ON_CHANGE :
					/*ANYCHANGE */
						CLR_BIT(MCUCR_REG,1);
    164c:	a5 e5       	ldi	r26, 0x55	; 85
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e5       	ldi	r30, 0x55	; 85
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,0);
    165a:	a5 e5       	ldi	r26, 0x55	; 85
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e5       	ldi	r30, 0x55	; 85
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	81 60       	ori	r24, 0x01	; 1
    1666:	8c 93       	st	X, r24
    1668:	96 c0       	rjmp	.+300    	; 0x1796 <EXTI_VoidEnable+0x216>
						break;
					case LOW_LEVEL :
						CLR_BIT(MCUCR_REG,1);
    166a:	a5 e5       	ldi	r26, 0x55	; 85
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e5       	ldi	r30, 0x55	; 85
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,0);
    1678:	a5 e5       	ldi	r26, 0x55	; 85
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e5       	ldi	r30, 0x55	; 85
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8e 7f       	andi	r24, 0xFE	; 254
    1684:	8c 93       	st	X, r24
    1686:	87 c0       	rjmp	.+270    	; 0x1796 <EXTI_VoidEnable+0x216>
					default : break ;

				}

			break ;
				case INT1 : SET_BIT(GICR_REG,7);
    1688:	ab e5       	ldi	r26, 0x5B	; 91
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	eb e5       	ldi	r30, 0x5B	; 91
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	8c 93       	st	X, r24

				switch(Copy_u8SenseControll)
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3e 83       	std	Y+6, r19	; 0x06
    169e:	2d 83       	std	Y+5, r18	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	21 f1       	breq	.+72     	; 0x16f2 <EXTI_VoidEnable+0x172>
    16aa:	2d 81       	ldd	r18, Y+5	; 0x05
    16ac:	3e 81       	ldd	r19, Y+6	; 0x06
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f4       	brge	.+10     	; 0x16be <EXTI_VoidEnable+0x13e>
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <EXTI_VoidEnable+0x154>
    16bc:	6c c0       	rjmp	.+216    	; 0x1796 <EXTI_VoidEnable+0x216>
    16be:	2d 81       	ldd	r18, Y+5	; 0x05
    16c0:	3e 81       	ldd	r19, Y+6	; 0x06
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	99 f1       	breq	.+102    	; 0x172e <EXTI_VoidEnable+0x1ae>
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	f9 f0       	breq	.+62     	; 0x1710 <EXTI_VoidEnable+0x190>
    16d2:	61 c0       	rjmp	.+194    	; 0x1796 <EXTI_VoidEnable+0x216>
				{
					case FALLING_EDGE :
						/*Falling Edge */
						SET_BIT(MCUCR_REG,3);
    16d4:	a5 e5       	ldi	r26, 0x55	; 85
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e5       	ldi	r30, 0x55	; 85
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,2);
    16e2:	a5 e5       	ldi	r26, 0x55	; 85
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e5       	ldi	r30, 0x55	; 85
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8b 7f       	andi	r24, 0xFB	; 251
    16ee:	8c 93       	st	X, r24
    16f0:	52 c0       	rjmp	.+164    	; 0x1796 <EXTI_VoidEnable+0x216>
						break ;

					case RISING_EDGE :
						SET_BIT(MCUCR_REG,3);
    16f2:	a5 e5       	ldi	r26, 0x55	; 85
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e5       	ldi	r30, 0x55	; 85
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	88 60       	ori	r24, 0x08	; 8
    16fe:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,2);
    1700:	a5 e5       	ldi	r26, 0x55	; 85
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e5       	ldi	r30, 0x55	; 85
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	84 60       	ori	r24, 0x04	; 4
    170c:	8c 93       	st	X, r24
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <EXTI_VoidEnable+0x216>
						break;

					case ON_CHANGE :
					/*ANYCHANGE */
						CLR_BIT(MCUCR_REG,3);
    1710:	a5 e5       	ldi	r26, 0x55	; 85
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e5       	ldi	r30, 0x55	; 85
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,2);
    171e:	a5 e5       	ldi	r26, 0x55	; 85
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e5       	ldi	r30, 0x55	; 85
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	84 60       	ori	r24, 0x04	; 4
    172a:	8c 93       	st	X, r24
    172c:	34 c0       	rjmp	.+104    	; 0x1796 <EXTI_VoidEnable+0x216>
						break;
					case LOW_LEVEL :
						CLR_BIT(MCUCR_REG,3);
    172e:	a5 e5       	ldi	r26, 0x55	; 85
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e5 e5       	ldi	r30, 0x55	; 85
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	87 7f       	andi	r24, 0xF7	; 247
    173a:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,2);
    173c:	a5 e5       	ldi	r26, 0x55	; 85
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e5       	ldi	r30, 0x55	; 85
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8b 7f       	andi	r24, 0xFB	; 251
    1748:	8c 93       	st	X, r24
    174a:	25 c0       	rjmp	.+74     	; 0x1796 <EXTI_VoidEnable+0x216>
						 break ;
					default : break ;

				}
			break;
				case INT2 : SET_BIT(GICR_REG,5);
    174c:	ab e5       	ldi	r26, 0x5B	; 91
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e5       	ldi	r30, 0x5B	; 91
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	80 62       	ori	r24, 0x20	; 32
    1758:	8c 93       	st	X, r24

					switch(Copy_u8SenseControll)
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3c 83       	std	Y+4, r19	; 0x04
    1762:	2b 83       	std	Y+3, r18	; 0x03
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	31 f0       	breq	.+12     	; 0x1778 <EXTI_VoidEnable+0x1f8>
    176c:	2b 81       	ldd	r18, Y+3	; 0x03
    176e:	3c 81       	ldd	r19, Y+4	; 0x04
    1770:	21 30       	cpi	r18, 0x01	; 1
    1772:	31 05       	cpc	r19, r1
    1774:	49 f0       	breq	.+18     	; 0x1788 <EXTI_VoidEnable+0x208>
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <EXTI_VoidEnable+0x216>
					{
						case FALLING_EDGE :
							/*Falling Edge */
							CLR_BIT(MCUCSR_REG,6);
    1778:	a4 e5       	ldi	r26, 0x54	; 84
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e5       	ldi	r30, 0x54	; 84
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8f 7b       	andi	r24, 0xBF	; 191
    1784:	8c 93       	st	X, r24
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <EXTI_VoidEnable+0x216>
							break ;

						case RISING_EDGE :
							SET_BIT(MCUCSR_REG,6);
    1788:	a4 e5       	ldi	r26, 0x54	; 84
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e4 e5       	ldi	r30, 0x54	; 84
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 64       	ori	r24, 0x40	; 64
    1794:	8c 93       	st	X, r24
							break;



	}
}
    1796:	2a 96       	adiw	r28, 0x0a	; 10
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_u8InterruptNumber)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <EXTI_VoidDisable+0x6>
    17ae:	0f 92       	push	r0
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8InterruptNumber )
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3b 83       	std	Y+3, r19	; 0x03
    17be:	2a 83       	std	Y+2, r18	; 0x02
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	89 f0       	breq	.+34     	; 0x17ec <EXTI_VoidDisable+0x44>
    17ca:	2a 81       	ldd	r18, Y+2	; 0x02
    17cc:	3b 81       	ldd	r19, Y+3	; 0x03
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	a1 f0       	breq	.+40     	; 0x17fc <EXTI_VoidDisable+0x54>
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	b9 f4       	brne	.+46     	; 0x180a <EXTI_VoidDisable+0x62>
	{
			case	INT0 :	CLR_BIT(GICR_REG,6);
    17dc:	ab e5       	ldi	r26, 0x5B	; 91
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e5       	ldi	r30, 0x5B	; 91
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7b       	andi	r24, 0xBF	; 191
    17e8:	8c 93       	st	X, r24
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <EXTI_VoidDisable+0x62>
								break ;
			case	INT1 :	CLR_BIT(GICR_REG,7);
    17ec:	ab e5       	ldi	r26, 0x5B	; 91
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	eb e5       	ldi	r30, 0x5B	; 91
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 77       	andi	r24, 0x7F	; 127
    17f8:	8c 93       	st	X, r24
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <EXTI_VoidDisable+0x62>
											break ;
			case	INT2 :	CLR_BIT(GICR_REG,5);
    17fc:	ab e5       	ldi	r26, 0x5B	; 91
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e5       	ldi	r30, 0x5B	; 91
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8f 7d       	andi	r24, 0xDF	; 223
    1808:	8c 93       	st	X, r24
											break ;
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <EXTI_SetCallBack_INT0>:


void EXTI_SetCallBack_INT0(void(*LPF)(void))
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <EXTI_SetCallBack_INT0+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9a 83       	std	Y+2, r25	; 0x02
    1822:	89 83       	std	Y+1, r24	; 0x01
	GPF_1  = LPF ;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	90 93 8f 01 	sts	0x018F, r25
    182c:	80 93 8e 01 	sts	0x018E, r24
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <EXTI_SetCallBack_INT1>:
void EXTI_SetCallBack_INT1(void(*LPF)(void))
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <EXTI_SetCallBack_INT1+0x6>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
	GPF_2  = LPF ;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	90 93 91 01 	sts	0x0191, r25
    1850:	80 93 90 01 	sts	0x0190, r24
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <EXTI_SetCallBack_INT2>:
void EXTI_SetCallBack_INT2(void(*LPF)(void))
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <EXTI_SetCallBack_INT2+0x6>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	GPF_3  = LPF ;
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	90 93 93 01 	sts	0x0193, r25
    1874:	80 93 92 01 	sts	0x0192, r24
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <__vector_1>:

void __vector_1 (void)	__attribute__((signal));

void __vector_1(void)
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	2f 93       	push	r18
    188e:	3f 93       	push	r19
    1890:	4f 93       	push	r20
    1892:	5f 93       	push	r21
    1894:	6f 93       	push	r22
    1896:	7f 93       	push	r23
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	ef 93       	push	r30
    18a2:	ff 93       	push	r31
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	if(GPF_1!=NULL)
    18ac:	80 91 8e 01 	lds	r24, 0x018E
    18b0:	90 91 8f 01 	lds	r25, 0x018F
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	29 f0       	breq	.+10     	; 0x18c2 <__vector_1+0x40>
		{
			GPF_1();
    18b8:	e0 91 8e 01 	lds	r30, 0x018E
    18bc:	f0 91 8f 01 	lds	r31, 0x018F
    18c0:	09 95       	icall
		}

}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <__vector_2>:
void __vector_2(void)	__attribute__((signal));

void __vector_2(void)
{
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	2f 93       	push	r18
    18f4:	3f 93       	push	r19
    18f6:	4f 93       	push	r20
    18f8:	5f 93       	push	r21
    18fa:	6f 93       	push	r22
    18fc:	7f 93       	push	r23
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	af 93       	push	r26
    1904:	bf 93       	push	r27
    1906:	ef 93       	push	r30
    1908:	ff 93       	push	r31
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	if(GPF_2!=NULL)
    1912:	80 91 90 01 	lds	r24, 0x0190
    1916:	90 91 91 01 	lds	r25, 0x0191
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	29 f0       	breq	.+10     	; 0x1928 <__vector_2+0x40>
		{
			GPF_2();
    191e:	e0 91 90 01 	lds	r30, 0x0190
    1922:	f0 91 91 01 	lds	r31, 0x0191
    1926:	09 95       	icall
		}
	GPF_2 =NULL;
    1928:	10 92 91 01 	sts	0x0191, r1
    192c:	10 92 90 01 	sts	0x0190, r1
}
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	ff 91       	pop	r31
    1936:	ef 91       	pop	r30
    1938:	bf 91       	pop	r27
    193a:	af 91       	pop	r26
    193c:	9f 91       	pop	r25
    193e:	8f 91       	pop	r24
    1940:	7f 91       	pop	r23
    1942:	6f 91       	pop	r22
    1944:	5f 91       	pop	r21
    1946:	4f 91       	pop	r20
    1948:	3f 91       	pop	r19
    194a:	2f 91       	pop	r18
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <__vector_3>:
void __vector_3(void)	__attribute__((signal));

void __vector_3(void)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	if(GPF_3!=NULL )
    1980:	80 91 92 01 	lds	r24, 0x0192
    1984:	90 91 93 01 	lds	r25, 0x0193
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	29 f0       	breq	.+10     	; 0x1996 <__vector_3+0x40>
		{
			GPF_3();
    198c:	e0 91 92 01 	lds	r30, 0x0192
    1990:	f0 91 93 01 	lds	r31, 0x0193
    1994:	09 95       	icall
		}
	GPF_3 = NULL ;
    1996:	10 92 93 01 	sts	0x0193, r1
    199a:	10 92 92 01 	sts	0x0192, r1
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	7f 91       	pop	r23
    19b0:	6f 91       	pop	r22
    19b2:	5f 91       	pop	r21
    19b4:	4f 91       	pop	r20
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <DIO_voidSetPinDirection>:
#include "DIO_config.h"



void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinMode)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_voidSetPinDirection+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <DIO_voidSetPinDirection+0x8>
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	6a 83       	std	Y+2, r22	; 0x02
    19d6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3d 83       	std	Y+5, r19	; 0x05
    19e0:	2c 83       	std	Y+4, r18	; 0x04
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	9d 81       	ldd	r25, Y+5	; 0x05
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	09 f4       	brne	.+2      	; 0x19ee <DIO_voidSetPinDirection+0x2a>
    19ec:	43 c0       	rjmp	.+134    	; 0x1a74 <DIO_voidSetPinDirection+0xb0>
    19ee:	2c 81       	ldd	r18, Y+4	; 0x04
    19f0:	3d 81       	ldd	r19, Y+5	; 0x05
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <DIO_voidSetPinDirection+0x3e>
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	9d 81       	ldd	r25, Y+5	; 0x05
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	71 f0       	breq	.+28     	; 0x1a1c <DIO_voidSetPinDirection+0x58>
    1a00:	bc c0       	rjmp	.+376    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
    1a02:	2c 81       	ldd	r18, Y+4	; 0x04
    1a04:	3d 81       	ldd	r19, Y+5	; 0x05
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <DIO_voidSetPinDirection+0x4a>
    1a0c:	5f c0       	rjmp	.+190    	; 0x1acc <DIO_voidSetPinDirection+0x108>
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	83 30       	cpi	r24, 0x03	; 3
    1a14:	91 05       	cpc	r25, r1
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <DIO_voidSetPinDirection+0x56>
    1a18:	85 c0       	rjmp	.+266    	; 0x1b24 <DIO_voidSetPinDirection+0x160>
    1a1a:	af c0       	rjmp	.+350    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
	{
		case PORTA:
			if(Copy_u8PinMode == INPUT)
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	88 23       	and	r24, r24
    1a20:	a9 f4       	brne	.+42     	; 0x1a4c <DIO_voidSetPinDirection+0x88>
			{
				CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    1a22:	aa e3       	ldi	r26, 0x3A	; 58
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ea e3       	ldi	r30, 0x3A	; 58
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_voidSetPinDirection+0x7c>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_voidSetPinDirection+0x78>
    1a44:	80 95       	com	r24
    1a46:	84 23       	and	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	97 c0       	rjmp	.+302    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRA, Copy_u8PinNumber);
    1a4c:	aa e3       	ldi	r26, 0x3A	; 58
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	ea e3       	ldi	r30, 0x3A	; 58
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	48 2f       	mov	r20, r24
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 2e       	mov	r0, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_voidSetPinDirection+0xa6>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	0a 94       	dec	r0
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_voidSetPinDirection+0xa2>
    1a6e:	84 2b       	or	r24, r20
    1a70:	8c 93       	st	X, r24
    1a72:	83 c0       	rjmp	.+262    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTB:
			if(Copy_u8PinMode == INPUT)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	88 23       	and	r24, r24
    1a78:	a9 f4       	brne	.+42     	; 0x1aa4 <DIO_voidSetPinDirection+0xe0>
			{
				CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    1a7a:	a7 e3       	ldi	r26, 0x37	; 55
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e7 e3       	ldi	r30, 0x37	; 55
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_voidSetPinDirection+0xd4>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_voidSetPinDirection+0xd0>
    1a9c:	80 95       	com	r24
    1a9e:	84 23       	and	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	6b c0       	rjmp	.+214    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRB, Copy_u8PinNumber);
    1aa4:	a7 e3       	ldi	r26, 0x37	; 55
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e7 e3       	ldi	r30, 0x37	; 55
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_voidSetPinDirection+0xfe>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_voidSetPinDirection+0xfa>
    1ac6:	84 2b       	or	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	57 c0       	rjmp	.+174    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTC:
			if(Copy_u8PinMode == INPUT)
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	88 23       	and	r24, r24
    1ad0:	a9 f4       	brne	.+42     	; 0x1afc <DIO_voidSetPinDirection+0x138>
			{
				CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    1ad2:	a4 e3       	ldi	r26, 0x34	; 52
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e4 e3       	ldi	r30, 0x34	; 52
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_voidSetPinDirection+0x12c>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_voidSetPinDirection+0x128>
    1af4:	80 95       	com	r24
    1af6:	84 23       	and	r24, r20
    1af8:	8c 93       	st	X, r24
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRC, Copy_u8PinNumber);
    1afc:	a4 e3       	ldi	r26, 0x34	; 52
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e4 e3       	ldi	r30, 0x34	; 52
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	48 2f       	mov	r20, r24
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	02 2e       	mov	r0, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_voidSetPinDirection+0x156>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	0a 94       	dec	r0
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_voidSetPinDirection+0x152>
    1b1e:	84 2b       	or	r24, r20
    1b20:	8c 93       	st	X, r24
    1b22:	2b c0       	rjmp	.+86     	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTD:
			if(Copy_u8PinMode == INPUT)
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	88 23       	and	r24, r24
    1b28:	a9 f4       	brne	.+42     	; 0x1b54 <DIO_voidSetPinDirection+0x190>
			{
				CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    1b2a:	a1 e3       	ldi	r26, 0x31	; 49
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e1 e3       	ldi	r30, 0x31	; 49
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_voidSetPinDirection+0x184>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_voidSetPinDirection+0x180>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	13 c0       	rjmp	.+38     	; 0x1b7a <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRD, Copy_u8PinNumber);
    1b54:	a1 e3       	ldi	r26, 0x31	; 49
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e1 e3       	ldi	r30, 0x31	; 49
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_voidSetPinDirection+0x1ae>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_voidSetPinDirection+0x1aa>
    1b76:	84 2b       	or	r24, r20
    1b78:	8c 93       	st	X, r24
			
			
		default:
			break;
	}
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <DIO_voidSetPinValue+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <DIO_voidSetPinValue+0x8>
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	6a 83       	std	Y+2, r22	; 0x02
    1b9c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3d 83       	std	Y+5, r19	; 0x05
    1ba6:	2c 83       	std	Y+4, r18	; 0x04
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	91 05       	cpc	r25, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <DIO_voidSetPinValue+0x2a>
    1bb2:	43 c0       	rjmp	.+134    	; 0x1c3a <DIO_voidSetPinValue+0xb0>
    1bb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <DIO_voidSetPinValue+0x3e>
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <DIO_voidSetPinValue+0x58>
    1bc6:	bc c0       	rjmp	.+376    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
    1bc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bca:	3d 81       	ldd	r19, Y+5	; 0x05
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <DIO_voidSetPinValue+0x4a>
    1bd2:	5f c0       	rjmp	.+190    	; 0x1c92 <DIO_voidSetPinValue+0x108>
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	91 05       	cpc	r25, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <DIO_voidSetPinValue+0x56>
    1bde:	85 c0       	rjmp	.+266    	; 0x1cea <DIO_voidSetPinValue+0x160>
    1be0:	af c0       	rjmp	.+350    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
	{
		case PORTA:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	a1 f4       	brne	.+40     	; 0x1c10 <DIO_voidSetPinValue+0x86>
			{
				SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    1be8:	ab e3       	ldi	r26, 0x3B	; 59
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	eb e3       	ldi	r30, 0x3B	; 59
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_voidSetPinValue+0x7c>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_voidSetPinValue+0x78>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	98 c0       	rjmp	.+304    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    1c10:	ab e3       	ldi	r26, 0x3B	; 59
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	eb e3       	ldi	r30, 0x3B	; 59
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_voidSetPinValue+0xa4>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_voidSetPinValue+0xa0>
    1c32:	80 95       	com	r24
    1c34:	84 23       	and	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	83 c0       	rjmp	.+262    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
		break;
		
		case PORTB:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	a1 f4       	brne	.+40     	; 0x1c68 <DIO_voidSetPinValue+0xde>
			{
				SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    1c40:	a8 e3       	ldi	r26, 0x38	; 56
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e8 e3       	ldi	r30, 0x38	; 56
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_voidSetPinValue+0xd4>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_voidSetPinValue+0xd0>
    1c62:	84 2b       	or	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	6c c0       	rjmp	.+216    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    1c68:	a8 e3       	ldi	r26, 0x38	; 56
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e3       	ldi	r30, 0x38	; 56
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_voidSetPinValue+0xfc>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_voidSetPinValue+0xf8>
    1c8a:	80 95       	com	r24
    1c8c:	84 23       	and	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	57 c0       	rjmp	.+174    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
		break;

		case PORTC:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	a1 f4       	brne	.+40     	; 0x1cc0 <DIO_voidSetPinValue+0x136>
			{
				SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    1c98:	a5 e3       	ldi	r26, 0x35	; 53
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e3       	ldi	r30, 0x35	; 53
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_voidSetPinValue+0x12c>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_voidSetPinValue+0x128>
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	40 c0       	rjmp	.+128    	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    1cc0:	a5 e3       	ldi	r26, 0x35	; 53
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e5 e3       	ldi	r30, 0x35	; 53
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_voidSetPinValue+0x154>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_voidSetPinValue+0x150>
    1ce2:	80 95       	com	r24
    1ce4:	84 23       	and	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	2b c0       	rjmp	.+86     	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
			break;

		case PORTD:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	a1 f4       	brne	.+40     	; 0x1d18 <DIO_voidSetPinValue+0x18e>
			{
				SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    1cf0:	a2 e3       	ldi	r26, 0x32	; 50
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e2 e3       	ldi	r30, 0x32	; 50
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_voidSetPinValue+0x184>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_voidSetPinValue+0x180>
    1d12:	84 2b       	or	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_voidSetPinValue+0x1ac>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_voidSetPinValue+0x1a8>
    1d3a:	80 95       	com	r24
    1d3c:	84 23       	and	r24, r20
    1d3e:	8c 93       	st	X, r24
			}
			break;

	}
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <DIO_voidSetPortDirection>:
//PORTA = 0b00000001;			// Bit (Pin) 0 in port A has pull up resistor turned on  



void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortMode)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <DIO_voidSetPortDirection+0x6>
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <DIO_voidSetPortDirection+0x8>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	3c 83       	std	Y+4, r19	; 0x04
    1d68:	2b 83       	std	Y+3, r18	; 0x03
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	91 05       	cpc	r25, r1
    1d72:	21 f1       	breq	.+72     	; 0x1dbc <DIO_voidSetPortDirection+0x6c>
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <DIO_voidSetPortDirection+0x38>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <DIO_voidSetPortDirection+0x4e>
    1d86:	46 c0       	rjmp	.+140    	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	22 30       	cpi	r18, 0x02	; 2
    1d8e:	31 05       	cpc	r19, r1
    1d90:	21 f1       	breq	.+72     	; 0x1dda <DIO_voidSetPortDirection+0x8a>
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	71 f1       	breq	.+92     	; 0x1df8 <DIO_voidSetPortDirection+0xa8>
    1d9c:	3b c0       	rjmp	.+118    	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
	{
		case PORTA:
			if(Copy_u8PortMode == OUTPUT)
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	29 f4       	brne	.+10     	; 0x1dae <DIO_voidSetPortDirection+0x5e>
			{
				DIO_DDRA = OUTPUT_PORT_VALUE;
    1da4:	ea e3       	ldi	r30, 0x3A	; 58
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	80 83       	st	Z, r24
    1dac:	33 c0       	rjmp	.+102    	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == INPUT)
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	88 23       	and	r24, r24
    1db2:	81 f5       	brne	.+96     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRA = INPUT_PORT_VALUE;
    1db4:	ea e3       	ldi	r30, 0x3A	; 58
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
    1dba:	2c c0       	rjmp	.+88     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
		break;
		
		case PORTB:
			if(Copy_u8PortMode == OUTPUT)
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <DIO_voidSetPortDirection+0x7c>
			{
				DIO_DDRB = OUTPUT_PORT_VALUE;
    1dc2:	e7 e3       	ldi	r30, 0x37	; 55
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	80 83       	st	Z, r24
    1dca:	24 c0       	rjmp	.+72     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode ==INPUT)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f5       	brne	.+66     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRB = INPUT_PORT_VALUE;
    1dd2:	e7 e3       	ldi	r30, 0x37	; 55
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	10 82       	st	Z, r1
    1dd8:	1d c0       	rjmp	.+58     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
		break;

		case PORTC:
			if(Copy_u8PortMode == OUTPUT)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	29 f4       	brne	.+10     	; 0x1dea <DIO_voidSetPortDirection+0x9a>
			{
				DIO_DDRC = OUTPUT_PORT_VALUE;
    1de0:	e4 e3       	ldi	r30, 0x34	; 52
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	80 83       	st	Z, r24
    1de8:	15 c0       	rjmp	.+42     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == INPUT)
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	88 23       	and	r24, r24
    1dee:	91 f4       	brne	.+36     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRC = INPUT_PORT_VALUE;
    1df0:	e4 e3       	ldi	r30, 0x34	; 52
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	10 82       	st	Z, r1
    1df6:	0e c0       	rjmp	.+28     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
		break;

		case PORTD:
			if(Copy_u8PortMode ==OUTPUT)
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <DIO_voidSetPortDirection+0xb8>
			{
				DIO_DDRD = OUTPUT_PORT_VALUE;
    1dfe:	e1 e3       	ldi	r30, 0x31	; 49
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	80 83       	st	Z, r24
    1e06:	06 c0       	rjmp	.+12     	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == INPUT)
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	88 23       	and	r24, r24
    1e0c:	19 f4       	brne	.+6      	; 0x1e14 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRD = INPUT_PORT_VALUE;
    1e0e:	e1 e3       	ldi	r30, 0x31	; 49
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	10 82       	st	Z, r1
			}
		break;

	}
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <DIO_voidSetPortValue>:


void 	DIO_voidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8Value)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <DIO_voidSetPortValue+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <DIO_voidSetPortValue+0x8>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3c 83       	std	Y+4, r19	; 0x04
    1e3a:	2b 83       	std	Y+3, r18	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	d1 f0       	breq	.+52     	; 0x1e7a <DIO_voidSetPortValue+0x58>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <DIO_voidSetPortValue+0x38>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <DIO_voidSetPortValue+0x4e>
    1e58:	1e c0       	rjmp	.+60     	; 0x1e96 <DIO_voidSetPortValue+0x74>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <DIO_voidSetPortValue+0x62>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	81 f0       	breq	.+32     	; 0x1e8e <DIO_voidSetPortValue+0x6c>
    1e6e:	13 c0       	rjmp	.+38     	; 0x1e96 <DIO_voidSetPortValue+0x74>
	{
		case PORTA: 
			DIO_PORTA = Copy_u8Value;
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <DIO_voidSetPortValue+0x74>
		break;
		
		case PORTB:
			DIO_PORTB = Copy_u8Value;
    1e7a:	e8 e3       	ldi	r30, 0x38	; 56
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <DIO_voidSetPortValue+0x74>
		break;

		case PORTC:
			DIO_PORTC = Copy_u8Value;
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <DIO_voidSetPortValue+0x74>
		break;

		case PORTD:
			DIO_PORTD = Copy_u8Value;
    1e8e:	e2 e3       	ldi	r30, 0x32	; 50
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
		break;

	}
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <DIO_u8GetPinValue+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <DIO_u8GetPinValue+0x8>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
    1eb4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName)
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3d 83       	std	Y+5, r19	; 0x05
    1ebe:	2c 83       	std	Y+4, r18	; 0x04
    1ec0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ec2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ec4:	41 30       	cpi	r20, 0x01	; 1
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	41 f1       	breq	.+80     	; 0x1f1a <DIO_u8GetPinValue+0x76>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	34 f4       	brge	.+12     	; 0x1ee0 <DIO_u8GetPinValue+0x3c>
    1ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed8:	21 15       	cp	r18, r1
    1eda:	31 05       	cpc	r19, r1
    1edc:	61 f0       	breq	.+24     	; 0x1ef6 <DIO_u8GetPinValue+0x52>
    1ede:	52 c0       	rjmp	.+164    	; 0x1f84 <DIO_u8GetPinValue+0xe0>
    1ee0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ee2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ee4:	42 30       	cpi	r20, 0x02	; 2
    1ee6:	51 05       	cpc	r21, r1
    1ee8:	51 f1       	breq	.+84     	; 0x1f3e <DIO_u8GetPinValue+0x9a>
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	83 30       	cpi	r24, 0x03	; 3
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	b9 f1       	breq	.+110    	; 0x1f62 <DIO_u8GetPinValue+0xbe>
    1ef4:	47 c0       	rjmp	.+142    	; 0x1f84 <DIO_u8GetPinValue+0xe0>
	{
		case PORTA:
			Local_u8PinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    1ef6:	e9 e3       	ldi	r30, 0x39	; 57
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a9 01       	movw	r20, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_u8GetPinValue+0x6a>
    1f0a:	55 95       	asr	r21
    1f0c:	47 95       	ror	r20
    1f0e:	8a 95       	dec	r24
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_u8GetPinValue+0x66>
    1f12:	ca 01       	movw	r24, r20
    1f14:	81 70       	andi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	35 c0       	rjmp	.+106    	; 0x1f84 <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTB:
			Local_u8PinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    1f1a:	e6 e3       	ldi	r30, 0x36	; 54
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	88 2f       	mov	r24, r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_u8GetPinValue+0x8e>
    1f2e:	55 95       	asr	r21
    1f30:	47 95       	ror	r20
    1f32:	8a 95       	dec	r24
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <DIO_u8GetPinValue+0x8a>
    1f36:	ca 01       	movw	r24, r20
    1f38:	81 70       	andi	r24, 0x01	; 1
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	23 c0       	rjmp	.+70     	; 0x1f84 <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTC:
			Local_u8PinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    1f3e:	e3 e3       	ldi	r30, 0x33	; 51
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a9 01       	movw	r20, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_u8GetPinValue+0xb2>
    1f52:	55 95       	asr	r21
    1f54:	47 95       	ror	r20
    1f56:	8a 95       	dec	r24
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_u8GetPinValue+0xae>
    1f5a:	ca 01       	movw	r24, r20
    1f5c:	81 70       	andi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	11 c0       	rjmp	.+34     	; 0x1f84 <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTD:
			Local_u8PinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    1f62:	e0 e3       	ldi	r30, 0x30	; 48
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a9 01       	movw	r20, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <DIO_u8GetPinValue+0xd6>
    1f76:	55 95       	asr	r21
    1f78:	47 95       	ror	r20
    1f7a:	8a 95       	dec	r24
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <DIO_u8GetPinValue+0xd2>
    1f7e:	ca 01       	movw	r24, r20
    1f80:	81 70       	andi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
		default:
			/* Error To Be Displayed */
		break;
	}
	
	return Local_u8PinValue;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <ADC_voidInit>:

ADC_STATE = IDLE;
 static u16 *GPu16Copy = NULL;
 static	void(*GPF)(void) =NULL;
void ADC_voidInit 	(void)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62

#if ReferenceSelection ==	AVCC
	//select ref voltage = AVCC
	//DIO_voidSetPortDirection(PORTA , INPUT);

	SET_BIT(ADMUX_REG , ADMUX_REFS0);
    1f9e:	a7 e2       	ldi	r26, 0x27	; 39
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e7 e2       	ldi	r30, 0x27	; 39
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 64       	ori	r24, 0x40	; 64
    1faa:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1);
    1fac:	a7 e2       	ldi	r26, 0x27	; 39
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e7 e2       	ldi	r30, 0x27	; 39
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8f 77       	andi	r24, 0x7F	; 127
    1fb8:	8c 93       	st	X, r24
	#elif  ADC_RETURN == ADC_LEFT
	// LEFT ADJUST
	SET_BIT(ADMUX_REG , ADMUX_ADLAR);
	#endif
#if PRESCALER == PRE64
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS2);
    1fba:	a6 e2       	ldi	r26, 0x26	; 38
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e6 e2       	ldi	r30, 0x26	; 38
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	84 60       	ori	r24, 0x04	; 4
    1fc6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
    1fc8:	a6 e2       	ldi	r26, 0x26	; 38
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e6 e2       	ldi	r30, 0x26	; 38
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	82 60       	ori	r24, 0x02	; 2
    1fd4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG , ADCSRA_ADPS0);
    1fd6:	a6 e2       	ldi	r26, 0x26	; 38
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e6 e2       	ldi	r30, 0x26	; 38
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	8e 7f       	andi	r24, 0xFE	; 254
    1fe2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS0);
#elif	PRESCALER == PRE8
#endif
	//ADC Enable
	SET_BIT(ADCSRA_REG , ADCSRA_ADEN);
    1fe4:	a6 e2       	ldi	r26, 0x26	; 38
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e6 e2       	ldi	r30, 0x26	; 38
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	80 68       	ori	r24, 0x80	; 128
    1ff0:	8c 93       	st	X, r24
	//SET_BIT(ADCSRA_REG , ADCSRA_ADIF);
	//#endif
	//prescaler 64


}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <ADC_u16GetAnalogReadSYNC>:
//Return : u32
//Func Descreption : Function that starting the conversion and return
// it to a u32
//..........................//
u16 ADC_u16GetAnalogReadSYNC(u8 Copy_Channel)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	0f 92       	push	r0
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	89 83       	std	Y+1, r24	; 0x01

	//u32 Local_u32Counter ;
	//clear Mux from 0 to 4 (reg&0b11100000)
	ADMUX_REG &= ADC_CHANNEL_MASK ;
    2004:	a7 e2       	ldi	r26, 0x27	; 39
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e7 e2       	ldi	r30, 0x27	; 39
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 7e       	andi	r24, 0xE0	; 224
    2010:	8c 93       	st	X, r24
	//reg or with copy_channel
	ADMUX_REG |= Copy_Channel ;
    2012:	a7 e2       	ldi	r26, 0x27	; 39
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e7 e2       	ldi	r30, 0x27	; 39
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	90 81       	ld	r25, Z
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	89 2b       	or	r24, r25
    2020:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    2022:	a6 e2       	ldi	r26, 0x26	; 38
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	80 64       	ori	r24, 0x40	; 64
    202e:	8c 93       	st	X, r24
	//polling flag
	while((GET_BIT(ADCSRA_REG,ADCSRA_ADIF))==0);
    2030:	e6 e2       	ldi	r30, 0x26	; 38
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	82 95       	swap	r24
    2038:	8f 70       	andi	r24, 0x0F	; 15
    203a:	88 2f       	mov	r24, r24
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	81 70       	andi	r24, 0x01	; 1
    2040:	90 70       	andi	r25, 0x00	; 0
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	a9 f3       	breq	.-22     	; 0x2030 <ADC_u16GetAnalogReadSYNC+0x38>
	//clear flag
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    2046:	a6 e2       	ldi	r26, 0x26	; 38
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e6 e2       	ldi	r30, 0x26	; 38
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 61       	ori	r24, 0x10	; 16
    2052:	8c 93       	st	X, r24
	//Local_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
//
//	Local_u32ADCAnalogValue = (Local_u32ADCDigitalValue * 500) / 1024 ;

#if ADC_RETURN == BITS_10
	return ADC_REG ;
    2054:	e4 e2       	ldi	r30, 0x24	; 36
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
#elif  ADC_RETURN == BITS_8
	return ADCH_REG ;
#endif
}
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <ADC_u16GetAnalogReadASYNC>:
//.(*PF_NotificationFun).......................//
//.Function Desc:Asynchronus ADC using ISR ...//
//.NOTE!!!:Enable Global Interrupt in main...//
//..........................................//
u8 	ADC_u16GetAnalogReadASYNC(u8 Copy_Channel,u16 *Pu8Reading,void (*PF_NotificationFun)(void))
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <ADC_u16GetAnalogReadASYNC+0x6>
    206a:	00 d0       	rcall	.+0      	; 0x206c <ADC_u16GetAnalogReadASYNC+0x8>
    206c:	00 d0       	rcall	.+0      	; 0x206e <ADC_u16GetAnalogReadASYNC+0xa>
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	7c 83       	std	Y+4, r23	; 0x04
    2076:	6b 83       	std	Y+3, r22	; 0x03
    2078:	5e 83       	std	Y+6, r21	; 0x06
    207a:	4d 83       	std	Y+5, r20	; 0x05
	u8	Local_uErrorState = OK;
    207c:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_STATE == IDLE)
    207e:	80 91 6e 01 	lds	r24, 0x016E
    2082:	90 91 6f 01 	lds	r25, 0x016F
    2086:	84 30       	cpi	r24, 0x04	; 4
    2088:	91 05       	cpc	r25, r1
    208a:	a9 f5       	brne	.+106    	; 0x20f6 <ADC_u16GetAnalogReadASYNC+0x92>
	{


		if((Pu8Reading==NULL)||(PF_NotificationFun==NULL))
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	21 f0       	breq	.+8      	; 0x209c <ADC_u16GetAnalogReadASYNC+0x38>
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	19 f4       	brne	.+6      	; 0x20a2 <ADC_u16GetAnalogReadASYNC+0x3e>
		{
			Local_uErrorState = NOK;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	2c c0       	rjmp	.+88     	; 0x20fa <ADC_u16GetAnalogReadASYNC+0x96>
		}
		else
		{
			//assign the value to gp
			GPu16Copy=Pu8Reading;
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	90 93 95 01 	sts	0x0195, r25
    20aa:	80 93 94 01 	sts	0x0194, r24
			GPF=PF_NotificationFun;
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	90 93 97 01 	sts	0x0197, r25
    20b6:	80 93 96 01 	sts	0x0196, r24
			//u32 Local_u32Counter ;
			//clear Mux from 0 to 4 (reg&0b11100000)
			ADMUX_REG &= ADC_CHANNEL_MASK ;
    20ba:	a7 e2       	ldi	r26, 0x27	; 39
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e7 e2       	ldi	r30, 0x27	; 39
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	80 7e       	andi	r24, 0xE0	; 224
    20c6:	8c 93       	st	X, r24
			//reg or with copy_channel
			ADMUX_REG |= Copy_Channel ;
    20c8:	a7 e2       	ldi	r26, 0x27	; 39
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e7 e2       	ldi	r30, 0x27	; 39
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	90 81       	ld	r25, Z
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	89 2b       	or	r24, r25
    20d6:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    20d8:	a6 e2       	ldi	r26, 0x26	; 38
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e6 e2       	ldi	r30, 0x26	; 38
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	80 64       	ori	r24, 0x40	; 64
    20e4:	8c 93       	st	X, r24
			//enable Interrupt
			SET_BIT(ADCSRA_REG,ADC_ADIE);
    20e6:	a6 e2       	ldi	r26, 0x26	; 38
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e6 e2       	ldi	r30, 0x26	; 38
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	88 60       	ori	r24, 0x08	; 8
    20f2:	8c 93       	st	X, r24
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <ADC_u16GetAnalogReadASYNC+0x96>
		}
	}
	else {
		 Local_uErrorState = BUSY_FUNC;
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_uErrorState ;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    20fc:	26 96       	adiw	r28, 0x06	; 6
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <__vector_16>:

void __vector_16(void) __attribute__((signal));

void __vector_16(void)
{
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	2f 93       	push	r18
    211a:	3f 93       	push	r19
    211c:	4f 93       	push	r20
    211e:	5f 93       	push	r21
    2120:	6f 93       	push	r22
    2122:	7f 93       	push	r23
    2124:	8f 93       	push	r24
    2126:	9f 93       	push	r25
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62

	//Read ADC Result
	*GPu16Copy=ADC_REG;
    2138:	a0 91 94 01 	lds	r26, 0x0194
    213c:	b0 91 95 01 	lds	r27, 0x0195
    2140:	e4 e2       	ldi	r30, 0x24	; 36
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	8d 93       	st	X+, r24
    214a:	9c 93       	st	X, r25
	//Change the state of ADC TO IDLE
	ADC_STATE = IDLE ;
    214c:	84 e0       	ldi	r24, 0x04	; 4
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	90 93 6f 01 	sts	0x016F, r25
    2154:	80 93 6e 01 	sts	0x016E, r24
	//Invoke Notification func
	GPF();
    2158:	e0 91 96 01 	lds	r30, 0x0196
    215c:	f0 91 97 01 	lds	r31, 0x0197
    2160:	09 95       	icall
	//Disable Interrupt
	CLR_BIT(ADCSRA_REG,ADC_ADIE);
    2162:	a6 e2       	ldi	r26, 0x26	; 38
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e6 e2       	ldi	r30, 0x26	; 38
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	87 7f       	andi	r24, 0xF7	; 247
    216e:	8c 93       	st	X, r24
}
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	ff 91       	pop	r31
    2176:	ef 91       	pop	r30
    2178:	bf 91       	pop	r27
    217a:	af 91       	pop	r26
    217c:	9f 91       	pop	r25
    217e:	8f 91       	pop	r24
    2180:	7f 91       	pop	r23
    2182:	6f 91       	pop	r22
    2184:	5f 91       	pop	r21
    2186:	4f 91       	pop	r20
    2188:	3f 91       	pop	r19
    218a:	2f 91       	pop	r18
    218c:	0f 90       	pop	r0
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	0f 90       	pop	r0
    2192:	1f 90       	pop	r1
    2194:	18 95       	reti

00002196 <LCD_voidSendCommand>:
#include <util/delay.h>



void LCD_voidSendCommand(u8 Copy_u8Command)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	2f 97       	sbiw	r28, 0x0f	; 15
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set The RS Pin To Be Low: 0v for Command */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	65 e0       	ldi	r22, 0x05	; 5
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	
	/* Set The RW Pin To Be Low: 0v for Write */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	66 e0       	ldi	r22, 0x06	; 6
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	
	/* Set The Port Value To Be The Command */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    21c4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_voidSetPortValue>
	
	/* Set The Enable Pin To High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	67 e0       	ldi	r22, 0x07	; 7
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	a0 e0       	ldi	r26, 0x00	; 0
    21d8:	b0 e4       	ldi	r27, 0x40	; 64
    21da:	8b 87       	std	Y+11, r24	; 0x0b
    21dc:	9c 87       	std	Y+12, r25	; 0x0c
    21de:	ad 87       	std	Y+13, r26	; 0x0d
    21e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	4a ef       	ldi	r20, 0xFA	; 250
    21f0:	54 e4       	ldi	r21, 0x44	; 68
    21f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	8f 83       	std	Y+7, r24	; 0x07
    21fc:	98 87       	std	Y+8, r25	; 0x08
    21fe:	a9 87       	std	Y+9, r26	; 0x09
    2200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e8       	ldi	r20, 0x80	; 128
    2210:	5f e3       	ldi	r21, 0x3F	; 63
    2212:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2216:	88 23       	and	r24, r24
    2218:	2c f4       	brge	.+10     	; 0x2224 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	3f c0       	rjmp	.+126    	; 0x22a2 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	3f ef       	ldi	r19, 0xFF	; 255
    2230:	4f e7       	ldi	r20, 0x7F	; 127
    2232:	57 e4       	ldi	r21, 0x47	; 71
    2234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2238:	18 16       	cp	r1, r24
    223a:	4c f5       	brge	.+82     	; 0x228e <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223c:	6b 85       	ldd	r22, Y+11	; 0x0b
    223e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	9e 85       	ldd	r25, Y+14	; 0x0e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e2       	ldi	r20, 0x20	; 32
    224a:	51 e4       	ldi	r21, 0x41	; 65
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	0f c0       	rjmp	.+30     	; 0x2284 <LCD_voidSendCommand+0xee>
    2266:	88 ec       	ldi	r24, 0xC8	; 200
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	9c 81       	ldd	r25, Y+4	; 0x04
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_voidSendCommand+0xdc>
    2276:	9c 83       	std	Y+4, r25	; 0x04
    2278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	69 f7       	brne	.-38     	; 0x2266 <LCD_voidSendCommand+0xd0>
    228c:	14 c0       	rjmp	.+40     	; 0x22b6 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_voidSendCommand+0x118>
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait For 2msec */
	_delay_ms(2);
	
	/* Set The Enable Pin To Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN,LOW);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	67 e0       	ldi	r22, 0x07	; 7
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	
}
    22c0:	2f 96       	adiw	r28, 0x0f	; 15
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	2f 97       	sbiw	r28, 0x0f	; 15
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set The RS Pin To Be High: 5v for Data */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	65 e0       	ldi	r22, 0x05	; 5
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	
	/* Set The RW Pin To Be Low: 0v for Write */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	66 e0       	ldi	r22, 0x06	; 6
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	
	/* Set The Port Value To Be The Data */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Data);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2300:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <DIO_voidSetPortValue>
	
	/* Set The Enable Pin To High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	67 e0       	ldi	r22, 0x07	; 7
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e0       	ldi	r26, 0x00	; 0
    2314:	b0 e4       	ldi	r27, 0x40	; 64
    2316:	8b 87       	std	Y+11, r24	; 0x0b
    2318:	9c 87       	std	Y+12, r25	; 0x0c
    231a:	ad 87       	std	Y+13, r26	; 0x0d
    231c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a ef       	ldi	r20, 0xFA	; 250
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8f 83       	std	Y+7, r24	; 0x07
    2338:	98 87       	std	Y+8, r25	; 0x08
    233a:	a9 87       	std	Y+9, r26	; 0x09
    233c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	2c f4       	brge	.+10     	; 0x2360 <LCD_voidSendData+0x8e>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	3f c0       	rjmp	.+126    	; 0x23de <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	4c f5       	brge	.+82     	; 0x23ca <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	6b 85       	ldd	r22, Y+11	; 0x0b
    237a:	7c 85       	ldd	r23, Y+12	; 0x0c
    237c:	8d 85       	ldd	r24, Y+13	; 0x0d
    237e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e 83       	std	Y+6, r25	; 0x06
    239e:	8d 83       	std	Y+5, r24	; 0x05
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <LCD_voidSendData+0xee>
    23a2:	88 ec       	ldi	r24, 0xC8	; 200
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	8b 83       	std	Y+3, r24	; 0x03
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_voidSendData+0xdc>
    23b2:	9c 83       	std	Y+4, r25	; 0x04
    23b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <LCD_voidSendData+0xd0>
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_voidSendData+0x118>
    23ee:	9a 83       	std	Y+2, r25	; 0x02
    23f0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait For 2msec */
	_delay_ms(2);
	
	/* Set The Enable Pin To Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	67 e0       	ldi	r22, 0x07	; 7
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	
}
    23fc:	2f 96       	adiw	r28, 0x0f	; 15
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_voidInit>:

void LCD_voidInit(void)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	2e 97       	sbiw	r28, 0x0e	; 14
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
	/* Set The Data Port To Be Output */
	DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <DIO_voidSetPortDirection>
	
	/* Set The Control Pins To Be Output */
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	65 e0       	ldi	r22, 0x05	; 5
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	66 e0       	ldi	r22, 0x06	; 6
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	67 e0       	ldi	r22, 0x07	; 7
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b2 e4       	ldi	r27, 0x42	; 66
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a ef       	ldi	r20, 0xFA	; 250
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_voidInit+0x8c>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <LCD_voidInit+0xec>
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_voidInit+0xda>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <LCD_voidInit+0xce>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_voidInit+0x116>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait For 40msec*/
	_delay_ms(40);
	/* Send The Function set, N: 1 => 2-Lines, F: 0 => 5*8 dots*/
	LCD_voidSendCommand(0x38);
    252c:	88 e3       	ldi	r24, 0x38	; 56
    252e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0F);
    2532:	8f e0       	ldi	r24, 0x0F	; 15
    2534:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_voidSendCommand>
	
}
    253e:	2e 96       	adiw	r28, 0x0e	; 14
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <LCD_voidGoToXY>:



void LCD_voidGoToXY(u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <LCD_voidGoToXY+0x6>
    2556:	0f 92       	push	r0
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	8a 83       	std	Y+2, r24	; 0x02
    255e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0;
    2560:	19 82       	std	Y+1, r1	; 0x01
	/* Check if we are at the first row */
	if(Copy_u8XPosition == 0)
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	88 23       	and	r24, r24
    2566:	19 f4       	brne	.+6      	; 0x256e <LCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8YPosition;
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	06 c0       	rjmp	.+12     	; 0x257a <LCD_voidGoToXY+0x2a>
	}
	/* Check if we are at the second row */
	else if(Copy_u8XPosition == 1)
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	19 f4       	brne	.+6      	; 0x257a <LCD_voidGoToXY+0x2a>
	{
		/* Add 0x40 To The Y-Position */
		Local_u8Address = Copy_u8YPosition + 0x40;
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	80 5c       	subi	r24, 0xC0	; 192
    2578:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Set The 8th Bit to be 1 */
	SET_BIT(Local_u8Address, 7);
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	80 68       	ori	r24, 0x80	; 128
    257e:	89 83       	std	Y+1, r24	; 0x01
	/* Send The Set Address Of DDRAM */
	LCD_voidSendCommand(Local_u8Address);
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_voidSendCommand>
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8String)
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <LCD_voidSendString+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <LCD_voidSendString+0x30>
	while(Copy_pu8String[Local_u8LoopCounter] != '\0')
	{
		LCD_voidSendData(Copy_pu8String[Local_u8LoopCounter]);
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	fc 01       	movw	r30, r24
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	80 81       	ld	r24, Z
    25b8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidSendData>
		Local_u8LoopCounter++;
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	8f 5f       	subi	r24, 0xFF	; 255
    25c0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8 * Copy_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Copy_pu8String[Local_u8LoopCounter] != '\0')
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	fc 01       	movw	r30, r24
    25ce:	e2 0f       	add	r30, r18
    25d0:	f3 1f       	adc	r31, r19
    25d2:	80 81       	ld	r24, Z
    25d4:	88 23       	and	r24, r24
    25d6:	39 f7       	brne	.-50     	; 0x25a6 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <LCD_voidSendCustomCharacter>:
void LCD_voidSendCustomCharacter(
								u8 * Copy_pu8CharacterArray, 
								u8 Copy_u8PatternNum,
								u8 Copy_u8XPosition,
								u8 Copy_u8YPosition)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	27 97       	sbiw	r28, 0x07	; 7
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
    25fc:	6d 83       	std	Y+5, r22	; 0x05
    25fe:	4e 83       	std	Y+6, r20	; 0x06
    2600:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter;
	u8 Local_u8CGRAMAddress;
	/* Calculate the CGRAM Address = PatternNum * 8 */
	Local_u8CGRAMAddress = Copy_u8PatternNum * 8;
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CGRAMAddress, 6);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	80 64       	ori	r24, 0x40	; 64
    261a:	89 83       	std	Y+1, r24	; 0x01
	/* Send Set CGRAM Address */
	LCD_voidSendCommand(Local_u8CGRAMAddress);
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_voidSendCommand>
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    2622:	1a 82       	std	Y+2, r1	; 0x02
    2624:	0e c0       	rjmp	.+28     	; 0x2642 <LCD_voidSendCustomCharacter+0x5e>
	{
		/* Send Byte from The CharacterArray */
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);	
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	80 81       	ld	r24, Z
    2638:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidSendData>
	/* Calculate the CGRAM Address = PatternNum * 8 */
	Local_u8CGRAMAddress = Copy_u8PatternNum * 8;
	SET_BIT(Local_u8CGRAMAddress, 6);
	/* Send Set CGRAM Address */
	LCD_voidSendCommand(Local_u8CGRAMAddress);
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	8f 5f       	subi	r24, 0xFF	; 255
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	88 30       	cpi	r24, 0x08	; 8
    2646:	78 f3       	brcs	.-34     	; 0x2626 <LCD_voidSendCustomCharacter+0x42>
	{
		/* Send Byte from The CharacterArray */
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);	
	}
	/* Send The Command To Set DDRAM Address */
	LCD_voidGoToXY(Copy_u8XPosition, Copy_u8YPosition);
    2648:	8e 81       	ldd	r24, Y+6	; 0x06
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
	/* Display the pattern From the CGRAM */ 
	LCD_voidSendData(Copy_u8PatternNum);
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidSendData>
}
    2656:	27 96       	adiw	r28, 0x07	; 7
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u16 Copy_u16Number)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	2e 97       	sbiw	r28, 0x0e	; 14
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	9e 87       	std	Y+14, r25	; 0x0e
    267e:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8Result[10];
	s8 Local_s8LoopCounter=0;
    2680:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8NumOfIterations = 0;
    2682:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16Number == 0)
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	21 f4       	brne	.+8      	; 0x2694 <LCD_voidSendNumber+0x2c>
	{
		LCD_voidSendData('0');
    268c:	80 e3       	ldi	r24, 0x30	; 48
    268e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidSendData>
    2692:	44 c0       	rjmp	.+136    	; 0x271c <LCD_voidSendNumber+0xb4>
	}
	else if(Copy_u16Number > 0)
    2694:	8d 85       	ldd	r24, Y+13	; 0x0d
    2696:	9e 85       	ldd	r25, Y+14	; 0x0e
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	09 f4       	brne	.+2      	; 0x269e <LCD_voidSendNumber+0x36>
    269c:	3f c0       	rjmp	.+126    	; 0x271c <LCD_voidSendNumber+0xb4>
    269e:	22 c0       	rjmp	.+68     	; 0x26e4 <LCD_voidSendNumber+0x7c>
	{
		while(Copy_u16Number != 0)
		{
			Local_u8Result[Local_s8LoopCounter] = Copy_u16Number % 10;
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	e8 2f       	mov	r30, r24
    26a4:	ff 27       	eor	r31, r31
    26a6:	e7 fd       	sbrc	r30, 7
    26a8:	f0 95       	com	r31
    26aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ae:	2a e0       	ldi	r18, 0x0A	; 10
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	b9 01       	movw	r22, r18
    26b4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__udivmodhi4>
    26b8:	28 2f       	mov	r18, r24
    26ba:	ce 01       	movw	r24, r28
    26bc:	03 96       	adiw	r24, 0x03	; 3
    26be:	e8 0f       	add	r30, r24
    26c0:	f9 1f       	adc	r31, r25
    26c2:	20 83       	st	Z, r18
			Copy_u16Number /= 10;
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	2a e0       	ldi	r18, 0x0A	; 10
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	b9 01       	movw	r22, r18
    26ce:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__udivmodhi4>
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 87       	std	Y+14, r25	; 0x0e
    26d6:	8d 87       	std	Y+13, r24	; 0x0d
			Local_s8LoopCounter++;
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	8f 5f       	subi	r24, 0xFF	; 255
    26dc:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8NumOfIterations++;
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	8f 5f       	subi	r24, 0xFF	; 255
    26e2:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_voidSendData('0');
	}
	else if(Copy_u16Number > 0)
	{
		while(Copy_u16Number != 0)
    26e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	d1 f6       	brne	.-76     	; 0x26a0 <LCD_voidSendNumber+0x38>
			Local_u8Result[Local_s8LoopCounter] = Copy_u16Number % 10;
			Copy_u16Number /= 10;
			Local_s8LoopCounter++;
			Local_u8NumOfIterations++;
		}
		for(Local_s8LoopCounter = (Local_u8NumOfIterations-1); Local_s8LoopCounter>=0; Local_s8LoopCounter--)
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	81 50       	subi	r24, 0x01	; 1
    26f0:	8a 83       	std	Y+2, r24	; 0x02
    26f2:	11 c0       	rjmp	.+34     	; 0x2716 <LCD_voidSendNumber+0xae>
		{
			LCD_voidSendData(Local_u8Result[Local_s8LoopCounter] + '0');
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	28 2f       	mov	r18, r24
    26f8:	33 27       	eor	r19, r19
    26fa:	27 fd       	sbrc	r18, 7
    26fc:	30 95       	com	r19
    26fe:	ce 01       	movw	r24, r28
    2700:	03 96       	adiw	r24, 0x03	; 3
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	80 81       	ld	r24, Z
    270a:	80 5d       	subi	r24, 0xD0	; 208
    270c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <LCD_voidSendData>
			Local_u8Result[Local_s8LoopCounter] = Copy_u16Number % 10;
			Copy_u16Number /= 10;
			Local_s8LoopCounter++;
			Local_u8NumOfIterations++;
		}
		for(Local_s8LoopCounter = (Local_u8NumOfIterations-1); Local_s8LoopCounter>=0; Local_s8LoopCounter--)
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	81 50       	subi	r24, 0x01	; 1
    2714:	8a 83       	std	Y+2, r24	; 0x02
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	88 23       	and	r24, r24
    271a:	64 f7       	brge	.-40     	; 0x26f4 <LCD_voidSendNumber+0x8c>
			LCD_voidSendData(Local_u8Result[Local_s8LoopCounter] + '0');
		}
	}


}
    271c:	2e 96       	adiw	r28, 0x0e	; 14
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <LCD_voidClearDisplay>:


void LCD_voidClearDisplay(void)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(CLEAR_COMMAND);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_voidSendCommand>
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <KPD_voidInit>:
//.I/O : VOID ...............     //
//.RETURN : VOID  ..........     //
//.Desc:Initilazing KEYPAD..    //
//.............................//
void KPD_voidInit(void)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL1,OUTPUT);
    274a:	83 e0       	ldi	r24, 0x03	; 3
    274c:	64 e0       	ldi	r22, 0x04	; 4
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL2,OUTPUT);
    2754:	83 e0       	ldi	r24, 0x03	; 3
    2756:	65 e0       	ldi	r22, 0x05	; 5
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL3,OUTPUT);
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	66 e0       	ldi	r22, 0x06	; 6
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL4,OUTPUT);
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	67 e0       	ldi	r22, 0x07	; 7
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R0,INPUT);
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	64 e0       	ldi	r22, 0x04	; 4
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R1,INPUT);
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	65 e0       	ldi	r22, 0x05	; 5
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R2,INPUT);
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	66 e0       	ldi	r22, 0x06	; 6
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R3,INPUT);
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	67 e0       	ldi	r22, 0x07	; 7
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL1,HIGH);
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	64 e0       	ldi	r22, 0x04	; 4
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL2,HIGH);
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	65 e0       	ldi	r22, 0x05	; 5
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL3,HIGH);
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	66 e0       	ldi	r22, 0x06	; 6
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL4,HIGH);
    27b8:	83 e0       	ldi	r24, 0x03	; 3
    27ba:	67 e0       	ldi	r22, 0x07	; 7
    27bc:	41 e0       	ldi	r20, 0x01	; 1
    27be:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PORTC,KEYPAD_R0,HIGH);
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	64 e0       	ldi	r22, 0x04	; 4
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,KEYPAD_R1,HIGH);
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	65 e0       	ldi	r22, 0x05	; 5
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,KEYPAD_R2,HIGH);
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	66 e0       	ldi	r22, 0x06	; 6
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,KEYPAD_R3,HIGH);
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	67 e0       	ldi	r22, 0x07	; 7
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
}
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <KPD_u8GetPressedKey+0x6>
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <KPD_u8GetPressedKey+0x8>
    27f8:	0f 92       	push	r0
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pinvalue;
	u8 Local_PressedKey=255;
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ColsIterator;
	u8 Local_u8RowsIterator;
	u8 Local_u8Flag =0;
    2802:	19 82       	std	Y+1, r1	; 0x01
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
    2804:	1b 82       	std	Y+3, r1	; 0x03
    2806:	67 c0       	rjmp	.+206    	; 0x28d6 <KPD_u8GetPressedKey+0xe6>
{
    //DEACTIVATE CURRENT COL
	DIO_voidSetPinValue(KEYPAD_PORT_COL,Local_Au8Cols_Num[Local_u8ColsIterator],LOW);
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	88 2f       	mov	r24, r24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	fc 01       	movw	r30, r24
    2810:	e0 59       	subi	r30, 0x90	; 144
    2812:	fe 4f       	sbci	r31, 0xFE	; 254
    2814:	90 81       	ld	r25, Z
    2816:	83 e0       	ldi	r24, 0x03	; 3
    2818:	69 2f       	mov	r22, r25
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	for( Local_u8RowsIterator=0;Local_u8RowsIterator<4;Local_u8RowsIterator++ )
    2820:	1a 82       	std	Y+2, r1	; 0x02
    2822:	43 c0       	rjmp	.+134    	; 0x28aa <KPD_u8GetPressedKey+0xba>
	{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	fc 01       	movw	r30, r24
    282c:	ec 58       	subi	r30, 0x8C	; 140
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	90 81       	ld	r25, Z
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	69 2f       	mov	r22, r25
    2836:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DIO_u8GetPinValue>
    283a:	8d 83       	std	Y+5, r24	; 0x05
		if(Local_u8Pinvalue==0)
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	88 23       	and	r24, r24
    2840:	89 f5       	brne	.+98     	; 0x28a4 <KPD_u8GetPressedKey+0xb4>
		{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	fc 01       	movw	r30, r24
    284a:	ec 58       	subi	r30, 0x8C	; 140
    284c:	fe 4f       	sbci	r31, 0xFE	; 254
    284e:	90 81       	ld	r25, Z
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	69 2f       	mov	r22, r25
    2854:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DIO_u8GetPinValue>
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	0c c0       	rjmp	.+24     	; 0x2874 <KPD_u8GetPressedKey+0x84>
		while(Local_u8Pinvalue==0)
		{
			Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	fc 01       	movw	r30, r24
    2864:	ec 58       	subi	r30, 0x8C	; 140
    2866:	fe 4f       	sbci	r31, 0xFE	; 254
    2868:	90 81       	ld	r25, Z
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	69 2f       	mov	r22, r25
    286e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DIO_u8GetPinValue>
    2872:	8d 83       	std	Y+5, r24	; 0x05
	{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
		if(Local_u8Pinvalue==0)
		{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
		while(Local_u8Pinvalue==0)
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	88 23       	and	r24, r24
    2878:	89 f3       	breq	.-30     	; 0x285c <KPD_u8GetPressedKey+0x6c>
		{
			Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
		}
		Local_PressedKey=Local_Au8KeysArr[Local_u8RowsIterator][Local_u8ColsIterator];
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	48 2f       	mov	r20, r24
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	ca 01       	movw	r24, r20
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	82 0f       	add	r24, r18
    2892:	93 1f       	adc	r25, r19
    2894:	fc 01       	movw	r30, r24
    2896:	e8 58       	subi	r30, 0x88	; 136
    2898:	fe 4f       	sbci	r31, 0xFE	; 254
    289a:	80 81       	ld	r24, Z
    289c:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8Flag =1 ;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	07 c0       	rjmp	.+14     	; 0x28b2 <KPD_u8GetPressedKey+0xc2>
	u8 Local_u8Flag =0;
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
{
    //DEACTIVATE CURRENT COL
	DIO_voidSetPinValue(KEYPAD_PORT_COL,Local_Au8Cols_Num[Local_u8ColsIterator],LOW);
	for( Local_u8RowsIterator=0;Local_u8RowsIterator<4;Local_u8RowsIterator++ )
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	8a 83       	std	Y+2, r24	; 0x02
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	84 30       	cpi	r24, 0x04	; 4
    28ae:	08 f4       	brcc	.+2      	; 0x28b2 <KPD_u8GetPressedKey+0xc2>
    28b0:	b9 cf       	rjmp	.-142    	; 0x2824 <KPD_u8GetPressedKey+0x34>
		Local_PressedKey=Local_Au8KeysArr[Local_u8RowsIterator][Local_u8ColsIterator];
		Local_u8Flag =1 ;
		break;
		}
	}
	DIO_voidSetPinValue(KEYPAD_PORT_COL,Local_Au8Cols_Num[Local_u8ColsIterator],HIGH);
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	fc 01       	movw	r30, r24
    28ba:	e0 59       	subi	r30, 0x90	; 144
    28bc:	fe 4f       	sbci	r31, 0xFE	; 254
    28be:	90 81       	ld	r25, Z
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	69 2f       	mov	r22, r25
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	if(Local_u8Flag==1 )
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	39 f0       	breq	.+14     	; 0x28de <KPD_u8GetPressedKey+0xee>
	u8 Local_u8Pinvalue;
	u8 Local_PressedKey=255;
	u8 Local_u8ColsIterator;
	u8 Local_u8RowsIterator;
	u8 Local_u8Flag =0;
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	8b 83       	std	Y+3, r24	; 0x03
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	84 30       	cpi	r24, 0x04	; 4
    28da:	08 f4       	brcc	.+2      	; 0x28de <KPD_u8GetPressedKey+0xee>
    28dc:	95 cf       	rjmp	.-214    	; 0x2808 <KPD_u8GetPressedKey+0x18>
	if(Local_u8Flag==1 )
	{
		break;
	}
}
return Local_PressedKey ;
    28de:	8c 81       	ldd	r24, Y+4	; 0x04
}
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	62 97       	sbiw	r28, 0x12	; 18
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	99 8b       	std	Y+17, r25	; 0x11
    2906:	88 8b       	std	Y+16, r24	; 0x10
    2908:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    290a:	88 89       	ldd	r24, Y+16	; 0x10
    290c:	99 89       	ldd	r25, Y+17	; 0x11
    290e:	89 2f       	mov	r24, r25
    2910:	99 27       	eor	r25, r25
    2912:	80 65       	ori	r24, 0x50	; 80
    2914:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    2916:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    291a:	8f 85       	ldd	r24, Y+15	; 0x0f
    291c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    2920:	88 89       	ldd	r24, Y+16	; 0x10
    2922:	0e 94 c8 07 	call	0xf90	; 0xf90 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    2926:	8a 89       	ldd	r24, Y+18	; 0x12
    2928:	0e 94 c8 07 	call	0xf90	; 0xf90 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    292c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_voidSendStopCondition>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e2       	ldi	r26, 0x20	; 32
    2936:	b1 e4       	ldi	r27, 0x41	; 65
    2938:	8b 87       	std	Y+11, r24	; 0x0b
    293a:	9c 87       	std	Y+12, r25	; 0x0c
    293c:	ad 87       	std	Y+13, r26	; 0x0d
    293e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2940:	6b 85       	ldd	r22, Y+11	; 0x0b
    2942:	7c 85       	ldd	r23, Y+12	; 0x0c
    2944:	8d 85       	ldd	r24, Y+13	; 0x0d
    2946:	9e 85       	ldd	r25, Y+14	; 0x0e
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	4a ef       	ldi	r20, 0xFA	; 250
    294e:	54 e4       	ldi	r21, 0x44	; 68
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	8f 83       	std	Y+7, r24	; 0x07
    295a:	98 87       	std	Y+8, r25	; 0x08
    295c:	a9 87       	std	Y+9, r26	; 0x09
    295e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2960:	6f 81       	ldd	r22, Y+7	; 0x07
    2962:	78 85       	ldd	r23, Y+8	; 0x08
    2964:	89 85       	ldd	r24, Y+9	; 0x09
    2966:	9a 85       	ldd	r25, Y+10	; 0x0a
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2974:	88 23       	and	r24, r24
    2976:	2c f4       	brge	.+10     	; 0x2982 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	3f c0       	rjmp	.+126    	; 0x2a00 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	4f e7       	ldi	r20, 0x7F	; 127
    2990:	57 e4       	ldi	r21, 0x47	; 71
    2992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2996:	18 16       	cp	r1, r24
    2998:	4c f5       	brge	.+82     	; 0x29ec <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299a:	6b 85       	ldd	r22, Y+11	; 0x0b
    299c:	7c 85       	ldd	r23, Y+12	; 0x0c
    299e:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	51 e4       	ldi	r21, 0x41	; 65
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9e 83       	std	Y+6, r25	; 0x06
    29c0:	8d 83       	std	Y+5, r24	; 0x05
    29c2:	0f c0       	rjmp	.+30     	; 0x29e2 <EEPROM_voidSendDataByte+0xf2>
    29c4:	88 ec       	ldi	r24, 0xC8	; 200
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9c 83       	std	Y+4, r25	; 0x04
    29ca:	8b 83       	std	Y+3, r24	; 0x03
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <EEPROM_voidSendDataByte+0xe0>
    29d4:	9c 83       	std	Y+4, r25	; 0x04
    29d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e2:	8d 81       	ldd	r24, Y+5	; 0x05
    29e4:	9e 81       	ldd	r25, Y+6	; 0x06
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	69 f7       	brne	.-38     	; 0x29c4 <EEPROM_voidSendDataByte+0xd4>
    29ea:	14 c0       	rjmp	.+40     	; 0x2a14 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	9a 83       	std	Y+2, r25	; 0x02
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <EEPROM_voidSendDataByte+0x11c>
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    2a14:	62 96       	adiw	r28, 0x12	; 18
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	62 97       	sbiw	r28, 0x12	; 18
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	9a 8b       	std	Y+18, r25	; 0x12
    2a3c:	89 8b       	std	Y+17, r24	; 0x11
	u8 Data ;
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    2a3e:	89 89       	ldd	r24, Y+17	; 0x11
    2a40:	9a 89       	ldd	r25, Y+18	; 0x12
    2a42:	89 2f       	mov	r24, r25
    2a44:	99 27       	eor	r25, r25
    2a46:	80 65       	ori	r24, 0x50	; 80
    2a48:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    2a4a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TWI_ErrorStatusSendStartConditionWithACK>
	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    2a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a50:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>
	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    2a54:	89 89       	ldd	r24, Y+17	; 0x11
    2a56:	0e 94 c8 07 	call	0xf90	; 0xf90 <TWI_ErrorStatusMasterWriteDataByteWithACK>
	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    2a5a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>
	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_add);
    2a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a60:	0e 94 93 07 	call	0xf26	; 0xf26 <TWI_ErrorStatusSendSlaveAddressWithReadACK>
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithNACK(&Data);
    2a64:	ce 01       	movw	r24, r28
    2a66:	40 96       	adiw	r24, 0x10	; 16
    2a68:	0e 94 20 08 	call	0x1040	; 0x1040 <TWI_ErrorStatusMasterReadDataByteWithNACK>
	/*send the stop condition*/
	TWI_voidSendStopCondition();
    2a6c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_voidSendStopCondition>
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e2       	ldi	r26, 0x20	; 32
    2a76:	b1 e4       	ldi	r27, 0x41	; 65
    2a78:	8b 87       	std	Y+11, r24	; 0x0b
    2a7a:	9c 87       	std	Y+12, r25	; 0x0c
    2a7c:	ad 87       	std	Y+13, r26	; 0x0d
    2a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	4a ef       	ldi	r20, 0xFA	; 250
    2a8e:	54 e4       	ldi	r21, 0x44	; 68
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	8f 83       	std	Y+7, r24	; 0x07
    2a9a:	98 87       	std	Y+8, r25	; 0x08
    2a9c:	a9 87       	std	Y+9, r26	; 0x09
    2a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa2:	78 85       	ldd	r23, Y+8	; 0x08
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	2c f4       	brge	.+10     	; 0x2ac2 <EEPROM_u8ReadDataByte+0x9c>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e 83       	std	Y+6, r25	; 0x06
    2abe:	8d 83       	std	Y+5, r24	; 0x05
    2ac0:	3f c0       	rjmp	.+126    	; 0x2b40 <EEPROM_u8ReadDataByte+0x11a>
	else if (__tmp > 65535)
    2ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac4:	78 85       	ldd	r23, Y+8	; 0x08
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	3f ef       	ldi	r19, 0xFF	; 255
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	57 e4       	ldi	r21, 0x47	; 71
    2ad2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	4c f5       	brge	.+82     	; 0x2b2c <EEPROM_u8ReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    2adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	9e 83       	std	Y+6, r25	; 0x06
    2b00:	8d 83       	std	Y+5, r24	; 0x05
    2b02:	0f c0       	rjmp	.+30     	; 0x2b22 <EEPROM_u8ReadDataByte+0xfc>
    2b04:	88 ec       	ldi	r24, 0xC8	; 200
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 83       	std	Y+4, r25	; 0x04
    2b0a:	8b 83       	std	Y+3, r24	; 0x03
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <EEPROM_u8ReadDataByte+0xea>
    2b14:	9c 83       	std	Y+4, r25	; 0x04
    2b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	69 f7       	brne	.-38     	; 0x2b04 <EEPROM_u8ReadDataByte+0xde>
    2b2a:	14 c0       	rjmp	.+40     	; 0x2b54 <EEPROM_u8ReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <EEPROM_u8ReadDataByte+0x126>
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	89 83       	std	Y+1, r24	; 0x01
	/*Delay until the write cycle is finished*/
	_delay_ms(10);
	//return data
	return Data ;
    2b54:	88 89       	ldd	r24, Y+16	; 0x10
}
    2b56:	62 96       	adiw	r28, 0x12	; 18
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <EEPROM_voidSendWord>:

void EEPROM_voidSendWord(u16 Copy_u16LocationAddress , u16 Copy_u16DataByte )
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <EEPROM_voidSendWord+0x6>
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <EEPROM_voidSendWord+0x8>
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	7c 83       	std	Y+4, r23	; 0x04
    2b7a:	6b 83       	std	Y+3, r22	; 0x03
	EEPROM_voidSendDataByte(Copy_u16LocationAddress ,  (u8)Copy_u16DataByte  );
    2b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	62 2f       	mov	r22, r18
    2b84:	0e 94 78 14 	call	0x28f0	; 0x28f0 <EEPROM_voidSendDataByte>
	EEPROM_voidSendDataByte(Copy_u16LocationAddress+1 ,  (Copy_u16DataByte>>8)  );
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	9c 01       	movw	r18, r24
    2b8e:	2f 5f       	subi	r18, 0xFF	; 255
    2b90:	3f 4f       	sbci	r19, 0xFF	; 255
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	89 2f       	mov	r24, r25
    2b98:	99 27       	eor	r25, r25
    2b9a:	48 2f       	mov	r20, r24
    2b9c:	c9 01       	movw	r24, r18
    2b9e:	64 2f       	mov	r22, r20
    2ba0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <EEPROM_voidSendDataByte>
}
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <EEPROM_u16ReadWord>:
u16 EEPROM_u16ReadWord(u16 Copy_u16LocationAddress )
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <EEPROM_u16ReadWord+0x6>
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <EEPROM_u16ReadWord+0x8>
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <EEPROM_u16ReadWord+0xa>
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
	u8 DATA_LOW ;
	u8 DATA_HIGH ;
	u16 DATA ;
	DATA_LOW= 	EEPROM_u8ReadDataByte(Copy_u16LocationAddress );
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <EEPROM_u8ReadDataByte>
    2bcc:	8c 83       	std	Y+4, r24	; 0x04
	DATA_HIGH = EEPROM_u8ReadDataByte(Copy_u16LocationAddress+1);
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	01 96       	adiw	r24, 0x01	; 1
    2bd4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <EEPROM_u8ReadDataByte>
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
	DATA = DATA_LOW +(DATA_HIGH<<8) ;
    2bda:	8c 81       	ldd	r24, Y+4	; 0x04
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	88 2f       	mov	r24, r24
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	98 2f       	mov	r25, r24
    2be8:	88 27       	eor	r24, r24
    2bea:	82 0f       	add	r24, r18
    2bec:	93 1f       	adc	r25, r19
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
	return DATA ;
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2bf6:	26 96       	adiw	r28, 0x06	; 6
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <Appinit>:
#include <util/delay.h>
u8 Local_u8Flag ;
u8 stats = 0;
void Reset(void) ;
void Appinit(void)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
	GIE_voidEnableGlobalInterrupt();
    2c10:	0e 94 88 0a 	call	0x1510	; 0x1510 <GIE_voidEnableGlobalInterrupt>
	EXTI_VoidInit();
    2c14:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EXTI_VoidInit>
	EXTI_VoidEnable(0,FALLING_EDGE);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <EXTI_VoidEnable>
	EXTI_SetCallBack_INT0(&Reset);
    2c20:	80 e4       	ldi	r24, 0x40	; 64
    2c22:	96 e1       	ldi	r25, 0x16	; 22
    2c24:	0e 94 0b 0c 	call	0x1816	; 0x1816 <EXTI_SetCallBack_INT0>
	DIO_voidSetPinDirection(PORTA,PIN3,OUTPUT);
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	63 e0       	ldi	r22, 0x03	; 3
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	M_UART_voidInit();
    2c32:	0e 94 db 05 	call	0xbb6	; 0xbb6 <M_UART_voidInit>
	ADC_voidInit();
    2c36:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <ADC_voidInit>
	DIO_voidSetPinDirection(PORTD,PIN0,INPUT);
    2c3a:	83 e0       	ldi	r24, 0x03	; 3
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN1,OUTPUT);
    2c44:	83 e0       	ldi	r24, 0x03	; 3
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	41 e0       	ldi	r20, 0x01	; 1
    2c4a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN0,INPUT);
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	/*keypad initialization*/
	KPD_voidInit();
    2c58:	0e 94 a1 13 	call	0x2742	; 0x2742 <KPD_voidInit>
	DIO_voidSetPinDirection(PORTD,PIN5,OUTPUT);
    2c5c:	83 e0       	ldi	r24, 0x03	; 3
    2c5e:	65 e0       	ldi	r22, 0x05	; 5
    2c60:	41 e0       	ldi	r20, 0x01	; 1
    2c62:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD,PIN5,HIGH);
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	65 e0       	ldi	r22, 0x05	; 5
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
	/*two wired initialization*/
	TWI_voidInitMaster(0);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	0e 94 c0 06 	call	0xd80	; 0xd80 <TWI_voidInitMaster>
	/*Lcd initialization*/
	LCD_voidInit();
    2c76:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_voidInit>
}
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <Reset>:
void Reset(void)
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
	Local_u8Flag = 0 ;
    2c88:	10 92 99 01 	sts	0x0199, r1
	EEPROM_voidSendDataByte(2,0);
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	0e 94 78 14 	call	0x28f0	; 0x28f0 <EEPROM_voidSendDataByte>
	DIO_voidSetPinValue(PORTA,PIN3,LOW);
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	63 e0       	ldi	r22, 0x03	; 3
    2c9a:	40 e0       	ldi	r20, 0x00	; 0
    2c9c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
}
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <main>:
int main(void)
{
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	c2 50       	subi	r28, 0x02	; 2
    2cb4:	d1 40       	sbci	r29, 0x01	; 1
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61


	Appinit();
    2cc0:	0e 94 04 16 	call	0x2c08	; 0x2c08 <Appinit>
	for(u8 i = 0 ;  i <= 10 ; i+=5 )
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e3 51       	subi	r30, 0x13	; 19
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	10 82       	st	Z, r1
    2ccc:	19 c0       	rjmp	.+50     	; 0x2d00 <main+0x5a>
	{
		EEPROM_voidSendWord(i , i);
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e3 51       	subi	r30, 0x13	; 19
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	48 2f       	mov	r20, r24
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e3 51       	subi	r30, 0x13	; 19
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	ca 01       	movw	r24, r20
    2ce8:	b9 01       	movw	r22, r18
    2cea:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <EEPROM_voidSendWord>
int main(void)
{


	Appinit();
	for(u8 i = 0 ;  i <= 10 ; i+=5 )
    2cee:	de 01       	movw	r26, r28
    2cf0:	a3 51       	subi	r26, 0x13	; 19
    2cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e3 51       	subi	r30, 0x13	; 19
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8b 5f       	subi	r24, 0xFB	; 251
    2cfe:	8c 93       	st	X, r24
    2d00:	fe 01       	movw	r30, r28
    2d02:	e3 51       	subi	r30, 0x13	; 19
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	8b 30       	cpi	r24, 0x0B	; 11
    2d0a:	08 f3       	brcs	.-62     	; 0x2cce <main+0x28>
	{
		EEPROM_voidSendWord(i , i);
	}
	u8 keypressed = 255 ;
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e8 50       	subi	r30, 0x08	; 8
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	80 83       	st	Z, r24
	u16 data ;
	data = EEPROM_u16ReadWord(0);
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <EEPROM_u16ReadWord>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	ea 50       	subi	r30, 0x0A	; 10
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
	u8 Local_u8ReadFlag = EEPROM_u8ReadDataByte(2);
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <EEPROM_u8ReadDataByte>
    2d30:	fe 01       	movw	r30, r28
    2d32:	eb 50       	subi	r30, 0x0B	; 11
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 83       	st	Z, r24
	u8 Local_u8Iterator =0 ;
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ec 50       	subi	r30, 0x0C	; 12
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	10 82       	st	Z, r1
	u16 password ;
	u16 reading = ADC_u16GetAnalogReadSYNC(0);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <ADC_u16GetAnalogReadSYNC>
    2d46:	fe 01       	movw	r30, r28
    2d48:	e0 51       	subi	r30, 0x10	; 16
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
	reading =	(reading*5000UL)/1024;
    2d50:	fe 01       	movw	r30, r28
    2d52:	e0 51       	subi	r30, 0x10	; 16
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	cc 01       	movw	r24, r24
    2d5c:	a0 e0       	ldi	r26, 0x00	; 0
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	28 e8       	ldi	r18, 0x88	; 136
    2d62:	33 e1       	ldi	r19, 0x13	; 19
    2d64:	40 e0       	ldi	r20, 0x00	; 0
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	bc 01       	movw	r22, r24
    2d6a:	cd 01       	movw	r24, r26
    2d6c:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulsi3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	07 2e       	mov	r0, r23
    2d76:	7a e0       	ldi	r23, 0x0A	; 10
    2d78:	b6 95       	lsr	r27
    2d7a:	a7 95       	ror	r26
    2d7c:	97 95       	ror	r25
    2d7e:	87 95       	ror	r24
    2d80:	7a 95       	dec	r23
    2d82:	d1 f7       	brne	.-12     	; 0x2d78 <main+0xd2>
    2d84:	70 2d       	mov	r23, r0
    2d86:	fe 01       	movw	r30, r28
    2d88:	e0 51       	subi	r30, 0x10	; 16
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
	u16 temp = reading/10;
    2d90:	8e 01       	movw	r16, r28
    2d92:	02 51       	subi	r16, 0x12	; 18
    2d94:	1f 4f       	sbci	r17, 0xFF	; 255
    2d96:	fe 01       	movw	r30, r28
    2d98:	e0 51       	subi	r30, 0x10	; 16
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	2a e0       	ldi	r18, 0x0A	; 10
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	b9 01       	movw	r22, r18
    2da6:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__udivmodhi4>
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
	Local_u8Flag = Local_u8ReadFlag;
    2db2:	fe 01       	movw	r30, r28
    2db4:	eb 50       	subi	r30, 0x0B	; 11
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	80 93 99 01 	sts	0x0199, r24
	while(1)
	{
		if(Local_u8Flag == 3   )
    2dbe:	80 91 99 01 	lds	r24, 0x0199
    2dc2:	83 30       	cpi	r24, 0x03	; 3
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <main+0x122>
    2dc6:	cf c0       	rjmp	.+414    	; 0x2f66 <main+0x2c0>
		{
			LCD_voidClearDisplay();
    2dc8:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
			LCD_voidSendString("No More Tries ");
    2dcc:	80 e6       	ldi	r24, 0x60	; 96
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e3 52       	subi	r30, 0x23	; 35
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	aa ef       	ldi	r26, 0xFA	; 250
    2de0:	b3 e4       	ldi	r27, 0x43	; 67
    2de2:	80 83       	st	Z, r24
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	a2 83       	std	Z+2, r26	; 0x02
    2de8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dea:	8e 01       	movw	r16, r28
    2dec:	07 52       	subi	r16, 0x27	; 39
    2dee:	1f 4f       	sbci	r17, 0xFF	; 255
    2df0:	fe 01       	movw	r30, r28
    2df2:	e3 52       	subi	r30, 0x23	; 35
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	4a ef       	ldi	r20, 0xFA	; 250
    2e04:	54 e4       	ldi	r21, 0x44	; 68
    2e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	f8 01       	movw	r30, r16
    2e10:	80 83       	st	Z, r24
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	a2 83       	std	Z+2, r26	; 0x02
    2e16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e7 52       	subi	r30, 0x27	; 39
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	44 f4       	brge	.+16     	; 0x2e46 <main+0x1a0>
		__ticks = 1;
    2e36:	fe 01       	movw	r30, r28
    2e38:	e9 52       	subi	r30, 0x29	; 41
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	80 83       	st	Z, r24
    2e44:	64 c0       	rjmp	.+200    	; 0x2f0e <main+0x268>
	else if (__tmp > 65535)
    2e46:	fe 01       	movw	r30, r28
    2e48:	e7 52       	subi	r30, 0x27	; 39
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	60 81       	ld	r22, Z
    2e4e:	71 81       	ldd	r23, Z+1	; 0x01
    2e50:	82 81       	ldd	r24, Z+2	; 0x02
    2e52:	93 81       	ldd	r25, Z+3	; 0x03
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	3f ef       	ldi	r19, 0xFF	; 255
    2e58:	4f e7       	ldi	r20, 0x7F	; 127
    2e5a:	57 e4       	ldi	r21, 0x47	; 71
    2e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e60:	18 16       	cp	r1, r24
    2e62:	0c f0       	brlt	.+2      	; 0x2e66 <main+0x1c0>
    2e64:	43 c0       	rjmp	.+134    	; 0x2eec <main+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e66:	fe 01       	movw	r30, r28
    2e68:	e3 52       	subi	r30, 0x23	; 35
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	8e 01       	movw	r16, r28
    2e86:	09 52       	subi	r16, 0x29	; 41
    2e88:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
    2e9c:	1f c0       	rjmp	.+62     	; 0x2edc <main+0x236>
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	eb 52       	subi	r30, 0x2B	; 43
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
    2eac:	fe 01       	movw	r30, r28
    2eae:	eb 52       	subi	r30, 0x2B	; 43
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	f1 f7       	brne	.-4      	; 0x2eb6 <main+0x210>
    2eba:	fe 01       	movw	r30, r28
    2ebc:	eb 52       	subi	r30, 0x2B	; 43
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	de 01       	movw	r26, r28
    2ec6:	a9 52       	subi	r26, 0x29	; 41
    2ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e9 52       	subi	r30, 0x29	; 41
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	11 96       	adiw	r26, 0x01	; 1
    2ed8:	9c 93       	st	X, r25
    2eda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2edc:	fe 01       	movw	r30, r28
    2ede:	e9 52       	subi	r30, 0x29	; 41
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	d1 f6       	brne	.-76     	; 0x2e9e <main+0x1f8>
    2eea:	27 c0       	rjmp	.+78     	; 0x2f3a <main+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eec:	8e 01       	movw	r16, r28
    2eee:	09 52       	subi	r16, 0x29	; 41
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e7 52       	subi	r30, 0x27	; 39
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	60 81       	ld	r22, Z
    2efa:	71 81       	ldd	r23, Z+1	; 0x01
    2efc:	82 81       	ldd	r24, Z+2	; 0x02
    2efe:	93 81       	ldd	r25, Z+3	; 0x03
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	f8 01       	movw	r30, r16
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	80 83       	st	Z, r24
    2f0e:	de 01       	movw	r26, r28
    2f10:	ad 52       	subi	r26, 0x2D	; 45
    2f12:	bf 4f       	sbci	r27, 0xFF	; 255
    2f14:	fe 01       	movw	r30, r28
    2f16:	e9 52       	subi	r30, 0x29	; 41
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	8d 93       	st	X+, r24
    2f20:	9c 93       	st	X, r25
    2f22:	fe 01       	movw	r30, r28
    2f24:	ed 52       	subi	r30, 0x2D	; 45
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <main+0x286>
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 52       	subi	r30, 0x2D	; 45
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_voidClearDisplay();
    2f3a:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
			LCD_voidSendString("Your Blocked ");
    2f3e:	8f e6       	ldi	r24, 0x6F	; 111
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
			EEPROM_voidSendDataByte(2,Local_u8Flag);
    2f46:	20 91 99 01 	lds	r18, 0x0199
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	62 2f       	mov	r22, r18
    2f50:	0e 94 78 14 	call	0x28f0	; 0x28f0 <EEPROM_voidSendDataByte>
			DIO_voidSetPinValue(PORTA,PIN3,HIGH);
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	63 e0       	ldi	r22, 0x03	; 3
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DIO_voidSetPinValue>
			while(Local_u8Flag ==3 );
    2f5e:	80 91 99 01 	lds	r24, 0x0199
    2f62:	83 30       	cpi	r24, 0x03	; 3
    2f64:	e1 f3       	breq	.-8      	; 0x2f5e <main+0x2b8>
		}
		keypressed =255 ;
    2f66:	fe 01       	movw	r30, r28
    2f68:	e8 50       	subi	r30, 0x08	; 8
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	8f ef       	ldi	r24, 0xFF	; 255
    2f6e:	80 83       	st	Z, r24
		Local_u8Iterator = 0 ;
    2f70:	fe 01       	movw	r30, r28
    2f72:	ec 50       	subi	r30, 0x0C	; 12
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	10 82       	st	Z, r1
		if(data == 0xffff&&stats==0)
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ea 50       	subi	r30, 0x0A	; 10
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	ff ef       	ldi	r31, 0xFF	; 255
    2f84:	8f 3f       	cpi	r24, 0xFF	; 255
    2f86:	9f 07       	cpc	r25, r31
    2f88:	09 f0       	breq	.+2      	; 0x2f8c <main+0x2e6>
    2f8a:	e0 c1       	rjmp	.+960    	; 0x334c <main+0x6a6>
    2f8c:	80 91 98 01 	lds	r24, 0x0198
    2f90:	88 23       	and	r24, r24
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <main+0x2f0>
    2f94:	db c1       	rjmp	.+950    	; 0x334c <main+0x6a6>
		{
			LCD_voidSendString("First time entry ");
    2f96:	8d e7       	ldi	r24, 0x7D	; 125
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e1 53       	subi	r30, 0x31	; 49
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	aa ef       	ldi	r26, 0xFA	; 250
    2faa:	b3 e4       	ldi	r27, 0x43	; 67
    2fac:	80 83       	st	Z, r24
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	a2 83       	std	Z+2, r26	; 0x02
    2fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	05 53       	subi	r16, 0x35	; 53
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e1 53       	subi	r30, 0x31	; 49
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a ef       	ldi	r20, 0xFA	; 250
    2fce:	54 e4       	ldi	r21, 0x44	; 68
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	f8 01       	movw	r30, r16
    2fda:	80 83       	st	Z, r24
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	a2 83       	std	Z+2, r26	; 0x02
    2fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e5 53       	subi	r30, 0x35	; 53
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	44 f4       	brge	.+16     	; 0x3010 <main+0x36a>
		__ticks = 1;
    3000:	fe 01       	movw	r30, r28
    3002:	e7 53       	subi	r30, 0x37	; 55
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    300e:	64 c0       	rjmp	.+200    	; 0x30d8 <main+0x432>
	else if (__tmp > 65535)
    3010:	fe 01       	movw	r30, r28
    3012:	e5 53       	subi	r30, 0x35	; 53
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	3f ef       	ldi	r19, 0xFF	; 255
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	57 e4       	ldi	r21, 0x47	; 71
    3026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	0c f0       	brlt	.+2      	; 0x3030 <main+0x38a>
    302e:	43 c0       	rjmp	.+134    	; 0x30b6 <main+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	fe 01       	movw	r30, r28
    3032:	e1 53       	subi	r30, 0x31	; 49
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e2       	ldi	r20, 0x20	; 32
    3044:	51 e4       	ldi	r21, 0x41	; 65
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8e 01       	movw	r16, r28
    3050:	07 53       	subi	r16, 0x37	; 55
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
    3066:	1f c0       	rjmp	.+62     	; 0x30a6 <main+0x400>
    3068:	fe 01       	movw	r30, r28
    306a:	e9 53       	subi	r30, 0x39	; 57
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	88 ec       	ldi	r24, 0xC8	; 200
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
    3076:	fe 01       	movw	r30, r28
    3078:	e9 53       	subi	r30, 0x39	; 57
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 81       	ld	r24, Z
    307e:	91 81       	ldd	r25, Z+1	; 0x01
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <main+0x3da>
    3084:	fe 01       	movw	r30, r28
    3086:	e9 53       	subi	r30, 0x39	; 57
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	de 01       	movw	r26, r28
    3090:	a7 53       	subi	r26, 0x37	; 55
    3092:	bf 4f       	sbci	r27, 0xFF	; 255
    3094:	fe 01       	movw	r30, r28
    3096:	e7 53       	subi	r30, 0x37	; 55
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	9c 93       	st	X, r25
    30a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a6:	fe 01       	movw	r30, r28
    30a8:	e7 53       	subi	r30, 0x37	; 55
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	d1 f6       	brne	.-76     	; 0x3068 <main+0x3c2>
    30b4:	27 c0       	rjmp	.+78     	; 0x3104 <main+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b6:	8e 01       	movw	r16, r28
    30b8:	07 53       	subi	r16, 0x37	; 55
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	fe 01       	movw	r30, r28
    30be:	e5 53       	subi	r30, 0x35	; 53
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	f8 01       	movw	r30, r16
    30d4:	91 83       	std	Z+1, r25	; 0x01
    30d6:	80 83       	st	Z, r24
    30d8:	de 01       	movw	r26, r28
    30da:	ab 53       	subi	r26, 0x3B	; 59
    30dc:	bf 4f       	sbci	r27, 0xFF	; 255
    30de:	fe 01       	movw	r30, r28
    30e0:	e7 53       	subi	r30, 0x37	; 55
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	8d 93       	st	X+, r24
    30ea:	9c 93       	st	X, r25
    30ec:	fe 01       	movw	r30, r28
    30ee:	eb 53       	subi	r30, 0x3B	; 59
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <main+0x450>
    30fa:	fe 01       	movw	r30, r28
    30fc:	eb 53       	subi	r30, 0x3B	; 59
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_voidClearDisplay();
    3104:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
			LCD_voidSendString("enter password");
    3108:	8f e8       	ldi	r24, 0x8F	; 143
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    3110:	fe c0       	rjmp	.+508    	; 0x330e <main+0x668>

			while(Local_u8Iterator!=4)
			{
				do
				{
					keypressed = KPD_u8GetPressedKey();
    3112:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    3116:	fe 01       	movw	r30, r28
    3118:	e8 50       	subi	r30, 0x08	; 8
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 83       	st	Z, r24
				}while(keypressed==255);
    311e:	fe 01       	movw	r30, r28
    3120:	e8 50       	subi	r30, 0x08	; 8
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	8f 3f       	cpi	r24, 0xFF	; 255
    3128:	a1 f3       	breq	.-24     	; 0x3112 <main+0x46c>
				password=(password*10)+keypressed;
    312a:	fe 01       	movw	r30, r28
    312c:	ee 50       	subi	r30, 0x0E	; 14
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	9c 01       	movw	r18, r24
    3136:	22 0f       	add	r18, r18
    3138:	33 1f       	adc	r19, r19
    313a:	c9 01       	movw	r24, r18
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	28 0f       	add	r18, r24
    3146:	39 1f       	adc	r19, r25
    3148:	fe 01       	movw	r30, r28
    314a:	e8 50       	subi	r30, 0x08	; 8
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	88 2f       	mov	r24, r24
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	fe 01       	movw	r30, r28
    3156:	ee 50       	subi	r30, 0x0E	; 14
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	82 0f       	add	r24, r18
    315c:	93 1f       	adc	r25, r19
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
				LCD_voidGoToXY(1,Local_u8Iterator);
    3162:	fe 01       	movw	r30, r28
    3164:	ec 50       	subi	r30, 0x0C	; 12
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	60 81       	ld	r22, Z
    316c:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
				LCD_voidSendNumber(keypressed);
    3170:	fe 01       	movw	r30, r28
    3172:	e8 50       	subi	r30, 0x08	; 8
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	80 81       	ld	r24, Z
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_voidSendNumber>
    3180:	fe 01       	movw	r30, r28
    3182:	ef 53       	subi	r30, 0x3F	; 63
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 ea       	ldi	r26, 0xA0	; 160
    318c:	b0 e4       	ldi	r27, 0x40	; 64
    318e:	80 83       	st	Z, r24
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	a2 83       	std	Z+2, r26	; 0x02
    3194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3196:	8e 01       	movw	r16, r28
    3198:	03 54       	subi	r16, 0x43	; 67
    319a:	1f 4f       	sbci	r17, 0xFF	; 255
    319c:	fe 01       	movw	r30, r28
    319e:	ef 53       	subi	r30, 0x3F	; 63
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	60 81       	ld	r22, Z
    31a4:	71 81       	ldd	r23, Z+1	; 0x01
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	93 81       	ldd	r25, Z+3	; 0x03
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	f8 01       	movw	r30, r16
    31bc:	80 83       	st	Z, r24
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	a2 83       	std	Z+2, r26	; 0x02
    31c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31c4:	fe 01       	movw	r30, r28
    31c6:	e3 54       	subi	r30, 0x43	; 67
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	60 81       	ld	r22, Z
    31cc:	71 81       	ldd	r23, Z+1	; 0x01
    31ce:	82 81       	ldd	r24, Z+2	; 0x02
    31d0:	93 81       	ldd	r25, Z+3	; 0x03
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	5f e3       	ldi	r21, 0x3F	; 63
    31da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31de:	88 23       	and	r24, r24
    31e0:	44 f4       	brge	.+16     	; 0x31f2 <main+0x54c>
		__ticks = 1;
    31e2:	fe 01       	movw	r30, r28
    31e4:	e5 54       	subi	r30, 0x45	; 69
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	64 c0       	rjmp	.+200    	; 0x32ba <main+0x614>
	else if (__tmp > 65535)
    31f2:	fe 01       	movw	r30, r28
    31f4:	e3 54       	subi	r30, 0x43	; 67
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	60 81       	ld	r22, Z
    31fa:	71 81       	ldd	r23, Z+1	; 0x01
    31fc:	82 81       	ldd	r24, Z+2	; 0x02
    31fe:	93 81       	ldd	r25, Z+3	; 0x03
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	0c f0       	brlt	.+2      	; 0x3212 <main+0x56c>
    3210:	43 c0       	rjmp	.+134    	; 0x3298 <main+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3212:	fe 01       	movw	r30, r28
    3214:	ef 53       	subi	r30, 0x3F	; 63
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e2       	ldi	r20, 0x20	; 32
    3226:	51 e4       	ldi	r21, 0x41	; 65
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8e 01       	movw	r16, r28
    3232:	05 54       	subi	r16, 0x45	; 69
    3234:	1f 4f       	sbci	r17, 0xFF	; 255
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	f8 01       	movw	r30, r16
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	80 83       	st	Z, r24
    3248:	1f c0       	rjmp	.+62     	; 0x3288 <main+0x5e2>
    324a:	fe 01       	movw	r30, r28
    324c:	e7 54       	subi	r30, 0x47	; 71
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	91 83       	std	Z+1, r25	; 0x01
    3256:	80 83       	st	Z, r24
    3258:	fe 01       	movw	r30, r28
    325a:	e7 54       	subi	r30, 0x47	; 71
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 81       	ld	r24, Z
    3260:	91 81       	ldd	r25, Z+1	; 0x01
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <main+0x5bc>
    3266:	fe 01       	movw	r30, r28
    3268:	e7 54       	subi	r30, 0x47	; 71
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3270:	de 01       	movw	r26, r28
    3272:	a5 54       	subi	r26, 0x45	; 69
    3274:	bf 4f       	sbci	r27, 0xFF	; 255
    3276:	fe 01       	movw	r30, r28
    3278:	e5 54       	subi	r30, 0x45	; 69
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	11 96       	adiw	r26, 0x01	; 1
    3284:	9c 93       	st	X, r25
    3286:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3288:	fe 01       	movw	r30, r28
    328a:	e5 54       	subi	r30, 0x45	; 69
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	d1 f6       	brne	.-76     	; 0x324a <main+0x5a4>
    3296:	27 c0       	rjmp	.+78     	; 0x32e6 <main+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3298:	8e 01       	movw	r16, r28
    329a:	05 54       	subi	r16, 0x45	; 69
    329c:	1f 4f       	sbci	r17, 0xFF	; 255
    329e:	fe 01       	movw	r30, r28
    32a0:	e3 54       	subi	r30, 0x43	; 67
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	f8 01       	movw	r30, r16
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
    32ba:	de 01       	movw	r26, r28
    32bc:	a9 54       	subi	r26, 0x49	; 73
    32be:	bf 4f       	sbci	r27, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	e5 54       	subi	r30, 0x45	; 69
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	8d 93       	st	X+, r24
    32cc:	9c 93       	st	X, r25
    32ce:	fe 01       	movw	r30, r28
    32d0:	e9 54       	subi	r30, 0x49	; 73
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <main+0x632>
    32dc:	fe 01       	movw	r30, r28
    32de:	e9 54       	subi	r30, 0x49	; 73
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	80 83       	st	Z, r24
				_delay_ms(5);
				LCD_voidGoToXY(1,Local_u8Iterator);
    32e6:	fe 01       	movw	r30, r28
    32e8:	ec 50       	subi	r30, 0x0C	; 12
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	60 81       	ld	r22, Z
    32f0:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
				LCD_voidSendString("*");
    32f4:	8e e9       	ldi	r24, 0x9E	; 158
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
				Local_u8Iterator++;
    32fc:	de 01       	movw	r26, r28
    32fe:	ac 50       	subi	r26, 0x0C	; 12
    3300:	bf 4f       	sbci	r27, 0xFF	; 255
    3302:	fe 01       	movw	r30, r28
    3304:	ec 50       	subi	r30, 0x0C	; 12
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	80 81       	ld	r24, Z
    330a:	8f 5f       	subi	r24, 0xFF	; 255
    330c:	8c 93       	st	X, r24
			LCD_voidSendString("First time entry ");
			_delay_ms(500);
			LCD_voidClearDisplay();
			LCD_voidSendString("enter password");

			while(Local_u8Iterator!=4)
    330e:	fe 01       	movw	r30, r28
    3310:	ec 50       	subi	r30, 0x0C	; 12
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	80 81       	ld	r24, Z
    3316:	84 30       	cpi	r24, 0x04	; 4
    3318:	09 f0       	breq	.+2      	; 0x331c <main+0x676>
    331a:	fb ce       	rjmp	.-522    	; 0x3112 <main+0x46c>
				_delay_ms(5);
				LCD_voidGoToXY(1,Local_u8Iterator);
				LCD_voidSendString("*");
				Local_u8Iterator++;
			}
			data = password;
    331c:	de 01       	movw	r26, r28
    331e:	aa 50       	subi	r26, 0x0A	; 10
    3320:	bf 4f       	sbci	r27, 0xFF	; 255
    3322:	fe 01       	movw	r30, r28
    3324:	ee 50       	subi	r30, 0x0E	; 14
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	8d 93       	st	X+, r24
    332e:	9c 93       	st	X, r25
			EEPROM_voidSendWord(0,data);
    3330:	fe 01       	movw	r30, r28
    3332:	ea 50       	subi	r30, 0x0A	; 10
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	20 81       	ld	r18, Z
    3338:	31 81       	ldd	r19, Z+1	; 0x01
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	b9 01       	movw	r22, r18
    3340:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <EEPROM_voidSendWord>
			stats =1;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	80 93 98 01 	sts	0x0198, r24
    334a:	9d c2       	rjmp	.+1338   	; 0x3886 <main+0xbe0>
		}
		else if(data != 0xffff && stats==0)
    334c:	fe 01       	movw	r30, r28
    334e:	ea 50       	subi	r30, 0x0A	; 10
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	ff ef       	ldi	r31, 0xFF	; 255
    3358:	8f 3f       	cpi	r24, 0xFF	; 255
    335a:	9f 07       	cpc	r25, r31
    335c:	09 f4       	brne	.+2      	; 0x3360 <main+0x6ba>
    335e:	93 c2       	rjmp	.+1318   	; 0x3886 <main+0xbe0>
    3360:	80 91 98 01 	lds	r24, 0x0198
    3364:	88 23       	and	r24, r24
    3366:	09 f0       	breq	.+2      	; 0x336a <main+0x6c4>
    3368:	8e c2       	rjmp	.+1308   	; 0x3886 <main+0xbe0>
		{
			password = 0 ;
    336a:	fe 01       	movw	r30, r28
    336c:	ee 50       	subi	r30, 0x0E	; 14
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	11 82       	std	Z+1, r1	; 0x01
    3372:	10 82       	st	Z, r1
			LCD_voidClearDisplay();
    3374:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
			LCD_voidSendString("Welcome again  ");
    3378:	80 ea       	ldi	r24, 0xA0	; 160
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    3380:	fe 01       	movw	r30, r28
    3382:	ed 54       	subi	r30, 0x4D	; 77
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	aa ef       	ldi	r26, 0xFA	; 250
    338c:	b3 e4       	ldi	r27, 0x43	; 67
    338e:	80 83       	st	Z, r24
    3390:	91 83       	std	Z+1, r25	; 0x01
    3392:	a2 83       	std	Z+2, r26	; 0x02
    3394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	8e 01       	movw	r16, r28
    3398:	01 55       	subi	r16, 0x51	; 81
    339a:	1f 4f       	sbci	r17, 0xFF	; 255
    339c:	fe 01       	movw	r30, r28
    339e:	ed 54       	subi	r30, 0x4D	; 77
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	4a ef       	ldi	r20, 0xFA	; 250
    33b0:	54 e4       	ldi	r21, 0x44	; 68
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	f8 01       	movw	r30, r16
    33bc:	80 83       	st	Z, r24
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	a2 83       	std	Z+2, r26	; 0x02
    33c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c4:	fe 01       	movw	r30, r28
    33c6:	e1 55       	subi	r30, 0x51	; 81
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e8       	ldi	r20, 0x80	; 128
    33d8:	5f e3       	ldi	r21, 0x3F	; 63
    33da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33de:	88 23       	and	r24, r24
    33e0:	44 f4       	brge	.+16     	; 0x33f2 <main+0x74c>
		__ticks = 1;
    33e2:	fe 01       	movw	r30, r28
    33e4:	e3 55       	subi	r30, 0x53	; 83
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	80 83       	st	Z, r24
    33f0:	64 c0       	rjmp	.+200    	; 0x34ba <main+0x814>
	else if (__tmp > 65535)
    33f2:	fe 01       	movw	r30, r28
    33f4:	e1 55       	subi	r30, 0x51	; 81
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340c:	18 16       	cp	r1, r24
    340e:	0c f0       	brlt	.+2      	; 0x3412 <main+0x76c>
    3410:	43 c0       	rjmp	.+134    	; 0x3498 <main+0x7f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3412:	fe 01       	movw	r30, r28
    3414:	ed 54       	subi	r30, 0x4D	; 77
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e2       	ldi	r20, 0x20	; 32
    3426:	51 e4       	ldi	r21, 0x41	; 65
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	8e 01       	movw	r16, r28
    3432:	03 55       	subi	r16, 0x53	; 83
    3434:	1f 4f       	sbci	r17, 0xFF	; 255
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	f8 01       	movw	r30, r16
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
    3448:	1f c0       	rjmp	.+62     	; 0x3488 <main+0x7e2>
    344a:	fe 01       	movw	r30, r28
    344c:	e5 55       	subi	r30, 0x55	; 85
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	88 ec       	ldi	r24, 0xC8	; 200
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
    3458:	fe 01       	movw	r30, r28
    345a:	e5 55       	subi	r30, 0x55	; 85
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <main+0x7bc>
    3466:	fe 01       	movw	r30, r28
    3468:	e5 55       	subi	r30, 0x55	; 85
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3470:	de 01       	movw	r26, r28
    3472:	a3 55       	subi	r26, 0x53	; 83
    3474:	bf 4f       	sbci	r27, 0xFF	; 255
    3476:	fe 01       	movw	r30, r28
    3478:	e3 55       	subi	r30, 0x53	; 83
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	91 81       	ldd	r25, Z+1	; 0x01
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	11 96       	adiw	r26, 0x01	; 1
    3484:	9c 93       	st	X, r25
    3486:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3488:	fe 01       	movw	r30, r28
    348a:	e3 55       	subi	r30, 0x53	; 83
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	80 81       	ld	r24, Z
    3490:	91 81       	ldd	r25, Z+1	; 0x01
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	d1 f6       	brne	.-76     	; 0x344a <main+0x7a4>
    3496:	27 c0       	rjmp	.+78     	; 0x34e6 <main+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3498:	8e 01       	movw	r16, r28
    349a:	03 55       	subi	r16, 0x53	; 83
    349c:	1f 4f       	sbci	r17, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	e1 55       	subi	r30, 0x51	; 81
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	f8 01       	movw	r30, r16
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
    34ba:	de 01       	movw	r26, r28
    34bc:	a7 55       	subi	r26, 0x57	; 87
    34be:	bf 4f       	sbci	r27, 0xFF	; 255
    34c0:	fe 01       	movw	r30, r28
    34c2:	e3 55       	subi	r30, 0x53	; 83
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	80 81       	ld	r24, Z
    34c8:	91 81       	ldd	r25, Z+1	; 0x01
    34ca:	8d 93       	st	X+, r24
    34cc:	9c 93       	st	X, r25
    34ce:	fe 01       	movw	r30, r28
    34d0:	e7 55       	subi	r30, 0x57	; 87
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	80 81       	ld	r24, Z
    34d6:	91 81       	ldd	r25, Z+1	; 0x01
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <main+0x832>
    34dc:	fe 01       	movw	r30, r28
    34de:	e7 55       	subi	r30, 0x57	; 87
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_voidGoToXY(1,0);
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			LCD_voidSendString("Enter Your  Pass :");
    34ee:	80 eb       	ldi	r24, 0xB0	; 176
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    34f6:	fe 01       	movw	r30, r28
    34f8:	eb 55       	subi	r30, 0x5B	; 91
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	a6 e9       	ldi	r26, 0x96	; 150
    3502:	b3 e4       	ldi	r27, 0x43	; 67
    3504:	80 83       	st	Z, r24
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	a2 83       	std	Z+2, r26	; 0x02
    350a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350c:	8e 01       	movw	r16, r28
    350e:	0f 55       	subi	r16, 0x5F	; 95
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
    3512:	fe 01       	movw	r30, r28
    3514:	eb 55       	subi	r30, 0x5B	; 91
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	60 81       	ld	r22, Z
    351a:	71 81       	ldd	r23, Z+1	; 0x01
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	4a ef       	ldi	r20, 0xFA	; 250
    3526:	54 e4       	ldi	r21, 0x44	; 68
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	f8 01       	movw	r30, r16
    3532:	80 83       	st	Z, r24
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	a2 83       	std	Z+2, r26	; 0x02
    3538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    353a:	fe 01       	movw	r30, r28
    353c:	ef 55       	subi	r30, 0x5F	; 95
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e8       	ldi	r20, 0x80	; 128
    354e:	5f e3       	ldi	r21, 0x3F	; 63
    3550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3554:	88 23       	and	r24, r24
    3556:	44 f4       	brge	.+16     	; 0x3568 <main+0x8c2>
		__ticks = 1;
    3558:	fe 01       	movw	r30, r28
    355a:	e1 56       	subi	r30, 0x61	; 97
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	64 c0       	rjmp	.+200    	; 0x3630 <main+0x98a>
	else if (__tmp > 65535)
    3568:	fe 01       	movw	r30, r28
    356a:	ef 55       	subi	r30, 0x5F	; 95
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	93 81       	ldd	r25, Z+3	; 0x03
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	3f ef       	ldi	r19, 0xFF	; 255
    357a:	4f e7       	ldi	r20, 0x7F	; 127
    357c:	57 e4       	ldi	r21, 0x47	; 71
    357e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3582:	18 16       	cp	r1, r24
    3584:	0c f0       	brlt	.+2      	; 0x3588 <main+0x8e2>
    3586:	43 c0       	rjmp	.+134    	; 0x360e <main+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3588:	fe 01       	movw	r30, r28
    358a:	eb 55       	subi	r30, 0x5B	; 91
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	60 81       	ld	r22, Z
    3590:	71 81       	ldd	r23, Z+1	; 0x01
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e2       	ldi	r20, 0x20	; 32
    359c:	51 e4       	ldi	r21, 0x41	; 65
    359e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	8e 01       	movw	r16, r28
    35a8:	01 56       	subi	r16, 0x61	; 97
    35aa:	1f 4f       	sbci	r17, 0xFF	; 255
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	f8 01       	movw	r30, r16
    35ba:	91 83       	std	Z+1, r25	; 0x01
    35bc:	80 83       	st	Z, r24
    35be:	1f c0       	rjmp	.+62     	; 0x35fe <main+0x958>
    35c0:	fe 01       	movw	r30, r28
    35c2:	e3 56       	subi	r30, 0x63	; 99
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	88 ec       	ldi	r24, 0xC8	; 200
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	80 83       	st	Z, r24
    35ce:	fe 01       	movw	r30, r28
    35d0:	e3 56       	subi	r30, 0x63	; 99
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <main+0x932>
    35dc:	fe 01       	movw	r30, r28
    35de:	e3 56       	subi	r30, 0x63	; 99
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	91 83       	std	Z+1, r25	; 0x01
    35e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e6:	de 01       	movw	r26, r28
    35e8:	a1 56       	subi	r26, 0x61	; 97
    35ea:	bf 4f       	sbci	r27, 0xFF	; 255
    35ec:	fe 01       	movw	r30, r28
    35ee:	e1 56       	subi	r30, 0x61	; 97
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	11 96       	adiw	r26, 0x01	; 1
    35fa:	9c 93       	st	X, r25
    35fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fe:	fe 01       	movw	r30, r28
    3600:	e1 56       	subi	r30, 0x61	; 97
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	80 81       	ld	r24, Z
    3606:	91 81       	ldd	r25, Z+1	; 0x01
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	d1 f6       	brne	.-76     	; 0x35c0 <main+0x91a>
    360c:	27 c0       	rjmp	.+78     	; 0x365c <main+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360e:	8e 01       	movw	r16, r28
    3610:	01 56       	subi	r16, 0x61	; 97
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	fe 01       	movw	r30, r28
    3616:	ef 55       	subi	r30, 0x5F	; 95
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	f8 01       	movw	r30, r16
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
    3630:	de 01       	movw	r26, r28
    3632:	a5 56       	subi	r26, 0x65	; 101
    3634:	bf 4f       	sbci	r27, 0xFF	; 255
    3636:	fe 01       	movw	r30, r28
    3638:	e1 56       	subi	r30, 0x61	; 97
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	8d 93       	st	X+, r24
    3642:	9c 93       	st	X, r25
    3644:	fe 01       	movw	r30, r28
    3646:	e5 56       	subi	r30, 0x65	; 101
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	80 81       	ld	r24, Z
    364c:	91 81       	ldd	r25, Z+1	; 0x01
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <main+0x9a8>
    3652:	fe 01       	movw	r30, r28
    3654:	e5 56       	subi	r30, 0x65	; 101
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	91 83       	std	Z+1, r25	; 0x01
    365a:	80 83       	st	Z, r24
			_delay_ms(300);
			LCD_voidClearDisplay();
    365c:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
			data = EEPROM_u16ReadWord(0);
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <EEPROM_u16ReadWord>
    3668:	fe 01       	movw	r30, r28
    366a:	ea 50       	subi	r30, 0x0A	; 10
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	91 83       	std	Z+1, r25	; 0x01
    3670:	80 83       	st	Z, r24
			LCD_voidSendString("password");
    3672:	83 ec       	ldi	r24, 0xC3	; 195
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    367a:	fe c0       	rjmp	.+508    	; 0x3878 <main+0xbd2>

			while(Local_u8Iterator!=4)
			{
				do
				{
					keypressed = KPD_u8GetPressedKey();
    367c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    3680:	fe 01       	movw	r30, r28
    3682:	e8 50       	subi	r30, 0x08	; 8
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	80 83       	st	Z, r24

				}while(keypressed==255);
    3688:	fe 01       	movw	r30, r28
    368a:	e8 50       	subi	r30, 0x08	; 8
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 81       	ld	r24, Z
    3690:	8f 3f       	cpi	r24, 0xFF	; 255
    3692:	a1 f3       	breq	.-24     	; 0x367c <main+0x9d6>
				password=(password*10)+keypressed;
    3694:	fe 01       	movw	r30, r28
    3696:	ee 50       	subi	r30, 0x0E	; 14
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	9c 01       	movw	r18, r24
    36a0:	22 0f       	add	r18, r18
    36a2:	33 1f       	adc	r19, r19
    36a4:	c9 01       	movw	r24, r18
    36a6:	88 0f       	add	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	88 0f       	add	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	28 0f       	add	r18, r24
    36b0:	39 1f       	adc	r19, r25
    36b2:	fe 01       	movw	r30, r28
    36b4:	e8 50       	subi	r30, 0x08	; 8
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 81       	ld	r24, Z
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	fe 01       	movw	r30, r28
    36c0:	ee 50       	subi	r30, 0x0E	; 14
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	82 0f       	add	r24, r18
    36c6:	93 1f       	adc	r25, r19
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	80 83       	st	Z, r24
				LCD_voidGoToXY(1,Local_u8Iterator);
    36cc:	fe 01       	movw	r30, r28
    36ce:	ec 50       	subi	r30, 0x0C	; 12
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	60 81       	ld	r22, Z
    36d6:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
				LCD_voidSendNumber(keypressed);
    36da:	fe 01       	movw	r30, r28
    36dc:	e8 50       	subi	r30, 0x08	; 8
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	80 81       	ld	r24, Z
    36e2:	88 2f       	mov	r24, r24
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_voidSendNumber>
    36ea:	fe 01       	movw	r30, r28
    36ec:	e9 56       	subi	r30, 0x69	; 105
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	a0 ea       	ldi	r26, 0xA0	; 160
    36f6:	b1 e4       	ldi	r27, 0x41	; 65
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3700:	8e 01       	movw	r16, r28
    3702:	0d 56       	subi	r16, 0x6D	; 109
    3704:	1f 4f       	sbci	r17, 0xFF	; 255
    3706:	fe 01       	movw	r30, r28
    3708:	e9 56       	subi	r30, 0x69	; 105
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	4a ef       	ldi	r20, 0xFA	; 250
    371a:	54 e4       	ldi	r21, 0x44	; 68
    371c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	f8 01       	movw	r30, r16
    3726:	80 83       	st	Z, r24
    3728:	91 83       	std	Z+1, r25	; 0x01
    372a:	a2 83       	std	Z+2, r26	; 0x02
    372c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    372e:	fe 01       	movw	r30, r28
    3730:	ed 56       	subi	r30, 0x6D	; 109
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e8       	ldi	r20, 0x80	; 128
    3742:	5f e3       	ldi	r21, 0x3F	; 63
    3744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3748:	88 23       	and	r24, r24
    374a:	44 f4       	brge	.+16     	; 0x375c <main+0xab6>
		__ticks = 1;
    374c:	fe 01       	movw	r30, r28
    374e:	ef 56       	subi	r30, 0x6F	; 111
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	91 83       	std	Z+1, r25	; 0x01
    3758:	80 83       	st	Z, r24
    375a:	64 c0       	rjmp	.+200    	; 0x3824 <main+0xb7e>
	else if (__tmp > 65535)
    375c:	fe 01       	movw	r30, r28
    375e:	ed 56       	subi	r30, 0x6D	; 109
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	93 81       	ldd	r25, Z+3	; 0x03
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	3f ef       	ldi	r19, 0xFF	; 255
    376e:	4f e7       	ldi	r20, 0x7F	; 127
    3770:	57 e4       	ldi	r21, 0x47	; 71
    3772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3776:	18 16       	cp	r1, r24
    3778:	0c f0       	brlt	.+2      	; 0x377c <main+0xad6>
    377a:	43 c0       	rjmp	.+134    	; 0x3802 <main+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377c:	fe 01       	movw	r30, r28
    377e:	e9 56       	subi	r30, 0x69	; 105
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e2       	ldi	r20, 0x20	; 32
    3790:	51 e4       	ldi	r21, 0x41	; 65
    3792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	8e 01       	movw	r16, r28
    379c:	0f 56       	subi	r16, 0x6F	; 111
    379e:	1f 4f       	sbci	r17, 0xFF	; 255
    37a0:	bc 01       	movw	r22, r24
    37a2:	cd 01       	movw	r24, r26
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	f8 01       	movw	r30, r16
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	80 83       	st	Z, r24
    37b2:	1f c0       	rjmp	.+62     	; 0x37f2 <main+0xb4c>
    37b4:	fe 01       	movw	r30, r28
    37b6:	e1 57       	subi	r30, 0x71	; 113
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	88 ec       	ldi	r24, 0xC8	; 200
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	91 83       	std	Z+1, r25	; 0x01
    37c0:	80 83       	st	Z, r24
    37c2:	fe 01       	movw	r30, r28
    37c4:	e1 57       	subi	r30, 0x71	; 113
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <main+0xb26>
    37d0:	fe 01       	movw	r30, r28
    37d2:	e1 57       	subi	r30, 0x71	; 113
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37da:	de 01       	movw	r26, r28
    37dc:	af 56       	subi	r26, 0x6F	; 111
    37de:	bf 4f       	sbci	r27, 0xFF	; 255
    37e0:	fe 01       	movw	r30, r28
    37e2:	ef 56       	subi	r30, 0x6F	; 111
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	11 96       	adiw	r26, 0x01	; 1
    37ee:	9c 93       	st	X, r25
    37f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f2:	fe 01       	movw	r30, r28
    37f4:	ef 56       	subi	r30, 0x6F	; 111
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	d1 f6       	brne	.-76     	; 0x37b4 <main+0xb0e>
    3800:	27 c0       	rjmp	.+78     	; 0x3850 <main+0xbaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3802:	8e 01       	movw	r16, r28
    3804:	0f 56       	subi	r16, 0x6F	; 111
    3806:	1f 4f       	sbci	r17, 0xFF	; 255
    3808:	fe 01       	movw	r30, r28
    380a:	ed 56       	subi	r30, 0x6D	; 109
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	f8 01       	movw	r30, r16
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	80 83       	st	Z, r24
    3824:	de 01       	movw	r26, r28
    3826:	a3 57       	subi	r26, 0x73	; 115
    3828:	bf 4f       	sbci	r27, 0xFF	; 255
    382a:	fe 01       	movw	r30, r28
    382c:	ef 56       	subi	r30, 0x6F	; 111
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	8d 93       	st	X+, r24
    3836:	9c 93       	st	X, r25
    3838:	fe 01       	movw	r30, r28
    383a:	e3 57       	subi	r30, 0x73	; 115
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	f1 f7       	brne	.-4      	; 0x3842 <main+0xb9c>
    3846:	fe 01       	movw	r30, r28
    3848:	e3 57       	subi	r30, 0x73	; 115
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	91 83       	std	Z+1, r25	; 0x01
    384e:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidGoToXY(1,Local_u8Iterator);
    3850:	fe 01       	movw	r30, r28
    3852:	ec 50       	subi	r30, 0x0C	; 12
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	60 81       	ld	r22, Z
    385a:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
				LCD_voidSendString("*");
    385e:	8e e9       	ldi	r24, 0x9E	; 158
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
				Local_u8Iterator++;
    3866:	de 01       	movw	r26, r28
    3868:	ac 50       	subi	r26, 0x0C	; 12
    386a:	bf 4f       	sbci	r27, 0xFF	; 255
    386c:	fe 01       	movw	r30, r28
    386e:	ec 50       	subi	r30, 0x0C	; 12
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	8f 5f       	subi	r24, 0xFF	; 255
    3876:	8c 93       	st	X, r24
			_delay_ms(300);
			LCD_voidClearDisplay();
			data = EEPROM_u16ReadWord(0);
			LCD_voidSendString("password");

			while(Local_u8Iterator!=4)
    3878:	fe 01       	movw	r30, r28
    387a:	ec 50       	subi	r30, 0x0C	; 12
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	80 81       	ld	r24, Z
    3880:	84 30       	cpi	r24, 0x04	; 4
    3882:	09 f0       	breq	.+2      	; 0x3886 <main+0xbe0>
    3884:	fb ce       	rjmp	.-522    	; 0x367c <main+0x9d6>
				Local_u8Iterator++;

			}

		}
	if(password==data||stats==1)
    3886:	fe 01       	movw	r30, r28
    3888:	ee 50       	subi	r30, 0x0E	; 14
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	de 01       	movw	r26, r28
    388e:	aa 50       	subi	r26, 0x0A	; 10
    3890:	bf 4f       	sbci	r27, 0xFF	; 255
    3892:	20 81       	ld	r18, Z
    3894:	31 81       	ldd	r19, Z+1	; 0x01
    3896:	8d 91       	ld	r24, X+
    3898:	9c 91       	ld	r25, X
    389a:	11 97       	sbiw	r26, 0x01	; 1
    389c:	28 17       	cp	r18, r24
    389e:	39 07       	cpc	r19, r25
    38a0:	29 f0       	breq	.+10     	; 0x38ac <main+0xc06>
    38a2:	80 91 98 01 	lds	r24, 0x0198
    38a6:	81 30       	cpi	r24, 0x01	; 1
    38a8:	09 f0       	breq	.+2      	; 0x38ac <main+0xc06>
    38aa:	79 c7       	rjmp	.+3826   	; 0x479e <main+0x1af8>
	{
		stats =1 ;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 98 01 	sts	0x0198, r24
		M_UART_voidSendData(10);
    38b2:	8a e0       	ldi	r24, 0x0A	; 10
    38b4:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
		LCD_voidClearDisplay();
    38b8:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
		LCD_voidSendString("Welcome");
    38bc:	8c ec       	ldi	r24, 0xCC	; 204
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    38c4:	fe 01       	movw	r30, r28
    38c6:	e7 57       	subi	r30, 0x77	; 119
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a8 e4       	ldi	r26, 0x48	; 72
    38d0:	b3 e4       	ldi	r27, 0x43	; 67
    38d2:	80 83       	st	Z, r24
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	a2 83       	std	Z+2, r26	; 0x02
    38d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38da:	8e 01       	movw	r16, r28
    38dc:	0b 57       	subi	r16, 0x7B	; 123
    38de:	1f 4f       	sbci	r17, 0xFF	; 255
    38e0:	fe 01       	movw	r30, r28
    38e2:	e7 57       	subi	r30, 0x77	; 119
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	60 81       	ld	r22, Z
    38e8:	71 81       	ldd	r23, Z+1	; 0x01
    38ea:	82 81       	ldd	r24, Z+2	; 0x02
    38ec:	93 81       	ldd	r25, Z+3	; 0x03
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a ef       	ldi	r20, 0xFA	; 250
    38f4:	54 e4       	ldi	r21, 0x44	; 68
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	f8 01       	movw	r30, r16
    3900:	80 83       	st	Z, r24
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	a2 83       	std	Z+2, r26	; 0x02
    3906:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3908:	fe 01       	movw	r30, r28
    390a:	eb 57       	subi	r30, 0x7B	; 123
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	60 81       	ld	r22, Z
    3910:	71 81       	ldd	r23, Z+1	; 0x01
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	93 81       	ldd	r25, Z+3	; 0x03
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e8       	ldi	r20, 0x80	; 128
    391c:	5f e3       	ldi	r21, 0x3F	; 63
    391e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3922:	88 23       	and	r24, r24
    3924:	44 f4       	brge	.+16     	; 0x3936 <main+0xc90>
		__ticks = 1;
    3926:	fe 01       	movw	r30, r28
    3928:	ed 57       	subi	r30, 0x7D	; 125
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24
    3934:	64 c0       	rjmp	.+200    	; 0x39fe <main+0xd58>
	else if (__tmp > 65535)
    3936:	fe 01       	movw	r30, r28
    3938:	eb 57       	subi	r30, 0x7B	; 123
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	60 81       	ld	r22, Z
    393e:	71 81       	ldd	r23, Z+1	; 0x01
    3940:	82 81       	ldd	r24, Z+2	; 0x02
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	3f ef       	ldi	r19, 0xFF	; 255
    3948:	4f e7       	ldi	r20, 0x7F	; 127
    394a:	57 e4       	ldi	r21, 0x47	; 71
    394c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3950:	18 16       	cp	r1, r24
    3952:	0c f0       	brlt	.+2      	; 0x3956 <main+0xcb0>
    3954:	43 c0       	rjmp	.+134    	; 0x39dc <main+0xd36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	fe 01       	movw	r30, r28
    3958:	e7 57       	subi	r30, 0x77	; 119
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e2       	ldi	r20, 0x20	; 32
    396a:	51 e4       	ldi	r21, 0x41	; 65
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	8e 01       	movw	r16, r28
    3976:	0d 57       	subi	r16, 0x7D	; 125
    3978:	1f 4f       	sbci	r17, 0xFF	; 255
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	f8 01       	movw	r30, r16
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    398c:	1f c0       	rjmp	.+62     	; 0x39cc <main+0xd26>
    398e:	fe 01       	movw	r30, r28
    3990:	ef 57       	subi	r30, 0x7F	; 127
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	fe 01       	movw	r30, r28
    399e:	ef 57       	subi	r30, 0x7F	; 127
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <main+0xd00>
    39aa:	fe 01       	movw	r30, r28
    39ac:	ef 57       	subi	r30, 0x7F	; 127
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b4:	de 01       	movw	r26, r28
    39b6:	ad 57       	subi	r26, 0x7D	; 125
    39b8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ba:	fe 01       	movw	r30, r28
    39bc:	ed 57       	subi	r30, 0x7D	; 125
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	11 96       	adiw	r26, 0x01	; 1
    39c8:	9c 93       	st	X, r25
    39ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39cc:	fe 01       	movw	r30, r28
    39ce:	ed 57       	subi	r30, 0x7D	; 125
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	80 81       	ld	r24, Z
    39d4:	91 81       	ldd	r25, Z+1	; 0x01
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	d1 f6       	brne	.-76     	; 0x398e <main+0xce8>
    39da:	27 c0       	rjmp	.+78     	; 0x3a2a <main+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39dc:	8e 01       	movw	r16, r28
    39de:	0d 57       	subi	r16, 0x7D	; 125
    39e0:	1f 4f       	sbci	r17, 0xFF	; 255
    39e2:	fe 01       	movw	r30, r28
    39e4:	eb 57       	subi	r30, 0x7B	; 123
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	60 81       	ld	r22, Z
    39ea:	71 81       	ldd	r23, Z+1	; 0x01
    39ec:	82 81       	ldd	r24, Z+2	; 0x02
    39ee:	93 81       	ldd	r25, Z+3	; 0x03
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	f8 01       	movw	r30, r16
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	80 83       	st	Z, r24
    39fe:	de 01       	movw	r26, r28
    3a00:	a1 58       	subi	r26, 0x81	; 129
    3a02:	bf 4f       	sbci	r27, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	ed 57       	subi	r30, 0x7D	; 125
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	8d 93       	st	X+, r24
    3a10:	9c 93       	st	X, r25
    3a12:	fe 01       	movw	r30, r28
    3a14:	e1 58       	subi	r30, 0x81	; 129
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <main+0xd76>
    3a20:	fe 01       	movw	r30, r28
    3a22:	e1 58       	subi	r30, 0x81	; 129
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_voidClearDisplay();
    3a2a:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
		LCD_voidGoToXY(0,0);
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
        LCD_voidSendString("1-ROOM1");
    3a36:	84 ed       	ldi	r24, 0xD4	; 212
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
        LCD_voidGoToXY(0,8);
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	68 e0       	ldi	r22, 0x08	; 8
    3a42:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
        LCD_voidSendString("2-ROOM2");
    3a46:	8c ed       	ldi	r24, 0xDC	; 220
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
        LCD_voidGoToXY(1,0);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
        LCD_voidSendString("3-ROOM3");
    3a56:	84 ee       	ldi	r24, 0xE4	; 228
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
        keypressed = 255;
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e8 50       	subi	r30, 0x08	; 8
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	8f ef       	ldi	r24, 0xFF	; 255
    3a66:	80 83       	st	Z, r24
        do
        {
        	keypressed = KPD_u8GetPressedKey();
    3a68:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	e8 50       	subi	r30, 0x08	; 8
    3a70:	ff 4f       	sbci	r31, 0xFF	; 255
    3a72:	80 83       	st	Z, r24
        }while(keypressed == 255);
    3a74:	fe 01       	movw	r30, r28
    3a76:	e8 50       	subi	r30, 0x08	; 8
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 81       	ld	r24, Z
    3a7c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a7e:	a1 f3       	breq	.-24     	; 0x3a68 <main+0xdc2>
        LCD_voidClearDisplay();
    3a80:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
        switch(keypressed)
    3a84:	fe 01       	movw	r30, r28
    3a86:	e8 50       	subi	r30, 0x08	; 8
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	80 81       	ld	r24, Z
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	cf 5f       	subi	r28, 0xFF	; 255
    3a92:	de 4f       	sbci	r29, 0xFE	; 254
    3a94:	39 83       	std	Y+1, r19	; 0x01
    3a96:	28 83       	st	Y, r18
    3a98:	c1 50       	subi	r28, 0x01	; 1
    3a9a:	d1 40       	sbci	r29, 0x01	; 1
    3a9c:	cf 5f       	subi	r28, 0xFF	; 255
    3a9e:	de 4f       	sbci	r29, 0xFE	; 254
    3aa0:	88 81       	ld	r24, Y
    3aa2:	99 81       	ldd	r25, Y+1	; 0x01
    3aa4:	c1 50       	subi	r28, 0x01	; 1
    3aa6:	d1 40       	sbci	r29, 0x01	; 1
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	91 05       	cpc	r25, r1
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <main+0xe0a>
    3aae:	24 c3       	rjmp	.+1608   	; 0x40f8 <main+0x1452>
    3ab0:	cf 5f       	subi	r28, 0xFF	; 255
    3ab2:	de 4f       	sbci	r29, 0xFE	; 254
    3ab4:	e8 81       	ld	r30, Y
    3ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ab8:	c1 50       	subi	r28, 0x01	; 1
    3aba:	d1 40       	sbci	r29, 0x01	; 1
    3abc:	e3 30       	cpi	r30, 0x03	; 3
    3abe:	f1 05       	cpc	r31, r1
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <main+0xe1e>
    3ac2:	ee c4       	rjmp	.+2524   	; 0x44a0 <main+0x17fa>
    3ac4:	cf 5f       	subi	r28, 0xFF	; 255
    3ac6:	de 4f       	sbci	r29, 0xFE	; 254
    3ac8:	28 81       	ld	r18, Y
    3aca:	39 81       	ldd	r19, Y+1	; 0x01
    3acc:	c1 50       	subi	r28, 0x01	; 1
    3ace:	d1 40       	sbci	r29, 0x01	; 1
    3ad0:	21 30       	cpi	r18, 0x01	; 1
    3ad2:	31 05       	cpc	r19, r1
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <main+0xe32>
    3ad6:	73 c9       	rjmp	.-3354   	; 0x2dbe <main+0x118>
        {
        case 1:
        	LCD_voidSendString("Light:1");
    3ad8:	8c ee       	ldi	r24, 0xEC	; 236
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
			LCD_voidGoToXY(0,8);
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	68 e0       	ldi	r22, 0x08	; 8
    3ae4:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			LCD_voidSendString("FAN :2");
    3ae8:	84 ef       	ldi	r24, 0xF4	; 244
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>

			LCD_voidGoToXY(1,0);
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			LCD_voidGoToXY(1,5);
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	65 e0       	ldi	r22, 0x05	; 5
    3afc:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			LCD_voidSendString("CURTAINS :3");
    3b00:	8b ef       	ldi	r24, 0xFB	; 251
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
        	keypressed = 255;
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e8 50       	subi	r30, 0x08	; 8
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	8f ef       	ldi	r24, 0xFF	; 255
    3b10:	80 83       	st	Z, r24
			do
			{
				keypressed = KPD_u8GetPressedKey();
    3b12:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    3b16:	fe 01       	movw	r30, r28
    3b18:	e8 50       	subi	r30, 0x08	; 8
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 83       	st	Z, r24
			}while(keypressed == 255);
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e8 50       	subi	r30, 0x08	; 8
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	80 81       	ld	r24, Z
    3b26:	8f 3f       	cpi	r24, 0xFF	; 255
    3b28:	a1 f3       	breq	.-24     	; 0x3b12 <main+0xe6c>
			switch(keypressed)
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e8 50       	subi	r30, 0x08	; 8
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	e8 2f       	mov	r30, r24
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	c1 50       	subi	r28, 0x01	; 1
    3b38:	df 4f       	sbci	r29, 0xFF	; 255
    3b3a:	f9 83       	std	Y+1, r31	; 0x01
    3b3c:	e8 83       	st	Y, r30
    3b3e:	cf 5f       	subi	r28, 0xFF	; 255
    3b40:	d0 40       	sbci	r29, 0x00	; 0
    3b42:	c1 50       	subi	r28, 0x01	; 1
    3b44:	df 4f       	sbci	r29, 0xFF	; 255
    3b46:	28 81       	ld	r18, Y
    3b48:	39 81       	ldd	r19, Y+1	; 0x01
    3b4a:	cf 5f       	subi	r28, 0xFF	; 255
    3b4c:	d0 40       	sbci	r29, 0x00	; 0
    3b4e:	22 30       	cpi	r18, 0x02	; 2
    3b50:	31 05       	cpc	r19, r1
    3b52:	c1 f0       	breq	.+48     	; 0x3b84 <main+0xede>
    3b54:	c1 50       	subi	r28, 0x01	; 1
    3b56:	df 4f       	sbci	r29, 0xFF	; 255
    3b58:	88 81       	ld	r24, Y
    3b5a:	99 81       	ldd	r25, Y+1	; 0x01
    3b5c:	cf 5f       	subi	r28, 0xFF	; 255
    3b5e:	d0 40       	sbci	r29, 0x00	; 0
    3b60:	83 30       	cpi	r24, 0x03	; 3
    3b62:	91 05       	cpc	r25, r1
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <main+0xec2>
    3b66:	cc c1       	rjmp	.+920    	; 0x3f00 <main+0x125a>
    3b68:	c1 50       	subi	r28, 0x01	; 1
    3b6a:	df 4f       	sbci	r29, 0xFF	; 255
    3b6c:	e8 81       	ld	r30, Y
    3b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    3b70:	cf 5f       	subi	r28, 0xFF	; 255
    3b72:	d0 40       	sbci	r29, 0x00	; 0
    3b74:	e1 30       	cpi	r30, 0x01	; 1
    3b76:	f1 05       	cpc	r31, r1
    3b78:	09 f0       	breq	.+2      	; 0x3b7c <main+0xed6>
    3b7a:	21 c9       	rjmp	.-3518   	; 0x2dbe <main+0x118>
			{
				case 1 :
					M_UART_voidSendData(1);
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
    3b82:	1d c9       	rjmp	.-3526   	; 0x2dbe <main+0x118>
					break;
				case 2 :
				LCD_voidClearDisplay();
    3b84:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
				M_UART_voidSendData(keypressed);
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e8 50       	subi	r30, 0x08	; 8
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	80 81       	ld	r24, Z
    3b90:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
				u16 reading = ADC_u16GetAnalogReadSYNC(0);
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <ADC_u16GetAnalogReadSYNC>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e5 51       	subi	r30, 0x15	; 21
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	91 83       	std	Z+1, r25	; 0x01
    3ba2:	80 83       	st	Z, r24
				reading =	(reading*5000UL)/1024;
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e5 51       	subi	r30, 0x15	; 21
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 81       	ld	r24, Z
    3bac:	91 81       	ldd	r25, Z+1	; 0x01
    3bae:	cc 01       	movw	r24, r24
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	28 e8       	ldi	r18, 0x88	; 136
    3bb6:	33 e1       	ldi	r19, 0x13	; 19
    3bb8:	40 e0       	ldi	r20, 0x00	; 0
    3bba:	50 e0       	ldi	r21, 0x00	; 0
    3bbc:	bc 01       	movw	r22, r24
    3bbe:	cd 01       	movw	r24, r26
    3bc0:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulsi3>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	07 2e       	mov	r0, r23
    3bca:	7a e0       	ldi	r23, 0x0A	; 10
    3bcc:	b6 95       	lsr	r27
    3bce:	a7 95       	ror	r26
    3bd0:	97 95       	ror	r25
    3bd2:	87 95       	ror	r24
    3bd4:	7a 95       	dec	r23
    3bd6:	d1 f7       	brne	.-12     	; 0x3bcc <main+0xf26>
    3bd8:	70 2d       	mov	r23, r0
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e5 51       	subi	r30, 0x15	; 21
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
				u16 temp = reading/10;
    3be4:	8e 01       	movw	r16, r28
    3be6:	07 51       	subi	r16, 0x17	; 23
    3be8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bea:	fe 01       	movw	r30, r28
    3bec:	e5 51       	subi	r30, 0x15	; 21
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	2a e0       	ldi	r18, 0x0A	; 10
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	b9 01       	movw	r22, r18
    3bfa:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__udivmodhi4>
    3bfe:	cb 01       	movw	r24, r22
    3c00:	f8 01       	movw	r30, r16
    3c02:	91 83       	std	Z+1, r25	; 0x01
    3c04:	80 83       	st	Z, r24
				LCD_voidSendString("FAN IS ON ");
    3c06:	87 e0       	ldi	r24, 0x07	; 7
    3c08:	91 e0       	ldi	r25, 0x01	; 1
    3c0a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e5 58       	subi	r30, 0x85	; 133
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	aa e7       	ldi	r26, 0x7A	; 122
    3c1a:	b4 e4       	ldi	r27, 0x44	; 68
    3c1c:	80 83       	st	Z, r24
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	a2 83       	std	Z+2, r26	; 0x02
    3c22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c24:	8e 01       	movw	r16, r28
    3c26:	09 58       	subi	r16, 0x89	; 137
    3c28:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e5 58       	subi	r30, 0x85	; 133
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	4a ef       	ldi	r20, 0xFA	; 250
    3c3e:	54 e4       	ldi	r21, 0x44	; 68
    3c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	f8 01       	movw	r30, r16
    3c4a:	80 83       	st	Z, r24
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	a2 83       	std	Z+2, r26	; 0x02
    3c50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c52:	fe 01       	movw	r30, r28
    3c54:	e9 58       	subi	r30, 0x89	; 137
    3c56:	ff 4f       	sbci	r31, 0xFF	; 255
    3c58:	60 81       	ld	r22, Z
    3c5a:	71 81       	ldd	r23, Z+1	; 0x01
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e8       	ldi	r20, 0x80	; 128
    3c66:	5f e3       	ldi	r21, 0x3F	; 63
    3c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c6c:	88 23       	and	r24, r24
    3c6e:	44 f4       	brge	.+16     	; 0x3c80 <main+0xfda>
		__ticks = 1;
    3c70:	fe 01       	movw	r30, r28
    3c72:	eb 58       	subi	r30, 0x8B	; 139
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	80 83       	st	Z, r24
    3c7e:	64 c0       	rjmp	.+200    	; 0x3d48 <main+0x10a2>
	else if (__tmp > 65535)
    3c80:	fe 01       	movw	r30, r28
    3c82:	e9 58       	subi	r30, 0x89	; 137
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	3f ef       	ldi	r19, 0xFF	; 255
    3c92:	4f e7       	ldi	r20, 0x7F	; 127
    3c94:	57 e4       	ldi	r21, 0x47	; 71
    3c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c9a:	18 16       	cp	r1, r24
    3c9c:	0c f0       	brlt	.+2      	; 0x3ca0 <main+0xffa>
    3c9e:	43 c0       	rjmp	.+134    	; 0x3d26 <main+0x1080>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e5 58       	subi	r30, 0x85	; 133
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e2       	ldi	r20, 0x20	; 32
    3cb4:	51 e4       	ldi	r21, 0x41	; 65
    3cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	8e 01       	movw	r16, r28
    3cc0:	0b 58       	subi	r16, 0x8B	; 139
    3cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	cd 01       	movw	r24, r26
    3cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	f8 01       	movw	r30, r16
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
    3cd6:	1f c0       	rjmp	.+62     	; 0x3d16 <main+0x1070>
    3cd8:	fe 01       	movw	r30, r28
    3cda:	ed 58       	subi	r30, 0x8D	; 141
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	88 ec       	ldi	r24, 0xC8	; 200
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	91 83       	std	Z+1, r25	; 0x01
    3ce4:	80 83       	st	Z, r24
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	ed 58       	subi	r30, 0x8D	; 141
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	f1 f7       	brne	.-4      	; 0x3cf0 <main+0x104a>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ed 58       	subi	r30, 0x8D	; 141
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfe:	de 01       	movw	r26, r28
    3d00:	ab 58       	subi	r26, 0x8B	; 139
    3d02:	bf 4f       	sbci	r27, 0xFF	; 255
    3d04:	fe 01       	movw	r30, r28
    3d06:	eb 58       	subi	r30, 0x8B	; 139
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	11 96       	adiw	r26, 0x01	; 1
    3d12:	9c 93       	st	X, r25
    3d14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d16:	fe 01       	movw	r30, r28
    3d18:	eb 58       	subi	r30, 0x8B	; 139
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	80 81       	ld	r24, Z
    3d1e:	91 81       	ldd	r25, Z+1	; 0x01
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	d1 f6       	brne	.-76     	; 0x3cd8 <main+0x1032>
    3d24:	27 c0       	rjmp	.+78     	; 0x3d74 <main+0x10ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d26:	8e 01       	movw	r16, r28
    3d28:	0b 58       	subi	r16, 0x8B	; 139
    3d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e9 58       	subi	r30, 0x89	; 137
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	60 81       	ld	r22, Z
    3d34:	71 81       	ldd	r23, Z+1	; 0x01
    3d36:	82 81       	ldd	r24, Z+2	; 0x02
    3d38:	93 81       	ldd	r25, Z+3	; 0x03
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	f8 01       	movw	r30, r16
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
    3d48:	de 01       	movw	r26, r28
    3d4a:	af 58       	subi	r26, 0x8F	; 143
    3d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4e:	fe 01       	movw	r30, r28
    3d50:	eb 58       	subi	r30, 0x8B	; 139
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	80 81       	ld	r24, Z
    3d56:	91 81       	ldd	r25, Z+1	; 0x01
    3d58:	8d 93       	st	X+, r24
    3d5a:	9c 93       	st	X, r25
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	ef 58       	subi	r30, 0x8F	; 143
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	f1 f7       	brne	.-4      	; 0x3d66 <main+0x10c0>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	ef 58       	subi	r30, 0x8F	; 143
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_voidGoToXY(1,0);
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
				LCD_voidSendString("Temp is : " );
    3d7c:	82 e1       	ldi	r24, 0x12	; 18
    3d7e:	91 e0       	ldi	r25, 0x01	; 1
    3d80:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
				LCD_voidSendNumber(temp);
    3d84:	fe 01       	movw	r30, r28
    3d86:	e7 51       	subi	r30, 0x17	; 23
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 81       	ld	r24, Z
    3d8c:	91 81       	ldd	r25, Z+1	; 0x01
    3d8e:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_voidSendNumber>
    3d92:	fe 01       	movw	r30, r28
    3d94:	e3 59       	subi	r30, 0x93	; 147
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	aa e7       	ldi	r26, 0x7A	; 122
    3d9e:	b4 e4       	ldi	r27, 0x44	; 68
    3da0:	80 83       	st	Z, r24
    3da2:	91 83       	std	Z+1, r25	; 0x01
    3da4:	a2 83       	std	Z+2, r26	; 0x02
    3da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da8:	8e 01       	movw	r16, r28
    3daa:	07 59       	subi	r16, 0x97	; 151
    3dac:	1f 4f       	sbci	r17, 0xFF	; 255
    3dae:	fe 01       	movw	r30, r28
    3db0:	e3 59       	subi	r30, 0x93	; 147
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	4a ef       	ldi	r20, 0xFA	; 250
    3dc2:	54 e4       	ldi	r21, 0x44	; 68
    3dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	f8 01       	movw	r30, r16
    3dce:	80 83       	st	Z, r24
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	a2 83       	std	Z+2, r26	; 0x02
    3dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e7 59       	subi	r30, 0x97	; 151
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e8       	ldi	r20, 0x80	; 128
    3dea:	5f e3       	ldi	r21, 0x3F	; 63
    3dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df0:	88 23       	and	r24, r24
    3df2:	44 f4       	brge	.+16     	; 0x3e04 <main+0x115e>
		__ticks = 1;
    3df4:	fe 01       	movw	r30, r28
    3df6:	e9 59       	subi	r30, 0x99	; 153
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	80 83       	st	Z, r24
    3e02:	65 c0       	rjmp	.+202    	; 0x3ece <main+0x1228>
	else if (__tmp > 65535)
    3e04:	fe 01       	movw	r30, r28
    3e06:	e7 59       	subi	r30, 0x97	; 151
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	3f ef       	ldi	r19, 0xFF	; 255
    3e16:	4f e7       	ldi	r20, 0x7F	; 127
    3e18:	57 e4       	ldi	r21, 0x47	; 71
    3e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e1e:	18 16       	cp	r1, r24
    3e20:	0c f0       	brlt	.+2      	; 0x3e24 <main+0x117e>
    3e22:	44 c0       	rjmp	.+136    	; 0x3eac <main+0x1206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e24:	fe 01       	movw	r30, r28
    3e26:	e3 59       	subi	r30, 0x93	; 147
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	60 81       	ld	r22, Z
    3e2c:	71 81       	ldd	r23, Z+1	; 0x01
    3e2e:	82 81       	ldd	r24, Z+2	; 0x02
    3e30:	93 81       	ldd	r25, Z+3	; 0x03
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	51 e4       	ldi	r21, 0x41	; 65
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	8e 01       	movw	r16, r28
    3e44:	09 59       	subi	r16, 0x99	; 153
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	f8 01       	movw	r30, r16
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
    3e5a:	1f c0       	rjmp	.+62     	; 0x3e9a <main+0x11f4>
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	eb 59       	subi	r30, 0x9B	; 155
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	88 ec       	ldi	r24, 0xC8	; 200
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	80 83       	st	Z, r24
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	eb 59       	subi	r30, 0x9B	; 155
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <main+0x11ce>
    3e78:	fe 01       	movw	r30, r28
    3e7a:	eb 59       	subi	r30, 0x9B	; 155
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e82:	de 01       	movw	r26, r28
    3e84:	a9 59       	subi	r26, 0x99	; 153
    3e86:	bf 4f       	sbci	r27, 0xFF	; 255
    3e88:	fe 01       	movw	r30, r28
    3e8a:	e9 59       	subi	r30, 0x99	; 153
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	91 81       	ldd	r25, Z+1	; 0x01
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	11 96       	adiw	r26, 0x01	; 1
    3e96:	9c 93       	st	X, r25
    3e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e9 59       	subi	r30, 0x99	; 153
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	80 81       	ld	r24, Z
    3ea2:	91 81       	ldd	r25, Z+1	; 0x01
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	d1 f6       	brne	.-76     	; 0x3e5c <main+0x11b6>
    3ea8:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	8e 01       	movw	r16, r28
    3eae:	09 59       	subi	r16, 0x99	; 153
    3eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e7 59       	subi	r30, 0x97	; 151
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	93 81       	ldd	r25, Z+3	; 0x03
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	f8 01       	movw	r30, r16
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
    3ece:	de 01       	movw	r26, r28
    3ed0:	ad 59       	subi	r26, 0x9D	; 157
    3ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e9 59       	subi	r30, 0x99	; 153
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	11 96       	adiw	r26, 0x01	; 1
    3ee0:	9c 93       	st	X, r25
    3ee2:	8e 93       	st	-X, r24
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	ed 59       	subi	r30, 0x9D	; 157
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <main+0x1248>
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ed 59       	subi	r30, 0x9D	; 157
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	80 83       	st	Z, r24
    3efc:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
				_delay_ms(1000);
				break;
				case 3 :
					LCD_voidClearDisplay();
    3f00:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
					LCD_voidSendString(" 1 -Open  ");
    3f04:	8d e1       	ldi	r24, 0x1D	; 29
    3f06:	91 e0       	ldi	r25, 0x01	; 1
    3f08:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e1 5a       	subi	r30, 0xA1	; 161
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	aa e7       	ldi	r26, 0x7A	; 122
    3f18:	b4 e4       	ldi	r27, 0x44	; 68
    3f1a:	80 83       	st	Z, r24
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	a2 83       	std	Z+2, r26	; 0x02
    3f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f22:	8e 01       	movw	r16, r28
    3f24:	05 5a       	subi	r16, 0xA5	; 165
    3f26:	1f 4f       	sbci	r17, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e1 5a       	subi	r30, 0xA1	; 161
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	4a ef       	ldi	r20, 0xFA	; 250
    3f3c:	54 e4       	ldi	r21, 0x44	; 68
    3f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	f8 01       	movw	r30, r16
    3f48:	80 83       	st	Z, r24
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	a2 83       	std	Z+2, r26	; 0x02
    3f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f50:	fe 01       	movw	r30, r28
    3f52:	e5 5a       	subi	r30, 0xA5	; 165
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	60 81       	ld	r22, Z
    3f58:	71 81       	ldd	r23, Z+1	; 0x01
    3f5a:	82 81       	ldd	r24, Z+2	; 0x02
    3f5c:	93 81       	ldd	r25, Z+3	; 0x03
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	40 e8       	ldi	r20, 0x80	; 128
    3f64:	5f e3       	ldi	r21, 0x3F	; 63
    3f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f6a:	88 23       	and	r24, r24
    3f6c:	44 f4       	brge	.+16     	; 0x3f7e <main+0x12d8>
		__ticks = 1;
    3f6e:	fe 01       	movw	r30, r28
    3f70:	e7 5a       	subi	r30, 0xA7	; 167
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
    3f7c:	64 c0       	rjmp	.+200    	; 0x4046 <main+0x13a0>
	else if (__tmp > 65535)
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e5 5a       	subi	r30, 0xA5	; 165
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	3f ef       	ldi	r19, 0xFF	; 255
    3f90:	4f e7       	ldi	r20, 0x7F	; 127
    3f92:	57 e4       	ldi	r21, 0x47	; 71
    3f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f98:	18 16       	cp	r1, r24
    3f9a:	0c f0       	brlt	.+2      	; 0x3f9e <main+0x12f8>
    3f9c:	43 c0       	rjmp	.+134    	; 0x4024 <main+0x137e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e1 5a       	subi	r30, 0xA1	; 161
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	60 81       	ld	r22, Z
    3fa6:	71 81       	ldd	r23, Z+1	; 0x01
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	93 81       	ldd	r25, Z+3	; 0x03
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e2       	ldi	r20, 0x20	; 32
    3fb2:	51 e4       	ldi	r21, 0x41	; 65
    3fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	8e 01       	movw	r16, r28
    3fbe:	07 5a       	subi	r16, 0xA7	; 167
    3fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc2:	bc 01       	movw	r22, r24
    3fc4:	cd 01       	movw	r24, r26
    3fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	f8 01       	movw	r30, r16
    3fd0:	91 83       	std	Z+1, r25	; 0x01
    3fd2:	80 83       	st	Z, r24
    3fd4:	1f c0       	rjmp	.+62     	; 0x4014 <main+0x136e>
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e9 5a       	subi	r30, 0xA9	; 169
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	88 ec       	ldi	r24, 0xC8	; 200
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	80 83       	st	Z, r24
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e9 5a       	subi	r30, 0xA9	; 169
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	80 81       	ld	r24, Z
    3fec:	91 81       	ldd	r25, Z+1	; 0x01
    3fee:	01 97       	sbiw	r24, 0x01	; 1
    3ff0:	f1 f7       	brne	.-4      	; 0x3fee <main+0x1348>
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	e9 5a       	subi	r30, 0xA9	; 169
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	91 83       	std	Z+1, r25	; 0x01
    3ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffc:	de 01       	movw	r26, r28
    3ffe:	a7 5a       	subi	r26, 0xA7	; 167
    4000:	bf 4f       	sbci	r27, 0xFF	; 255
    4002:	fe 01       	movw	r30, r28
    4004:	e7 5a       	subi	r30, 0xA7	; 167
    4006:	ff 4f       	sbci	r31, 0xFF	; 255
    4008:	80 81       	ld	r24, Z
    400a:	91 81       	ldd	r25, Z+1	; 0x01
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	11 96       	adiw	r26, 0x01	; 1
    4010:	9c 93       	st	X, r25
    4012:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4014:	fe 01       	movw	r30, r28
    4016:	e7 5a       	subi	r30, 0xA7	; 167
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	00 97       	sbiw	r24, 0x00	; 0
    4020:	d1 f6       	brne	.-76     	; 0x3fd6 <main+0x1330>
    4022:	27 c0       	rjmp	.+78     	; 0x4072 <main+0x13cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4024:	8e 01       	movw	r16, r28
    4026:	07 5a       	subi	r16, 0xA7	; 167
    4028:	1f 4f       	sbci	r17, 0xFF	; 255
    402a:	fe 01       	movw	r30, r28
    402c:	e5 5a       	subi	r30, 0xA5	; 165
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	60 81       	ld	r22, Z
    4032:	71 81       	ldd	r23, Z+1	; 0x01
    4034:	82 81       	ldd	r24, Z+2	; 0x02
    4036:	93 81       	ldd	r25, Z+3	; 0x03
    4038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	f8 01       	movw	r30, r16
    4042:	91 83       	std	Z+1, r25	; 0x01
    4044:	80 83       	st	Z, r24
    4046:	de 01       	movw	r26, r28
    4048:	ab 5a       	subi	r26, 0xAB	; 171
    404a:	bf 4f       	sbci	r27, 0xFF	; 255
    404c:	fe 01       	movw	r30, r28
    404e:	e7 5a       	subi	r30, 0xA7	; 167
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	91 81       	ldd	r25, Z+1	; 0x01
    4056:	8d 93       	st	X+, r24
    4058:	9c 93       	st	X, r25
    405a:	fe 01       	movw	r30, r28
    405c:	eb 5a       	subi	r30, 0xAB	; 171
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 81       	ld	r24, Z
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	f1 f7       	brne	.-4      	; 0x4064 <main+0x13be>
    4068:	fe 01       	movw	r30, r28
    406a:	eb 5a       	subi	r30, 0xAB	; 171
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	91 83       	std	Z+1, r25	; 0x01
    4070:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_voidGoToXY(1,0);
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
					LCD_voidSendString("2-  close" );
    407a:	88 e2       	ldi	r24, 0x28	; 40
    407c:	91 e0       	ldi	r25, 0x01	; 1
    407e:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
					keypressed = 255;
    4082:	fe 01       	movw	r30, r28
    4084:	e8 50       	subi	r30, 0x08	; 8
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	8f ef       	ldi	r24, 0xFF	; 255
    408a:	80 83       	st	Z, r24
					do
					{
					keypressed = KPD_u8GetPressedKey();
    408c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    4090:	fe 01       	movw	r30, r28
    4092:	e8 50       	subi	r30, 0x08	; 8
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	80 83       	st	Z, r24
					}while(keypressed == 255);
    4098:	fe 01       	movw	r30, r28
    409a:	e8 50       	subi	r30, 0x08	; 8
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	80 81       	ld	r24, Z
    40a0:	8f 3f       	cpi	r24, 0xFF	; 255
    40a2:	a1 f3       	breq	.-24     	; 0x408c <main+0x13e6>
				switch(keypressed)
    40a4:	fe 01       	movw	r30, r28
    40a6:	e8 50       	subi	r30, 0x08	; 8
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 81       	ld	r24, Z
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	c3 50       	subi	r28, 0x03	; 3
    40b2:	df 4f       	sbci	r29, 0xFF	; 255
    40b4:	39 83       	std	Y+1, r19	; 0x01
    40b6:	28 83       	st	Y, r18
    40b8:	cd 5f       	subi	r28, 0xFD	; 253
    40ba:	d0 40       	sbci	r29, 0x00	; 0
    40bc:	c3 50       	subi	r28, 0x03	; 3
    40be:	df 4f       	sbci	r29, 0xFF	; 255
    40c0:	88 81       	ld	r24, Y
    40c2:	99 81       	ldd	r25, Y+1	; 0x01
    40c4:	cd 5f       	subi	r28, 0xFD	; 253
    40c6:	d0 40       	sbci	r29, 0x00	; 0
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	91 05       	cpc	r25, r1
    40cc:	59 f0       	breq	.+22     	; 0x40e4 <main+0x143e>
    40ce:	c3 50       	subi	r28, 0x03	; 3
    40d0:	df 4f       	sbci	r29, 0xFF	; 255
    40d2:	e8 81       	ld	r30, Y
    40d4:	f9 81       	ldd	r31, Y+1	; 0x01
    40d6:	cd 5f       	subi	r28, 0xFD	; 253
    40d8:	d0 40       	sbci	r29, 0x00	; 0
    40da:	e2 30       	cpi	r30, 0x02	; 2
    40dc:	f1 05       	cpc	r31, r1
    40de:	39 f0       	breq	.+14     	; 0x40ee <main+0x1448>
    40e0:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
				{
					case 1 : M_UART_voidSendData(3);
    40e4:	83 e0       	ldi	r24, 0x03	; 3
    40e6:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
    40ea:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
					break ;
					case 2:
						M_UART_voidSendData(9);
    40ee:	89 e0       	ldi	r24, 0x09	; 9
    40f0:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
    40f4:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
				}

			}
			break;
        case 2:
			LCD_voidClearDisplay();
    40f8:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
        	LCD_voidSendString("light:4");
    40fc:	82 e3       	ldi	r24, 0x32	; 50
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
			LCD_voidGoToXY(0,8);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	68 e0       	ldi	r22, 0x08	; 8
    4108:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			LCD_voidSendString("fan :5");
    410c:	8a e3       	ldi	r24, 0x3A	; 58
    410e:	91 e0       	ldi	r25, 0x01	; 1
    4110:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
			keypressed = 255;
    4114:	fe 01       	movw	r30, r28
    4116:	e8 50       	subi	r30, 0x08	; 8
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	8f ef       	ldi	r24, 0xFF	; 255
    411c:	80 83       	st	Z, r24
			do
			{
				keypressed = KPD_u8GetPressedKey();
    411e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    4122:	fe 01       	movw	r30, r28
    4124:	e8 50       	subi	r30, 0x08	; 8
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 83       	st	Z, r24
			}while(keypressed == 255);
    412a:	fe 01       	movw	r30, r28
    412c:	e8 50       	subi	r30, 0x08	; 8
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	80 81       	ld	r24, Z
    4132:	8f 3f       	cpi	r24, 0xFF	; 255
    4134:	a1 f3       	breq	.-24     	; 0x411e <main+0x1478>
        switch(keypressed)
    4136:	fe 01       	movw	r30, r28
    4138:	e8 50       	subi	r30, 0x08	; 8
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	28 2f       	mov	r18, r24
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	c5 50       	subi	r28, 0x05	; 5
    4144:	df 4f       	sbci	r29, 0xFF	; 255
    4146:	39 83       	std	Y+1, r19	; 0x01
    4148:	28 83       	st	Y, r18
    414a:	cb 5f       	subi	r28, 0xFB	; 251
    414c:	d0 40       	sbci	r29, 0x00	; 0
    414e:	c5 50       	subi	r28, 0x05	; 5
    4150:	df 4f       	sbci	r29, 0xFF	; 255
    4152:	88 81       	ld	r24, Y
    4154:	99 81       	ldd	r25, Y+1	; 0x01
    4156:	cb 5f       	subi	r28, 0xFB	; 251
    4158:	d0 40       	sbci	r29, 0x00	; 0
    415a:	84 30       	cpi	r24, 0x04	; 4
    415c:	91 05       	cpc	r25, r1
    415e:	09 f4       	brne	.+2      	; 0x4162 <main+0x14bc>
    4160:	9a c1       	rjmp	.+820    	; 0x4496 <main+0x17f0>
    4162:	c5 50       	subi	r28, 0x05	; 5
    4164:	df 4f       	sbci	r29, 0xFF	; 255
    4166:	e8 81       	ld	r30, Y
    4168:	f9 81       	ldd	r31, Y+1	; 0x01
    416a:	cb 5f       	subi	r28, 0xFB	; 251
    416c:	d0 40       	sbci	r29, 0x00	; 0
    416e:	e5 30       	cpi	r30, 0x05	; 5
    4170:	f1 05       	cpc	r31, r1
    4172:	11 f0       	breq	.+4      	; 0x4178 <main+0x14d2>
    4174:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
				{
        			case 5 :
					LCD_voidClearDisplay();
    4178:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
					M_UART_voidSendData(keypressed);
    417c:	fe 01       	movw	r30, r28
    417e:	e8 50       	subi	r30, 0x08	; 8
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	80 81       	ld	r24, Z
    4184:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
					u16 reading = ADC_u16GetAnalogReadSYNC(0);
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <ADC_u16GetAnalogReadSYNC>
    418e:	fe 01       	movw	r30, r28
    4190:	e9 51       	subi	r30, 0x19	; 25
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	91 83       	std	Z+1, r25	; 0x01
    4196:	80 83       	st	Z, r24
					reading =	(reading*5000UL)/1024;
    4198:	fe 01       	movw	r30, r28
    419a:	e9 51       	subi	r30, 0x19	; 25
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	91 81       	ldd	r25, Z+1	; 0x01
    41a2:	cc 01       	movw	r24, r24
    41a4:	a0 e0       	ldi	r26, 0x00	; 0
    41a6:	b0 e0       	ldi	r27, 0x00	; 0
    41a8:	28 e8       	ldi	r18, 0x88	; 136
    41aa:	33 e1       	ldi	r19, 0x13	; 19
    41ac:	40 e0       	ldi	r20, 0x00	; 0
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	bc 01       	movw	r22, r24
    41b2:	cd 01       	movw	r24, r26
    41b4:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulsi3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	07 2e       	mov	r0, r23
    41be:	7a e0       	ldi	r23, 0x0A	; 10
    41c0:	b6 95       	lsr	r27
    41c2:	a7 95       	ror	r26
    41c4:	97 95       	ror	r25
    41c6:	87 95       	ror	r24
    41c8:	7a 95       	dec	r23
    41ca:	d1 f7       	brne	.-12     	; 0x41c0 <main+0x151a>
    41cc:	70 2d       	mov	r23, r0
    41ce:	fe 01       	movw	r30, r28
    41d0:	e9 51       	subi	r30, 0x19	; 25
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	91 83       	std	Z+1, r25	; 0x01
    41d6:	80 83       	st	Z, r24
					u16 temp = reading/10;
    41d8:	8e 01       	movw	r16, r28
    41da:	0b 51       	subi	r16, 0x1B	; 27
    41dc:	1f 4f       	sbci	r17, 0xFF	; 255
    41de:	fe 01       	movw	r30, r28
    41e0:	e9 51       	subi	r30, 0x19	; 25
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	80 81       	ld	r24, Z
    41e6:	91 81       	ldd	r25, Z+1	; 0x01
    41e8:	2a e0       	ldi	r18, 0x0A	; 10
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	b9 01       	movw	r22, r18
    41ee:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__udivmodhi4>
    41f2:	cb 01       	movw	r24, r22
    41f4:	f8 01       	movw	r30, r16
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
					LCD_voidSendString("FAN IS ON ");
    41fa:	87 e0       	ldi	r24, 0x07	; 7
    41fc:	91 e0       	ldi	r25, 0x01	; 1
    41fe:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    4202:	fe 01       	movw	r30, r28
    4204:	ef 5a       	subi	r30, 0xAF	; 175
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	80 e0       	ldi	r24, 0x00	; 0
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	aa e7       	ldi	r26, 0x7A	; 122
    420e:	b4 e4       	ldi	r27, 0x44	; 68
    4210:	80 83       	st	Z, r24
    4212:	91 83       	std	Z+1, r25	; 0x01
    4214:	a2 83       	std	Z+2, r26	; 0x02
    4216:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4218:	8e 01       	movw	r16, r28
    421a:	03 5b       	subi	r16, 0xB3	; 179
    421c:	1f 4f       	sbci	r17, 0xFF	; 255
    421e:	fe 01       	movw	r30, r28
    4220:	ef 5a       	subi	r30, 0xAF	; 175
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	4a ef       	ldi	r20, 0xFA	; 250
    4232:	54 e4       	ldi	r21, 0x44	; 68
    4234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	f8 01       	movw	r30, r16
    423e:	80 83       	st	Z, r24
    4240:	91 83       	std	Z+1, r25	; 0x01
    4242:	a2 83       	std	Z+2, r26	; 0x02
    4244:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4246:	fe 01       	movw	r30, r28
    4248:	e3 5b       	subi	r30, 0xB3	; 179
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	60 81       	ld	r22, Z
    424e:	71 81       	ldd	r23, Z+1	; 0x01
    4250:	82 81       	ldd	r24, Z+2	; 0x02
    4252:	93 81       	ldd	r25, Z+3	; 0x03
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e8       	ldi	r20, 0x80	; 128
    425a:	5f e3       	ldi	r21, 0x3F	; 63
    425c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4260:	88 23       	and	r24, r24
    4262:	44 f4       	brge	.+16     	; 0x4274 <main+0x15ce>
		__ticks = 1;
    4264:	fe 01       	movw	r30, r28
    4266:	e5 5b       	subi	r30, 0xB5	; 181
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	91 83       	std	Z+1, r25	; 0x01
    4270:	80 83       	st	Z, r24
    4272:	64 c0       	rjmp	.+200    	; 0x433c <main+0x1696>
	else if (__tmp > 65535)
    4274:	fe 01       	movw	r30, r28
    4276:	e3 5b       	subi	r30, 0xB3	; 179
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	60 81       	ld	r22, Z
    427c:	71 81       	ldd	r23, Z+1	; 0x01
    427e:	82 81       	ldd	r24, Z+2	; 0x02
    4280:	93 81       	ldd	r25, Z+3	; 0x03
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	3f ef       	ldi	r19, 0xFF	; 255
    4286:	4f e7       	ldi	r20, 0x7F	; 127
    4288:	57 e4       	ldi	r21, 0x47	; 71
    428a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    428e:	18 16       	cp	r1, r24
    4290:	0c f0       	brlt	.+2      	; 0x4294 <main+0x15ee>
    4292:	43 c0       	rjmp	.+134    	; 0x431a <main+0x1674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4294:	fe 01       	movw	r30, r28
    4296:	ef 5a       	subi	r30, 0xAF	; 175
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	60 81       	ld	r22, Z
    429c:	71 81       	ldd	r23, Z+1	; 0x01
    429e:	82 81       	ldd	r24, Z+2	; 0x02
    42a0:	93 81       	ldd	r25, Z+3	; 0x03
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e2       	ldi	r20, 0x20	; 32
    42a8:	51 e4       	ldi	r21, 0x41	; 65
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8e 01       	movw	r16, r28
    42b4:	05 5b       	subi	r16, 0xB5	; 181
    42b6:	1f 4f       	sbci	r17, 0xFF	; 255
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	f8 01       	movw	r30, r16
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
    42ca:	1f c0       	rjmp	.+62     	; 0x430a <main+0x1664>
    42cc:	fe 01       	movw	r30, r28
    42ce:	e7 5b       	subi	r30, 0xB7	; 183
    42d0:	ff 4f       	sbci	r31, 0xFF	; 255
    42d2:	88 ec       	ldi	r24, 0xC8	; 200
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	91 83       	std	Z+1, r25	; 0x01
    42d8:	80 83       	st	Z, r24
    42da:	fe 01       	movw	r30, r28
    42dc:	e7 5b       	subi	r30, 0xB7	; 183
    42de:	ff 4f       	sbci	r31, 0xFF	; 255
    42e0:	80 81       	ld	r24, Z
    42e2:	91 81       	ldd	r25, Z+1	; 0x01
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <main+0x163e>
    42e8:	fe 01       	movw	r30, r28
    42ea:	e7 5b       	subi	r30, 0xB7	; 183
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	91 83       	std	Z+1, r25	; 0x01
    42f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f2:	de 01       	movw	r26, r28
    42f4:	a5 5b       	subi	r26, 0xB5	; 181
    42f6:	bf 4f       	sbci	r27, 0xFF	; 255
    42f8:	fe 01       	movw	r30, r28
    42fa:	e5 5b       	subi	r30, 0xB5	; 181
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	80 81       	ld	r24, Z
    4300:	91 81       	ldd	r25, Z+1	; 0x01
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	11 96       	adiw	r26, 0x01	; 1
    4306:	9c 93       	st	X, r25
    4308:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430a:	fe 01       	movw	r30, r28
    430c:	e5 5b       	subi	r30, 0xB5	; 181
    430e:	ff 4f       	sbci	r31, 0xFF	; 255
    4310:	80 81       	ld	r24, Z
    4312:	91 81       	ldd	r25, Z+1	; 0x01
    4314:	00 97       	sbiw	r24, 0x00	; 0
    4316:	d1 f6       	brne	.-76     	; 0x42cc <main+0x1626>
    4318:	27 c0       	rjmp	.+78     	; 0x4368 <main+0x16c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431a:	8e 01       	movw	r16, r28
    431c:	05 5b       	subi	r16, 0xB5	; 181
    431e:	1f 4f       	sbci	r17, 0xFF	; 255
    4320:	fe 01       	movw	r30, r28
    4322:	e3 5b       	subi	r30, 0xB3	; 179
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	60 81       	ld	r22, Z
    4328:	71 81       	ldd	r23, Z+1	; 0x01
    432a:	82 81       	ldd	r24, Z+2	; 0x02
    432c:	93 81       	ldd	r25, Z+3	; 0x03
    432e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	f8 01       	movw	r30, r16
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	80 83       	st	Z, r24
    433c:	de 01       	movw	r26, r28
    433e:	a9 5b       	subi	r26, 0xB9	; 185
    4340:	bf 4f       	sbci	r27, 0xFF	; 255
    4342:	fe 01       	movw	r30, r28
    4344:	e5 5b       	subi	r30, 0xB5	; 181
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	80 81       	ld	r24, Z
    434a:	91 81       	ldd	r25, Z+1	; 0x01
    434c:	8d 93       	st	X+, r24
    434e:	9c 93       	st	X, r25
    4350:	fe 01       	movw	r30, r28
    4352:	e9 5b       	subi	r30, 0xB9	; 185
    4354:	ff 4f       	sbci	r31, 0xFF	; 255
    4356:	80 81       	ld	r24, Z
    4358:	91 81       	ldd	r25, Z+1	; 0x01
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	f1 f7       	brne	.-4      	; 0x435a <main+0x16b4>
    435e:	fe 01       	movw	r30, r28
    4360:	e9 5b       	subi	r30, 0xB9	; 185
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	91 83       	std	Z+1, r25	; 0x01
    4366:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_voidGoToXY(1,0);
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
					LCD_voidSendString("Temp is : " );
    4370:	82 e1       	ldi	r24, 0x12	; 18
    4372:	91 e0       	ldi	r25, 0x01	; 1
    4374:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
					LCD_voidSendNumber(temp);
    4378:	fe 01       	movw	r30, r28
    437a:	eb 51       	subi	r30, 0x1B	; 27
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	80 81       	ld	r24, Z
    4380:	91 81       	ldd	r25, Z+1	; 0x01
    4382:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_voidSendNumber>
    4386:	fe 01       	movw	r30, r28
    4388:	ed 5b       	subi	r30, 0xBD	; 189
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	aa e7       	ldi	r26, 0x7A	; 122
    4392:	b4 e4       	ldi	r27, 0x44	; 68
    4394:	80 83       	st	Z, r24
    4396:	91 83       	std	Z+1, r25	; 0x01
    4398:	a2 83       	std	Z+2, r26	; 0x02
    439a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439c:	8e 01       	movw	r16, r28
    439e:	01 5c       	subi	r16, 0xC1	; 193
    43a0:	1f 4f       	sbci	r17, 0xFF	; 255
    43a2:	fe 01       	movw	r30, r28
    43a4:	ed 5b       	subi	r30, 0xBD	; 189
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	4a ef       	ldi	r20, 0xFA	; 250
    43b6:	54 e4       	ldi	r21, 0x44	; 68
    43b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	f8 01       	movw	r30, r16
    43c2:	80 83       	st	Z, r24
    43c4:	91 83       	std	Z+1, r25	; 0x01
    43c6:	a2 83       	std	Z+2, r26	; 0x02
    43c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43ca:	fe 01       	movw	r30, r28
    43cc:	ff 96       	adiw	r30, 0x3f	; 63
    43ce:	60 81       	ld	r22, Z
    43d0:	71 81       	ldd	r23, Z+1	; 0x01
    43d2:	82 81       	ldd	r24, Z+2	; 0x02
    43d4:	93 81       	ldd	r25, Z+3	; 0x03
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	40 e8       	ldi	r20, 0x80	; 128
    43dc:	5f e3       	ldi	r21, 0x3F	; 63
    43de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43e2:	88 23       	and	r24, r24
    43e4:	2c f4       	brge	.+10     	; 0x43f0 <main+0x174a>
		__ticks = 1;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	9e af       	std	Y+62, r25	; 0x3e
    43ec:	8d af       	std	Y+61, r24	; 0x3d
    43ee:	47 c0       	rjmp	.+142    	; 0x447e <main+0x17d8>
	else if (__tmp > 65535)
    43f0:	fe 01       	movw	r30, r28
    43f2:	ff 96       	adiw	r30, 0x3f	; 63
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	3f ef       	ldi	r19, 0xFF	; 255
    4400:	4f e7       	ldi	r20, 0x7F	; 127
    4402:	57 e4       	ldi	r21, 0x47	; 71
    4404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4408:	18 16       	cp	r1, r24
    440a:	6c f5       	brge	.+90     	; 0x4466 <main+0x17c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440c:	fe 01       	movw	r30, r28
    440e:	ed 5b       	subi	r30, 0xBD	; 189
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	60 81       	ld	r22, Z
    4414:	71 81       	ldd	r23, Z+1	; 0x01
    4416:	82 81       	ldd	r24, Z+2	; 0x02
    4418:	93 81       	ldd	r25, Z+3	; 0x03
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e2       	ldi	r20, 0x20	; 32
    4420:	51 e4       	ldi	r21, 0x41	; 65
    4422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	bc 01       	movw	r22, r24
    442c:	cd 01       	movw	r24, r26
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	9e af       	std	Y+62, r25	; 0x3e
    4438:	8d af       	std	Y+61, r24	; 0x3d
    443a:	0f c0       	rjmp	.+30     	; 0x445a <main+0x17b4>
    443c:	88 ec       	ldi	r24, 0xC8	; 200
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	9c af       	std	Y+60, r25	; 0x3c
    4442:	8b af       	std	Y+59, r24	; 0x3b
    4444:	8b ad       	ldd	r24, Y+59	; 0x3b
    4446:	9c ad       	ldd	r25, Y+60	; 0x3c
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	f1 f7       	brne	.-4      	; 0x4448 <main+0x17a2>
    444c:	9c af       	std	Y+60, r25	; 0x3c
    444e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4450:	8d ad       	ldd	r24, Y+61	; 0x3d
    4452:	9e ad       	ldd	r25, Y+62	; 0x3e
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	9e af       	std	Y+62, r25	; 0x3e
    4458:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445a:	8d ad       	ldd	r24, Y+61	; 0x3d
    445c:	9e ad       	ldd	r25, Y+62	; 0x3e
    445e:	00 97       	sbiw	r24, 0x00	; 0
    4460:	69 f7       	brne	.-38     	; 0x443c <main+0x1796>
    4462:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4466:	fe 01       	movw	r30, r28
    4468:	ff 96       	adiw	r30, 0x3f	; 63
    446a:	60 81       	ld	r22, Z
    446c:	71 81       	ldd	r23, Z+1	; 0x01
    446e:	82 81       	ldd	r24, Z+2	; 0x02
    4470:	93 81       	ldd	r25, Z+3	; 0x03
    4472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	9e af       	std	Y+62, r25	; 0x3e
    447c:	8d af       	std	Y+61, r24	; 0x3d
    447e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4480:	9e ad       	ldd	r25, Y+62	; 0x3e
    4482:	9a af       	std	Y+58, r25	; 0x3a
    4484:	89 af       	std	Y+57, r24	; 0x39
    4486:	89 ad       	ldd	r24, Y+57	; 0x39
    4488:	9a ad       	ldd	r25, Y+58	; 0x3a
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	f1 f7       	brne	.-4      	; 0x448a <main+0x17e4>
    448e:	9a af       	std	Y+58, r25	; 0x3a
    4490:	89 af       	std	Y+57, r24	; 0x39
    4492:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
					_delay_ms(1000);
					break;
        			case 4 :
					M_UART_voidSendData(4);
    4496:	84 e0       	ldi	r24, 0x04	; 4
    4498:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
    449c:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>

			 	}
        	break;

        case 3:
        	LCD_voidSendString("light:7");
    44a0:	81 e4       	ldi	r24, 0x41	; 65
    44a2:	91 e0       	ldi	r25, 0x01	; 1
    44a4:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
			LCD_voidGoToXY(0,8);
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	68 e0       	ldi	r22, 0x08	; 8
    44ac:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			LCD_voidSendString("fan :8");
    44b0:	89 e4       	ldi	r24, 0x49	; 73
    44b2:	91 e0       	ldi	r25, 0x01	; 1
    44b4:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
			LCD_voidGoToXY(1,0);
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	60 e0       	ldi	r22, 0x00	; 0
    44bc:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
			keypressed = 255;
    44c0:	fe 01       	movw	r30, r28
    44c2:	e8 50       	subi	r30, 0x08	; 8
    44c4:	ff 4f       	sbci	r31, 0xFF	; 255
    44c6:	8f ef       	ldi	r24, 0xFF	; 255
    44c8:	80 83       	st	Z, r24
			do
			{
				keypressed = KPD_u8GetPressedKey();
    44ca:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <KPD_u8GetPressedKey>
    44ce:	fe 01       	movw	r30, r28
    44d0:	e8 50       	subi	r30, 0x08	; 8
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	80 83       	st	Z, r24
			}while(keypressed == 255);
    44d6:	fe 01       	movw	r30, r28
    44d8:	e8 50       	subi	r30, 0x08	; 8
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	80 81       	ld	r24, Z
    44de:	8f 3f       	cpi	r24, 0xFF	; 255
    44e0:	a1 f3       	breq	.-24     	; 0x44ca <main+0x1824>
			switch(keypressed)
    44e2:	fe 01       	movw	r30, r28
    44e4:	e8 50       	subi	r30, 0x08	; 8
    44e6:	ff 4f       	sbci	r31, 0xFF	; 255
    44e8:	80 81       	ld	r24, Z
    44ea:	28 2f       	mov	r18, r24
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	c7 50       	subi	r28, 0x07	; 7
    44f0:	df 4f       	sbci	r29, 0xFF	; 255
    44f2:	39 83       	std	Y+1, r19	; 0x01
    44f4:	28 83       	st	Y, r18
    44f6:	c9 5f       	subi	r28, 0xF9	; 249
    44f8:	d0 40       	sbci	r29, 0x00	; 0
    44fa:	c7 50       	subi	r28, 0x07	; 7
    44fc:	df 4f       	sbci	r29, 0xFF	; 255
    44fe:	88 81       	ld	r24, Y
    4500:	99 81       	ldd	r25, Y+1	; 0x01
    4502:	c9 5f       	subi	r28, 0xF9	; 249
    4504:	d0 40       	sbci	r29, 0x00	; 0
    4506:	87 30       	cpi	r24, 0x07	; 7
    4508:	91 05       	cpc	r25, r1
    450a:	09 f4       	brne	.+2      	; 0x450e <main+0x1868>
    450c:	43 c1       	rjmp	.+646    	; 0x4794 <main+0x1aee>
    450e:	c7 50       	subi	r28, 0x07	; 7
    4510:	df 4f       	sbci	r29, 0xFF	; 255
    4512:	e8 81       	ld	r30, Y
    4514:	f9 81       	ldd	r31, Y+1	; 0x01
    4516:	c9 5f       	subi	r28, 0xF9	; 249
    4518:	d0 40       	sbci	r29, 0x00	; 0
    451a:	e8 30       	cpi	r30, 0x08	; 8
    451c:	f1 05       	cpc	r31, r1
    451e:	11 f0       	breq	.+4      	; 0x4524 <main+0x187e>
    4520:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
				{
				case 8 :
					LCD_voidClearDisplay();
    4524:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
					M_UART_voidSendData(8);
    4528:	88 e0       	ldi	r24, 0x08	; 8
    452a:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
					u16 reading = ADC_u16GetAnalogReadSYNC(0);
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <ADC_u16GetAnalogReadSYNC>
    4534:	fe 01       	movw	r30, r28
    4536:	ed 51       	subi	r30, 0x1D	; 29
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	80 83       	st	Z, r24
					reading =	(reading*5000UL)/1024;
    453e:	fe 01       	movw	r30, r28
    4540:	ed 51       	subi	r30, 0x1D	; 29
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	80 81       	ld	r24, Z
    4546:	91 81       	ldd	r25, Z+1	; 0x01
    4548:	cc 01       	movw	r24, r24
    454a:	a0 e0       	ldi	r26, 0x00	; 0
    454c:	b0 e0       	ldi	r27, 0x00	; 0
    454e:	28 e8       	ldi	r18, 0x88	; 136
    4550:	33 e1       	ldi	r19, 0x13	; 19
    4552:	40 e0       	ldi	r20, 0x00	; 0
    4554:	50 e0       	ldi	r21, 0x00	; 0
    4556:	bc 01       	movw	r22, r24
    4558:	cd 01       	movw	r24, r26
    455a:	0e 94 c8 24 	call	0x4990	; 0x4990 <__mulsi3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	07 2e       	mov	r0, r23
    4564:	7a e0       	ldi	r23, 0x0A	; 10
    4566:	b6 95       	lsr	r27
    4568:	a7 95       	ror	r26
    456a:	97 95       	ror	r25
    456c:	87 95       	ror	r24
    456e:	7a 95       	dec	r23
    4570:	d1 f7       	brne	.-12     	; 0x4566 <main+0x18c0>
    4572:	70 2d       	mov	r23, r0
    4574:	fe 01       	movw	r30, r28
    4576:	ed 51       	subi	r30, 0x1D	; 29
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	91 83       	std	Z+1, r25	; 0x01
    457c:	80 83       	st	Z, r24
					u16 temp = reading/10;
    457e:	8e 01       	movw	r16, r28
    4580:	0f 51       	subi	r16, 0x1F	; 31
    4582:	1f 4f       	sbci	r17, 0xFF	; 255
    4584:	fe 01       	movw	r30, r28
    4586:	ed 51       	subi	r30, 0x1D	; 29
    4588:	ff 4f       	sbci	r31, 0xFF	; 255
    458a:	80 81       	ld	r24, Z
    458c:	91 81       	ldd	r25, Z+1	; 0x01
    458e:	2a e0       	ldi	r18, 0x0A	; 10
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	b9 01       	movw	r22, r18
    4594:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__udivmodhi4>
    4598:	cb 01       	movw	r24, r22
    459a:	f8 01       	movw	r30, r16
    459c:	91 83       	std	Z+1, r25	; 0x01
    459e:	80 83       	st	Z, r24
					LCD_voidSendString("FAN IS ON ");
    45a0:	87 e0       	ldi	r24, 0x07	; 7
    45a2:	91 e0       	ldi	r25, 0x01	; 1
    45a4:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	aa e7       	ldi	r26, 0x7A	; 122
    45ae:	b4 e4       	ldi	r27, 0x44	; 68
    45b0:	8d ab       	std	Y+53, r24	; 0x35
    45b2:	9e ab       	std	Y+54, r25	; 0x36
    45b4:	af ab       	std	Y+55, r26	; 0x37
    45b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b8:	6d a9       	ldd	r22, Y+53	; 0x35
    45ba:	7e a9       	ldd	r23, Y+54	; 0x36
    45bc:	8f a9       	ldd	r24, Y+55	; 0x37
    45be:	98 ad       	ldd	r25, Y+56	; 0x38
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	4a ef       	ldi	r20, 0xFA	; 250
    45c6:	54 e4       	ldi	r21, 0x44	; 68
    45c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	89 ab       	std	Y+49, r24	; 0x31
    45d2:	9a ab       	std	Y+50, r25	; 0x32
    45d4:	ab ab       	std	Y+51, r26	; 0x33
    45d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    45d8:	69 a9       	ldd	r22, Y+49	; 0x31
    45da:	7a a9       	ldd	r23, Y+50	; 0x32
    45dc:	8b a9       	ldd	r24, Y+51	; 0x33
    45de:	9c a9       	ldd	r25, Y+52	; 0x34
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	40 e8       	ldi	r20, 0x80	; 128
    45e6:	5f e3       	ldi	r21, 0x3F	; 63
    45e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ec:	88 23       	and	r24, r24
    45ee:	2c f4       	brge	.+10     	; 0x45fa <main+0x1954>
		__ticks = 1;
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	98 ab       	std	Y+48, r25	; 0x30
    45f6:	8f a7       	std	Y+47, r24	; 0x2f
    45f8:	3f c0       	rjmp	.+126    	; 0x4678 <main+0x19d2>
	else if (__tmp > 65535)
    45fa:	69 a9       	ldd	r22, Y+49	; 0x31
    45fc:	7a a9       	ldd	r23, Y+50	; 0x32
    45fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4600:	9c a9       	ldd	r25, Y+52	; 0x34
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	3f ef       	ldi	r19, 0xFF	; 255
    4606:	4f e7       	ldi	r20, 0x7F	; 127
    4608:	57 e4       	ldi	r21, 0x47	; 71
    460a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    460e:	18 16       	cp	r1, r24
    4610:	4c f5       	brge	.+82     	; 0x4664 <main+0x19be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4612:	6d a9       	ldd	r22, Y+53	; 0x35
    4614:	7e a9       	ldd	r23, Y+54	; 0x36
    4616:	8f a9       	ldd	r24, Y+55	; 0x37
    4618:	98 ad       	ldd	r25, Y+56	; 0x38
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	40 e2       	ldi	r20, 0x20	; 32
    4620:	51 e4       	ldi	r21, 0x41	; 65
    4622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	bc 01       	movw	r22, r24
    462c:	cd 01       	movw	r24, r26
    462e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	98 ab       	std	Y+48, r25	; 0x30
    4638:	8f a7       	std	Y+47, r24	; 0x2f
    463a:	0f c0       	rjmp	.+30     	; 0x465a <main+0x19b4>
    463c:	88 ec       	ldi	r24, 0xC8	; 200
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	9e a7       	std	Y+46, r25	; 0x2e
    4642:	8d a7       	std	Y+45, r24	; 0x2d
    4644:	8d a5       	ldd	r24, Y+45	; 0x2d
    4646:	9e a5       	ldd	r25, Y+46	; 0x2e
    4648:	01 97       	sbiw	r24, 0x01	; 1
    464a:	f1 f7       	brne	.-4      	; 0x4648 <main+0x19a2>
    464c:	9e a7       	std	Y+46, r25	; 0x2e
    464e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4650:	8f a5       	ldd	r24, Y+47	; 0x2f
    4652:	98 a9       	ldd	r25, Y+48	; 0x30
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	98 ab       	std	Y+48, r25	; 0x30
    4658:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465a:	8f a5       	ldd	r24, Y+47	; 0x2f
    465c:	98 a9       	ldd	r25, Y+48	; 0x30
    465e:	00 97       	sbiw	r24, 0x00	; 0
    4660:	69 f7       	brne	.-38     	; 0x463c <main+0x1996>
    4662:	14 c0       	rjmp	.+40     	; 0x468c <main+0x19e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4664:	69 a9       	ldd	r22, Y+49	; 0x31
    4666:	7a a9       	ldd	r23, Y+50	; 0x32
    4668:	8b a9       	ldd	r24, Y+51	; 0x33
    466a:	9c a9       	ldd	r25, Y+52	; 0x34
    466c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	98 ab       	std	Y+48, r25	; 0x30
    4676:	8f a7       	std	Y+47, r24	; 0x2f
    4678:	8f a5       	ldd	r24, Y+47	; 0x2f
    467a:	98 a9       	ldd	r25, Y+48	; 0x30
    467c:	9c a7       	std	Y+44, r25	; 0x2c
    467e:	8b a7       	std	Y+43, r24	; 0x2b
    4680:	8b a5       	ldd	r24, Y+43	; 0x2b
    4682:	9c a5       	ldd	r25, Y+44	; 0x2c
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	f1 f7       	brne	.-4      	; 0x4684 <main+0x19de>
    4688:	9c a7       	std	Y+44, r25	; 0x2c
    468a:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					LCD_voidGoToXY(1,0);
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	60 e0       	ldi	r22, 0x00	; 0
    4690:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
					LCD_voidSendString("Temp is : " );
    4694:	82 e1       	ldi	r24, 0x12	; 18
    4696:	91 e0       	ldi	r25, 0x01	; 1
    4698:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
					LCD_voidSendNumber(temp);
    469c:	fe 01       	movw	r30, r28
    469e:	ef 51       	subi	r30, 0x1F	; 31
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	80 81       	ld	r24, Z
    46a4:	91 81       	ldd	r25, Z+1	; 0x01
    46a6:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_voidSendNumber>
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	aa e7       	ldi	r26, 0x7A	; 122
    46b0:	b4 e4       	ldi	r27, 0x44	; 68
    46b2:	8f a3       	std	Y+39, r24	; 0x27
    46b4:	98 a7       	std	Y+40, r25	; 0x28
    46b6:	a9 a7       	std	Y+41, r26	; 0x29
    46b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ba:	6f a1       	ldd	r22, Y+39	; 0x27
    46bc:	78 a5       	ldd	r23, Y+40	; 0x28
    46be:	89 a5       	ldd	r24, Y+41	; 0x29
    46c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	4a ef       	ldi	r20, 0xFA	; 250
    46c8:	54 e4       	ldi	r21, 0x44	; 68
    46ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ce:	dc 01       	movw	r26, r24
    46d0:	cb 01       	movw	r24, r22
    46d2:	8b a3       	std	Y+35, r24	; 0x23
    46d4:	9c a3       	std	Y+36, r25	; 0x24
    46d6:	ad a3       	std	Y+37, r26	; 0x25
    46d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46da:	6b a1       	ldd	r22, Y+35	; 0x23
    46dc:	7c a1       	ldd	r23, Y+36	; 0x24
    46de:	8d a1       	ldd	r24, Y+37	; 0x25
    46e0:	9e a1       	ldd	r25, Y+38	; 0x26
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	40 e8       	ldi	r20, 0x80	; 128
    46e8:	5f e3       	ldi	r21, 0x3F	; 63
    46ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46ee:	88 23       	and	r24, r24
    46f0:	2c f4       	brge	.+10     	; 0x46fc <main+0x1a56>
		__ticks = 1;
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	9a a3       	std	Y+34, r25	; 0x22
    46f8:	89 a3       	std	Y+33, r24	; 0x21
    46fa:	40 c0       	rjmp	.+128    	; 0x477c <main+0x1ad6>
	else if (__tmp > 65535)
    46fc:	6b a1       	ldd	r22, Y+35	; 0x23
    46fe:	7c a1       	ldd	r23, Y+36	; 0x24
    4700:	8d a1       	ldd	r24, Y+37	; 0x25
    4702:	9e a1       	ldd	r25, Y+38	; 0x26
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	3f ef       	ldi	r19, 0xFF	; 255
    4708:	4f e7       	ldi	r20, 0x7F	; 127
    470a:	57 e4       	ldi	r21, 0x47	; 71
    470c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4710:	18 16       	cp	r1, r24
    4712:	54 f5       	brge	.+84     	; 0x4768 <main+0x1ac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4714:	6f a1       	ldd	r22, Y+39	; 0x27
    4716:	78 a5       	ldd	r23, Y+40	; 0x28
    4718:	89 a5       	ldd	r24, Y+41	; 0x29
    471a:	9a a5       	ldd	r25, Y+42	; 0x2a
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	40 e2       	ldi	r20, 0x20	; 32
    4722:	51 e4       	ldi	r21, 0x41	; 65
    4724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	bc 01       	movw	r22, r24
    472e:	cd 01       	movw	r24, r26
    4730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	9a a3       	std	Y+34, r25	; 0x22
    473a:	89 a3       	std	Y+33, r24	; 0x21
    473c:	0f c0       	rjmp	.+30     	; 0x475c <main+0x1ab6>
    473e:	88 ec       	ldi	r24, 0xC8	; 200
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	98 a3       	std	Y+32, r25	; 0x20
    4744:	8f 8f       	std	Y+31, r24	; 0x1f
    4746:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4748:	98 a1       	ldd	r25, Y+32	; 0x20
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	f1 f7       	brne	.-4      	; 0x474a <main+0x1aa4>
    474e:	98 a3       	std	Y+32, r25	; 0x20
    4750:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4752:	89 a1       	ldd	r24, Y+33	; 0x21
    4754:	9a a1       	ldd	r25, Y+34	; 0x22
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	9a a3       	std	Y+34, r25	; 0x22
    475a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    475c:	89 a1       	ldd	r24, Y+33	; 0x21
    475e:	9a a1       	ldd	r25, Y+34	; 0x22
    4760:	00 97       	sbiw	r24, 0x00	; 0
    4762:	69 f7       	brne	.-38     	; 0x473e <main+0x1a98>
    4764:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4768:	6b a1       	ldd	r22, Y+35	; 0x23
    476a:	7c a1       	ldd	r23, Y+36	; 0x24
    476c:	8d a1       	ldd	r24, Y+37	; 0x25
    476e:	9e a1       	ldd	r25, Y+38	; 0x26
    4770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	9a a3       	std	Y+34, r25	; 0x22
    477a:	89 a3       	std	Y+33, r24	; 0x21
    477c:	89 a1       	ldd	r24, Y+33	; 0x21
    477e:	9a a1       	ldd	r25, Y+34	; 0x22
    4780:	9e 8f       	std	Y+30, r25	; 0x1e
    4782:	8d 8f       	std	Y+29, r24	; 0x1d
    4784:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4786:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	f1 f7       	brne	.-4      	; 0x4788 <main+0x1ae2>
    478c:	9e 8f       	std	Y+30, r25	; 0x1e
    478e:	8d 8f       	std	Y+29, r24	; 0x1d
    4790:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
					_delay_ms(1000);
					break;
				case 7 :
					M_UART_voidSendData(7);
    4794:	87 e0       	ldi	r24, 0x07	; 7
    4796:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
    479a:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>
        	break;
        }
	}
	else
	{
		LCD_voidClearDisplay();
    479e:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_voidClearDisplay>
		LCD_voidSendString("Wrong Pass ");
    47a2:	80 e5       	ldi	r24, 0x50	; 80
    47a4:	91 e0       	ldi	r25, 0x01	; 1
    47a6:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	aa ef       	ldi	r26, 0xFA	; 250
    47b0:	b3 e4       	ldi	r27, 0x43	; 67
    47b2:	89 8f       	std	Y+25, r24	; 0x19
    47b4:	9a 8f       	std	Y+26, r25	; 0x1a
    47b6:	ab 8f       	std	Y+27, r26	; 0x1b
    47b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ba:	69 8d       	ldd	r22, Y+25	; 0x19
    47bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	4a ef       	ldi	r20, 0xFA	; 250
    47c8:	54 e4       	ldi	r21, 0x44	; 68
    47ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	8d 8b       	std	Y+21, r24	; 0x15
    47d4:	9e 8b       	std	Y+22, r25	; 0x16
    47d6:	af 8b       	std	Y+23, r26	; 0x17
    47d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47da:	6d 89       	ldd	r22, Y+21	; 0x15
    47dc:	7e 89       	ldd	r23, Y+22	; 0x16
    47de:	8f 89       	ldd	r24, Y+23	; 0x17
    47e0:	98 8d       	ldd	r25, Y+24	; 0x18
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e8       	ldi	r20, 0x80	; 128
    47e8:	5f e3       	ldi	r21, 0x3F	; 63
    47ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47ee:	88 23       	and	r24, r24
    47f0:	2c f4       	brge	.+10     	; 0x47fc <main+0x1b56>
		__ticks = 1;
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	9c 8b       	std	Y+20, r25	; 0x14
    47f8:	8b 8b       	std	Y+19, r24	; 0x13
    47fa:	3f c0       	rjmp	.+126    	; 0x487a <main+0x1bd4>
	else if (__tmp > 65535)
    47fc:	6d 89       	ldd	r22, Y+21	; 0x15
    47fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4800:	8f 89       	ldd	r24, Y+23	; 0x17
    4802:	98 8d       	ldd	r25, Y+24	; 0x18
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	3f ef       	ldi	r19, 0xFF	; 255
    4808:	4f e7       	ldi	r20, 0x7F	; 127
    480a:	57 e4       	ldi	r21, 0x47	; 71
    480c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4810:	18 16       	cp	r1, r24
    4812:	4c f5       	brge	.+82     	; 0x4866 <main+0x1bc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4814:	69 8d       	ldd	r22, Y+25	; 0x19
    4816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    481a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e2       	ldi	r20, 0x20	; 32
    4822:	51 e4       	ldi	r21, 0x41	; 65
    4824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4834:	dc 01       	movw	r26, r24
    4836:	cb 01       	movw	r24, r22
    4838:	9c 8b       	std	Y+20, r25	; 0x14
    483a:	8b 8b       	std	Y+19, r24	; 0x13
    483c:	0f c0       	rjmp	.+30     	; 0x485c <main+0x1bb6>
    483e:	88 ec       	ldi	r24, 0xC8	; 200
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	9a 8b       	std	Y+18, r25	; 0x12
    4844:	89 8b       	std	Y+17, r24	; 0x11
    4846:	89 89       	ldd	r24, Y+17	; 0x11
    4848:	9a 89       	ldd	r25, Y+18	; 0x12
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	f1 f7       	brne	.-4      	; 0x484a <main+0x1ba4>
    484e:	9a 8b       	std	Y+18, r25	; 0x12
    4850:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4852:	8b 89       	ldd	r24, Y+19	; 0x13
    4854:	9c 89       	ldd	r25, Y+20	; 0x14
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	9c 8b       	std	Y+20, r25	; 0x14
    485a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    485c:	8b 89       	ldd	r24, Y+19	; 0x13
    485e:	9c 89       	ldd	r25, Y+20	; 0x14
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	69 f7       	brne	.-38     	; 0x483e <main+0x1b98>
    4864:	14 c0       	rjmp	.+40     	; 0x488e <main+0x1be8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4866:	6d 89       	ldd	r22, Y+21	; 0x15
    4868:	7e 89       	ldd	r23, Y+22	; 0x16
    486a:	8f 89       	ldd	r24, Y+23	; 0x17
    486c:	98 8d       	ldd	r25, Y+24	; 0x18
    486e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	9c 8b       	std	Y+20, r25	; 0x14
    4878:	8b 8b       	std	Y+19, r24	; 0x13
    487a:	8b 89       	ldd	r24, Y+19	; 0x13
    487c:	9c 89       	ldd	r25, Y+20	; 0x14
    487e:	98 8b       	std	Y+16, r25	; 0x10
    4880:	8f 87       	std	Y+15, r24	; 0x0f
    4882:	8f 85       	ldd	r24, Y+15	; 0x0f
    4884:	98 89       	ldd	r25, Y+16	; 0x10
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	f1 f7       	brne	.-4      	; 0x4886 <main+0x1be0>
    488a:	98 8b       	std	Y+16, r25	; 0x10
    488c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_voidGoToXY(1,0);
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_voidGoToXY>
		LCD_voidSendString("try again");
    4896:	8c e5       	ldi	r24, 0x5C	; 92
    4898:	91 e0       	ldi	r25, 0x01	; 1
    489a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidSendString>
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	aa ef       	ldi	r26, 0xFA	; 250
    48a4:	b3 e4       	ldi	r27, 0x43	; 67
    48a6:	8b 87       	std	Y+11, r24	; 0x0b
    48a8:	9c 87       	std	Y+12, r25	; 0x0c
    48aa:	ad 87       	std	Y+13, r26	; 0x0d
    48ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    48b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    48b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	4a ef       	ldi	r20, 0xFA	; 250
    48bc:	54 e4       	ldi	r21, 0x44	; 68
    48be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	8f 83       	std	Y+7, r24	; 0x07
    48c8:	98 87       	std	Y+8, r25	; 0x08
    48ca:	a9 87       	std	Y+9, r26	; 0x09
    48cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48ce:	6f 81       	ldd	r22, Y+7	; 0x07
    48d0:	78 85       	ldd	r23, Y+8	; 0x08
    48d2:	89 85       	ldd	r24, Y+9	; 0x09
    48d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	40 e8       	ldi	r20, 0x80	; 128
    48dc:	5f e3       	ldi	r21, 0x3F	; 63
    48de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48e2:	88 23       	and	r24, r24
    48e4:	2c f4       	brge	.+10     	; 0x48f0 <main+0x1c4a>
		__ticks = 1;
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	9e 83       	std	Y+6, r25	; 0x06
    48ec:	8d 83       	std	Y+5, r24	; 0x05
    48ee:	3f c0       	rjmp	.+126    	; 0x496e <main+0x1cc8>
	else if (__tmp > 65535)
    48f0:	6f 81       	ldd	r22, Y+7	; 0x07
    48f2:	78 85       	ldd	r23, Y+8	; 0x08
    48f4:	89 85       	ldd	r24, Y+9	; 0x09
    48f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	3f ef       	ldi	r19, 0xFF	; 255
    48fc:	4f e7       	ldi	r20, 0x7F	; 127
    48fe:	57 e4       	ldi	r21, 0x47	; 71
    4900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4904:	18 16       	cp	r1, r24
    4906:	4c f5       	brge	.+82     	; 0x495a <main+0x1cb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4908:	6b 85       	ldd	r22, Y+11	; 0x0b
    490a:	7c 85       	ldd	r23, Y+12	; 0x0c
    490c:	8d 85       	ldd	r24, Y+13	; 0x0d
    490e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4910:	20 e0       	ldi	r18, 0x00	; 0
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e2       	ldi	r20, 0x20	; 32
    4916:	51 e4       	ldi	r21, 0x41	; 65
    4918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    491c:	dc 01       	movw	r26, r24
    491e:	cb 01       	movw	r24, r22
    4920:	bc 01       	movw	r22, r24
    4922:	cd 01       	movw	r24, r26
    4924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4928:	dc 01       	movw	r26, r24
    492a:	cb 01       	movw	r24, r22
    492c:	9e 83       	std	Y+6, r25	; 0x06
    492e:	8d 83       	std	Y+5, r24	; 0x05
    4930:	0f c0       	rjmp	.+30     	; 0x4950 <main+0x1caa>
    4932:	88 ec       	ldi	r24, 0xC8	; 200
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	9c 83       	std	Y+4, r25	; 0x04
    4938:	8b 83       	std	Y+3, r24	; 0x03
    493a:	8b 81       	ldd	r24, Y+3	; 0x03
    493c:	9c 81       	ldd	r25, Y+4	; 0x04
    493e:	01 97       	sbiw	r24, 0x01	; 1
    4940:	f1 f7       	brne	.-4      	; 0x493e <main+0x1c98>
    4942:	9c 83       	std	Y+4, r25	; 0x04
    4944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4946:	8d 81       	ldd	r24, Y+5	; 0x05
    4948:	9e 81       	ldd	r25, Y+6	; 0x06
    494a:	01 97       	sbiw	r24, 0x01	; 1
    494c:	9e 83       	std	Y+6, r25	; 0x06
    494e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4950:	8d 81       	ldd	r24, Y+5	; 0x05
    4952:	9e 81       	ldd	r25, Y+6	; 0x06
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	69 f7       	brne	.-38     	; 0x4932 <main+0x1c8c>
    4958:	14 c0       	rjmp	.+40     	; 0x4982 <main+0x1cdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    495a:	6f 81       	ldd	r22, Y+7	; 0x07
    495c:	78 85       	ldd	r23, Y+8	; 0x08
    495e:	89 85       	ldd	r24, Y+9	; 0x09
    4960:	9a 85       	ldd	r25, Y+10	; 0x0a
    4962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	9e 83       	std	Y+6, r25	; 0x06
    496c:	8d 83       	std	Y+5, r24	; 0x05
    496e:	8d 81       	ldd	r24, Y+5	; 0x05
    4970:	9e 81       	ldd	r25, Y+6	; 0x06
    4972:	9a 83       	std	Y+2, r25	; 0x02
    4974:	89 83       	std	Y+1, r24	; 0x01
    4976:	89 81       	ldd	r24, Y+1	; 0x01
    4978:	9a 81       	ldd	r25, Y+2	; 0x02
    497a:	01 97       	sbiw	r24, 0x01	; 1
    497c:	f1 f7       	brne	.-4      	; 0x497a <main+0x1cd4>
    497e:	9a 83       	std	Y+2, r25	; 0x02
    4980:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		Local_u8Flag ++;
    4982:	80 91 99 01 	lds	r24, 0x0199
    4986:	8f 5f       	subi	r24, 0xFF	; 255
    4988:	80 93 99 01 	sts	0x0199, r24
    498c:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <main+0x118>

00004990 <__mulsi3>:
    4990:	62 9f       	mul	r22, r18
    4992:	d0 01       	movw	r26, r0
    4994:	73 9f       	mul	r23, r19
    4996:	f0 01       	movw	r30, r0
    4998:	82 9f       	mul	r24, r18
    499a:	e0 0d       	add	r30, r0
    499c:	f1 1d       	adc	r31, r1
    499e:	64 9f       	mul	r22, r20
    49a0:	e0 0d       	add	r30, r0
    49a2:	f1 1d       	adc	r31, r1
    49a4:	92 9f       	mul	r25, r18
    49a6:	f0 0d       	add	r31, r0
    49a8:	83 9f       	mul	r24, r19
    49aa:	f0 0d       	add	r31, r0
    49ac:	74 9f       	mul	r23, r20
    49ae:	f0 0d       	add	r31, r0
    49b0:	65 9f       	mul	r22, r21
    49b2:	f0 0d       	add	r31, r0
    49b4:	99 27       	eor	r25, r25
    49b6:	72 9f       	mul	r23, r18
    49b8:	b0 0d       	add	r27, r0
    49ba:	e1 1d       	adc	r30, r1
    49bc:	f9 1f       	adc	r31, r25
    49be:	63 9f       	mul	r22, r19
    49c0:	b0 0d       	add	r27, r0
    49c2:	e1 1d       	adc	r30, r1
    49c4:	f9 1f       	adc	r31, r25
    49c6:	bd 01       	movw	r22, r26
    49c8:	cf 01       	movw	r24, r30
    49ca:	11 24       	eor	r1, r1
    49cc:	08 95       	ret

000049ce <__udivmodhi4>:
    49ce:	aa 1b       	sub	r26, r26
    49d0:	bb 1b       	sub	r27, r27
    49d2:	51 e1       	ldi	r21, 0x11	; 17
    49d4:	07 c0       	rjmp	.+14     	; 0x49e4 <__udivmodhi4_ep>

000049d6 <__udivmodhi4_loop>:
    49d6:	aa 1f       	adc	r26, r26
    49d8:	bb 1f       	adc	r27, r27
    49da:	a6 17       	cp	r26, r22
    49dc:	b7 07       	cpc	r27, r23
    49de:	10 f0       	brcs	.+4      	; 0x49e4 <__udivmodhi4_ep>
    49e0:	a6 1b       	sub	r26, r22
    49e2:	b7 0b       	sbc	r27, r23

000049e4 <__udivmodhi4_ep>:
    49e4:	88 1f       	adc	r24, r24
    49e6:	99 1f       	adc	r25, r25
    49e8:	5a 95       	dec	r21
    49ea:	a9 f7       	brne	.-22     	; 0x49d6 <__udivmodhi4_loop>
    49ec:	80 95       	com	r24
    49ee:	90 95       	com	r25
    49f0:	bc 01       	movw	r22, r24
    49f2:	cd 01       	movw	r24, r26
    49f4:	08 95       	ret

000049f6 <__prologue_saves__>:
    49f6:	2f 92       	push	r2
    49f8:	3f 92       	push	r3
    49fa:	4f 92       	push	r4
    49fc:	5f 92       	push	r5
    49fe:	6f 92       	push	r6
    4a00:	7f 92       	push	r7
    4a02:	8f 92       	push	r8
    4a04:	9f 92       	push	r9
    4a06:	af 92       	push	r10
    4a08:	bf 92       	push	r11
    4a0a:	cf 92       	push	r12
    4a0c:	df 92       	push	r13
    4a0e:	ef 92       	push	r14
    4a10:	ff 92       	push	r15
    4a12:	0f 93       	push	r16
    4a14:	1f 93       	push	r17
    4a16:	cf 93       	push	r28
    4a18:	df 93       	push	r29
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
    4a1e:	ca 1b       	sub	r28, r26
    4a20:	db 0b       	sbc	r29, r27
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	f8 94       	cli
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	cd bf       	out	0x3d, r28	; 61
    4a2c:	09 94       	ijmp

00004a2e <__epilogue_restores__>:
    4a2e:	2a 88       	ldd	r2, Y+18	; 0x12
    4a30:	39 88       	ldd	r3, Y+17	; 0x11
    4a32:	48 88       	ldd	r4, Y+16	; 0x10
    4a34:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a36:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a38:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a40:	b9 84       	ldd	r11, Y+9	; 0x09
    4a42:	c8 84       	ldd	r12, Y+8	; 0x08
    4a44:	df 80       	ldd	r13, Y+7	; 0x07
    4a46:	ee 80       	ldd	r14, Y+6	; 0x06
    4a48:	fd 80       	ldd	r15, Y+5	; 0x05
    4a4a:	0c 81       	ldd	r16, Y+4	; 0x04
    4a4c:	1b 81       	ldd	r17, Y+3	; 0x03
    4a4e:	aa 81       	ldd	r26, Y+2	; 0x02
    4a50:	b9 81       	ldd	r27, Y+1	; 0x01
    4a52:	ce 0f       	add	r28, r30
    4a54:	d1 1d       	adc	r29, r1
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	f8 94       	cli
    4a5a:	de bf       	out	0x3e, r29	; 62
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	cd bf       	out	0x3d, r28	; 61
    4a60:	ed 01       	movw	r28, r26
    4a62:	08 95       	ret

00004a64 <_exit>:
    4a64:	f8 94       	cli

00004a66 <__stop_program>:
    4a66:	ff cf       	rjmp	.-2      	; 0x4a66 <__stop_program>
