
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003300  00003394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800082  00800082  000033b6  2**0
                  ALLOC
  3 .stab         000041e8  00000000  00000000  000033b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d87  00000000  00000000  000075a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009327  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009467  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000095d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ceb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__vector_1>
       8:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_2>
       c:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_15>
      40:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <main>
      8a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 19 	jmp	0x328e	; 0x328e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 19 	jmp	0x328e	; 0x328e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidEnable>:
#include "WDT_interface.h"
#include "WDT_private.h"
#include "WDT_config.h"

void WDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR, WDTCR_WDE);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	/*Set WDTOE and WDE in the same operation*/
	WDTCR = (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);	
     b6a:	e1 e4       	ldi	r30, 0x41	; 65
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 83       	st	Z, r24
	/*Within The Next Four Clock Cycles, Write Logic 0 to WDE*/
	WDTCR = 0;
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <WDT_voidSleep>:


void WDT_voidSleep(u8 Copy_u8SleepTimeOut)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SleepTimeOut < MAX_NUMBER_FOR_PRESCALER)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	78 f4       	brcc	.+30     	; 0xbae <WDT_voidSleep+0x30>
	{
		WDTCR &= PRESCALER_RESET_MASK;
     b90:	a1 e4       	ldi	r26, 0x41	; 65
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e1 e4       	ldi	r30, 0x41	; 65
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	8c 93       	st	X, r24
		WDTCR |= Copy_u8SleepTimeOut;
     b9e:	a1 e4       	ldi	r26, 0x41	; 65
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e1 e4       	ldi	r30, 0x41	; 65
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	90 81       	ld	r25, Z
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24
	}
	else
	{
		/* An Error To Be Displayed */
	}
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <M_UART_voidInit>:
#include"UART_Private.h"
#include"Uart_Config.h"

void (*ptr)(void) = NULL;
void M_UART_voidInit(void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	//enable rx and tx
    SET_BIT(UCSRB_REG,UCSRB_TXEN);
    SET_BIT(UCSRB_REG,UCSRB_RXEN);*/
    /**AMGAD SAMIR **/

	u8 Local_UCSRC = 0;
     bc0:	19 82       	std	Y+1, r1	; 0x01
	/*select UCSRC_REG */
	SET_BIT(Local_UCSRC,7);
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	89 83       	std	Y+1, r24	; 0x01

	/*select async mode */
	CLR_BIT(Local_UCSRC,6);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	8f 7b       	andi	r24, 0xBF	; 191
     bcc:	89 83       	std	Y+1, r24	; 0x01

	/*parity mode (disable)*/
    CLR_BIT(Local_UCSRC,5);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	8f 7d       	andi	r24, 0xDF	; 223
     bd2:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_UCSRC,4);
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	89 83       	std	Y+1, r24	; 0x01

    /*select one stop bit*/
    CLR_BIT(Local_UCSRC,3);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	87 7f       	andi	r24, 0xF7	; 247
     bde:	89 83       	std	Y+1, r24	; 0x01

    /*character size 8 bits*/
    SET_BIT(Local_UCSRC,2);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_UCSRC,1);
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(UCSRB_REG,UCSRB_UCSZ2);
     bec:	aa e2       	ldi	r26, 0x2A	; 42
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	ea e2       	ldi	r30, 0x2A	; 42
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8b 7f       	andi	r24, 0xFB	; 251
     bf8:	8c 93       	st	X, r24

    UCSRC_REG = Local_UCSRC;
     bfa:	e0 e4       	ldi	r30, 0x40	; 64
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	80 83       	st	Z, r24
    /*select baud rate register */
    CLR_BIT(UCSRC_REG,UCSRC_URSEL);
     c02:	a0 e4       	ldi	r26, 0x40	; 64
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e0 e4       	ldi	r30, 0x40	; 64
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	8c 93       	st	X, r24

    SET_BIT(UCSRB_REG,6);
     c10:	aa e2       	ldi	r26, 0x2A	; 42
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ea e2       	ldi	r30, 0x2A	; 42
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24
    /*select baud rate */
    UBRRL_REG = 51;
     c1e:	e9 e2       	ldi	r30, 0x29	; 41
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	83 e3       	ldi	r24, 0x33	; 51
     c24:	80 83       	st	Z, r24
    /*UBRRH_REG = (u8)(BAUD_RATE>>8);
    UBRRL_REG = (u8)(BAUD_RATE);*/
    /*enable rx and tx */
    SET_BIT(UCSRB_REG,UCSRB_TXEN);
     c26:	aa e2       	ldi	r26, 0x2A	; 42
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ea e2       	ldi	r30, 0x2A	; 42
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_RXEN);
     c34:	aa e2       	ldi	r26, 0x2A	; 42
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ea e2       	ldi	r30, 0x2A	; 42
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 61       	ori	r24, 0x10	; 16
     c40:	8c 93       	st	X, r24

}
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <M_UART_voidSendData>:
void M_UART_voidSendData(u8 Copy_u8Data)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
	/**AMGAD SAMIR**/
    /*polling*/
	//wait until transimtte data empty
	while((GET_BIT(UCSRA_REG,UCSRA_UDRE))==0);
     c56:	eb e2       	ldi	r30, 0x2B	; 43
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	82 95       	swap	r24
     c5e:	86 95       	lsr	r24
     c60:	87 70       	andi	r24, 0x07	; 7
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	81 70       	andi	r24, 0x01	; 1
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	a1 f3       	breq	.-24     	; 0xc56 <M_UART_voidSendData+0xc>
		UDR_REG = Copy_u8Data;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	80 83       	st	Z, r24
}
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <M_UART_voidRecieveData>:
u8 M_UART_voidRecieveData(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     /*POLLING*/
	while((GET_BIT(UCSRA_REG,UCSRA_RXC))==0);
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	dc f7       	brge	.-10     	; 0xc86 <M_UART_voidRecieveData+0x8>
		return UDR_REG;
     c90:	ec e2       	ldi	r30, 0x2C	; 44
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <M_UART_voidSendString>:

void M_UART_voidSendString(u8 *ptr)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <M_UART_voidSendString+0x6>
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	0e c0       	rjmp	.+28     	; 0xccc <M_UART_voidSendString+0x30>
	while(ptr[i] != '\0')
	{
		M_UART_voidSendData(ptr[i]);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	80 81       	ld	r24, Z
     cc2:	0e 94 25 06 	call	0xc4a	; 0xc4a <M_UART_voidSendData>
		i++;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	89 83       	std	Y+1, r24	; 0x01
}

void M_UART_voidSendString(u8 *ptr)
{
	u8 i =0;
	while(ptr[i] != '\0')
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	88 23       	and	r24, r24
     ce0:	39 f7       	brne	.-50     	; 0xcb0 <M_UART_voidSendString+0x14>
	{
		M_UART_voidSendData(ptr[i]);
		i++;
	}
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <SetCallback>:

void SetCallback(void (*pv)(void))
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <SetCallback+0x6>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
	if(pv != NULL)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	31 f0       	breq	.+12     	; 0xd10 <SetCallback+0x22>
	{
		ptr = pv;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	90 93 83 00 	sts	0x0083, r25
     d0c:	80 93 82 00 	sts	0x0082, r24
	}
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <__vector_15>:

void __vector_15(void)     __attribute__((signal));
void __vector_15(void)
{
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
    if(ptr != NULL)
     d44:	80 91 82 00 	lds	r24, 0x0082
     d48:	90 91 83 00 	lds	r25, 0x0083
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	29 f0       	breq	.+10     	; 0xd5a <__vector_15+0x40>
    {
    	ptr();
     d50:	e0 91 82 00 	lds	r30, 0x0082
     d54:	f0 91 83 00 	lds	r31, 0x0083
     d58:	09 95       	icall
    }
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <TWI_voidInitMaster>:
#include "TWI_private.h"
#include "TWI_config.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/

	SET_BIT(TWCR, TWCR_TWEA);
     d8c:	a6 e5       	ldi	r26, 0x56	; 86
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e6 e5       	ldi	r30, 0x56	; 86
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
     d9a:	e0 e2       	ldi	r30, 0x20	; 32
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
     da2:	a1 e2       	ldi	r26, 0x21	; 33
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e1 e2       	ldi	r30, 0x21	; 33
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     db0:	a1 e2       	ldi	r26, 0x21	; 33
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e1 e2       	ldi	r30, 0x21	; 33
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	88 23       	and	r24, r24
     dc2:	29 f0       	breq	.+10     	; 0xdce <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR = (Copy_u8Address << 1);
     dc4:	e2 e2       	ldi	r30, 0x22	; 34
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	88 0f       	add	r24, r24
     dcc:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     dce:	a6 e5       	ldi	r26, 0x56	; 86
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	8c 93       	st	X, r24
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
     df0:	e2 e2       	ldi	r30, 0x22	; 34
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 0f       	add	r24, r24
     df8:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
     dfa:	a6 e5       	ldi	r26, 0x56	; 86
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e6 e5       	ldi	r30, 0x56	; 86
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     e08:	a6 e5       	ldi	r26, 0x56	; 86
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	84 60       	ori	r24, 0x04	; 4
     e14:	8c 93       	st	X, r24
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e28:	19 82       	std	Y+1, r1	; 0x01
//	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
	/*Send Start Condition Bit*/
		SET_BIT(TWCR, TWCR_TWSTA);
     e2a:	a6 e5       	ldi	r26, 0x56	; 86
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
		SET_BIT(TWCR, TWCR_TWINT);
     e38:	a6 e5       	ldi	r26, 0x56	; 86
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e6 e5       	ldi	r30, 0x56	; 86
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 23       	and	r24, r24
     e4e:	dc f7       	brge	.-10     	; 0xe46 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
     e50:	e1 e2       	ldi	r30, 0x21	; 33
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	88 7f       	andi	r24, 0xF8	; 248
     e5c:	90 70       	andi	r25, 0x00	; 0
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	91 05       	cpc	r25, r1
     e62:	11 f0       	breq	.+4      	; 0xe68 <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     e7c:	19 82       	std	Y+1, r1	; 0x01
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
     e7e:	a6 e5       	ldi	r26, 0x56	; 86
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e6 e5       	ldi	r30, 0x56	; 86
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	84 6a       	ori	r24, 0xA4	; 164
     e8a:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     e8c:	e6 e5       	ldi	r30, 0x56	; 86
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	dc f7       	brge	.-10     	; 0xe8c <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
     e96:	e1 e2       	ldi	r30, 0x21	; 33
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	80 31       	cpi	r24, 0x10	; 16
     ea6:	91 05       	cpc	r25, r1
     ea8:	11 f0       	breq	.+4      	; 0xeae <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	8b 83       	std	Y+3, r24	; 0x03
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     ec6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8TWCRValue = 0;
     ec8:	19 82       	std	Y+1, r1	; 0x01



	/*Set 7 bits slave address to the bus*/
	TWDR = ((Copy_u8SlaveAddress << 1)&0b11111110);
     eca:	e3 e2       	ldi	r30, 0x23	; 35
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	//CLR_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     eda:	a6 e5       	ldi	r26, 0x56	; 86
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e5       	ldi	r30, 0x56	; 86
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     ee8:	a6 e5       	ldi	r26, 0x56	; 86
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     ef6:	e6 e5       	ldi	r30, 0x56	; 86
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x3e>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
     f00:	e1 e2       	ldi	r30, 0x21	; 33
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	90 70       	andi	r25, 0x00	; 0
     f0e:	88 31       	cpi	r24, 0x18	; 24
     f10:	91 05       	cpc	r25, r1
     f12:	11 f0       	breq	.+4      	; 0xf18 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x60>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorStatus;
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f32:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1)|1;
     f34:	e3 e2       	ldi	r30, 0x23	; 35
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	//SET_BIT(TWDR, TWDR_TWD0);

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
     f46:	a6 e5       	ldi	r26, 0x56	; 86
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e5       	ldi	r30, 0x56	; 86
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     f54:	a6 e5       	ldi	r26, 0x56	; 86
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e5       	ldi	r30, 0x56	; 86
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     f62:	e6 e5       	ldi	r30, 0x56	; 86
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 23       	and	r24, r24
     f6a:	dc f7       	brge	.-10     	; 0xf62 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x3c>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
     f6c:	e1 e2       	ldi	r30, 0x21	; 33
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	88 7f       	andi	r24, 0xF8	; 248
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	80 34       	cpi	r24, 0x40	; 64
     f7c:	91 05       	cpc	r25, r1
     f7e:	11 f0       	breq	.+4      	; 0xf84 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x5e>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
     f80:	84 e0       	ldi	r24, 0x04	; 4
     f82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f9c:	19 82       	std	Y+1, r1	; 0x01



	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
     f9e:	e3 e2       	ldi	r30, 0x23	; 35
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24



	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     fa6:	a6 e5       	ldi	r26, 0x56	; 86
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e6 e5       	ldi	r30, 0x56	; 86
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	8c 93       	st	X, r24


	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
     fb4:	e6 e5       	ldi	r30, 0x56	; 86
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 23       	and	r24, r24
     fbc:	dc f7       	brge	.-10     	; 0xfb4 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
     fbe:	e1 e2       	ldi	r30, 0x21	; 33
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	88 7f       	andi	r24, 0xF8	; 248
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	88 32       	cpi	r24, 0x28	; 40
     fce:	91 05       	cpc	r25, r1
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
     fd2:	85 e0       	ldi	r24, 0x05	; 5
     fd4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
     ff4:	a6 e5       	ldi	r26, 0x56	; 86
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    1002:	e6 e5       	ldi	r30, 0x56	; 86
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 23       	and	r24, r24
    100a:	dc f7       	brge	.-10     	; 0x1002 <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    100c:	e1 e2       	ldi	r30, 0x21	; 33
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	88 7f       	andi	r24, 0xF8	; 248
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	80 35       	cpi	r24, 0x50	; 80
    101c:	91 05       	cpc	r25, r1
    101e:	19 f0       	breq	.+6      	; 0x1026 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    1026:	e3 e2       	ldi	r30, 0x23	; 35
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	ea 81       	ldd	r30, Y+2	; 0x02
    102e:	fb 81       	ldd	r31, Y+3	; 0x03
    1030:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    1032:	89 81       	ldd	r24, Y+1	; 0x01

}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <TWI_ErrorStatusMasterReadDataByteWithNACK>:

TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithNACK(u8 * Copy_pu8ReceivedByte)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x6>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
	/* Clear the Ack  */
	CLR_BIT(TWCR, TWCR_TWEA);
    1050:	a6 e5       	ldi	r26, 0x56	; 86
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e6 e5       	ldi	r30, 0x56	; 86
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	8c 93       	st	X, r24

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    105e:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    1060:	a6 e5       	ldi	r26, 0x56	; 86
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e5       	ldi	r30, 0x56	; 86
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 68       	ori	r24, 0x80	; 128
    106c:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    106e:	e6 e5       	ldi	r30, 0x56	; 86
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 23       	and	r24, r24
    1076:	dc f7       	brge	.-10     	; 0x106e <TWI_ErrorStatusMasterReadDataByteWithNACK+0x2e>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_NACK)
    1078:	e1 e2       	ldi	r30, 0x21	; 33
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	88 35       	cpi	r24, 0x58	; 88
    1088:	91 05       	cpc	r25, r1
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_ErrorStatusMasterReadDataByteWithNACK+0x52>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    108c:	86 e0       	ldi	r24, 0x06	; 6
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	06 c0       	rjmp	.+12     	; 0x109e <TWI_ErrorStatusMasterReadDataByteWithNACK+0x5e>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    1092:	e3 e2       	ldi	r30, 0x23	; 35
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    109e:	89 81       	ldd	r24, Y+1	; 0x01

}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62

	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    10b4:	a6 e5       	ldi	r26, 0x56	; 86
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e6 e5       	ldi	r30, 0x56	; 86
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    10c2:	a6 e5       	ldi	r26, 0x56	; 86
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24

}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <TIMER_voidTimer0Init>:

void (* TIMER_pvTimer0NotificationFunction)(void) = NULL_POINTER; 
void (* TIMER_pvICUNotificationFunction)(void) = NULL_POINTER;

void TIMER_voidTimer0Init(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	/*Set Timer 0 in Fast PWM Mode*/
	SET_BIT(TCCR0, TCCR0_WGM00);
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 60       	ori	r24, 0x08	; 8
    10f8:	8c 93       	st	X, r24
	
	/*Set The Prescaler to be 8*/
	CLR_BIT(TCCR0, TCCR0_CS00);
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8e 7f       	andi	r24, 0xFE	; 254
    1106:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    1108:	a3 e5       	ldi	r26, 0x53	; 83
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e3 e5       	ldi	r30, 0x53	; 83
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    1116:	a3 e5       	ldi	r26, 0x53	; 83
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e3 e5       	ldi	r30, 0x53	; 83
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8b 7f       	andi	r24, 0xFB	; 251
    1122:	8c 93       	st	X, r24

	/*Set The Set On TOP, Clear On Compare Mode (Non-Inverted)*/
	CLR_BIT(TCCR0, TCCR0_COM00);
    1124:	a3 e5       	ldi	r26, 0x53	; 83
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7e       	andi	r24, 0xEF	; 239
    1130:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_COM01);
    1132:	a3 e5       	ldi	r26, 0x53	; 83
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e3 e5       	ldi	r30, 0x53	; 83
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 62       	ori	r24, 0x20	; 32
    113e:	8c 93       	st	X, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <TIMER_voidTimer1Init>:


void TIMER_voidTimer1Init(void)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	/*Select The Normal Mode*/
	//Selecting Mode 14 PWM
	SET_BIT(TCCR1A,1);
    114e:	af e4       	ldi	r26, 0x4F	; 79
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ef e4       	ldi	r30, 0x4F	; 79
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	82 60       	ori	r24, 0x02	; 2
    115a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    115c:	af e4       	ldi	r26, 0x4F	; 79
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ef e4       	ldi	r30, 0x4F	; 79
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8e 7f       	andi	r24, 0xFE	; 254
    1168:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 60       	ori	r24, 0x08	; 8
    1176:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 61       	ori	r24, 0x10	; 16
    1184:	8c 93       	st	X, r24
	// MODE 3 IN PIN
	SET_BIT(TCCR1A,7);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7b       	andi	r24, 0xBF	; 191
    11a0:	8c 93       	st	X, r24
	//Prescaler 8
	CLR_BIT(TCCR1B,0);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    11b0:	ae e4       	ldi	r26, 0x4E	; 78
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ee e4       	ldi	r30, 0x4E	; 78
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	82 60       	ori	r24, 0x02	; 2
    11bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8b 7f       	andi	r24, 0xFB	; 251
    11ca:	8c 93       	st	X, r24
	//Initilaize top value
	ICR1 = 19999 ;
    11cc:	e6 e4       	ldi	r30, 0x46	; 70
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8f e1       	ldi	r24, 0x1F	; 31
    11d2:	9e e4       	ldi	r25, 0x4E	; 78
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	80 83       	st	Z, r24
	//Initilize counter value
	TCNT1 = 0;
    11d8:	ec e4       	ldi	r30, 0x4C	; 76
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	11 82       	std	Z+1, r1	; 0x01
    11de:	10 82       	st	Z, r1
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <TIMER_voidTimer1ASetCompareValue>:


void TIMER_voidTimer1ASetCompareValue(u16 Copy_u16CompareValue)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <TIMER_voidTimer1ASetCompareValue+0x6>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel A Register*/
	OCR1A = Copy_u16CompareValue;
    11f4:	ea e4       	ldi	r30, 0x4A	; 74
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <TIMER_voidTimer1BSetCompareValue>:

void TIMER_voidTimer1BSetCompareValue(u16 Copy_u16CompareValue)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <TIMER_voidTimer1BSetCompareValue+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
	/* Set The Compare Value To OCR1 Channel B Register*/
	OCR1B = Copy_u16CompareValue;
    1218:	e8 e4       	ldi	r30, 0x48	; 72
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <TIMER_voidTimer1SetInputCaptureValue>:

void TIMER_voidTimer1SetInputCaptureValue(u16 Copy_u16CaptureValue)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <TIMER_voidTimer1SetInputCaptureValue+0x6>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Input Capture Value to ICR1 Register*/
	ICR1 = Copy_u16CaptureValue;
    123c:	e6 e4       	ldi	r30, 0x46	; 70
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <TIMER_voidTimer0SetCompareValue>:


void TIMER_voidTimer0SetCompareValue(u8 Copy_u8CompareValue)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Value to the OCR0 Register*/
	OCR0 = Copy_u8CompareValue;
    125e:	ec e5       	ldi	r30, 0x5C	; 92
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	80 83       	st	Z, r24
}
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <TIMER_voidTimer0SetCallBack>:

void TIMER_voidTimer0SetCallBack(void (*Copy_pvNotificationFunction)(void))
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <TIMER_voidTimer0SetCallBack+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the function address to the global pointer to function*/
	TIMER_pvTimer0NotificationFunction = Copy_pvNotificationFunction;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	90 93 85 00 	sts	0x0085, r25
    1284:	80 93 84 00 	sts	0x0084, r24
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <ICU_voidInit>:


void ICU_voidInit(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	/*Set Trigger to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    129a:	ae e4       	ldi	r26, 0x4E	; 78
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 64       	ori	r24, 0x40	; 64
    12a6:	8c 93       	st	X, r24

	/*Enable The ICU Interrupt*/
	SET_BIT(TIMSK, TIMSK_TICIE1);
    12a8:	a9 e5       	ldi	r26, 0x59	; 89
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e9 e5       	ldi	r30, 0x59	; 89
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	80 62       	ori	r24, 0x20	; 32
    12b4:	8c 93       	st	X, r24
}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <ICU_voidSetTrigger>:



void ICU_voidSetTrigger(u8 Copy_u8TriggerSource)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <ICU_voidSetTrigger+0x6>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8TriggerSource)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3b 83       	std	Y+3, r19	; 0x03
    12d2:	2a 83       	std	Y+2, r18	; 0x02
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	9b 81       	ldd	r25, Y+3	; 0x03
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	31 f0       	breq	.+12     	; 0x12e8 <ICU_voidSetTrigger+0x2c>
    12dc:	2a 81       	ldd	r18, Y+2	; 0x02
    12de:	3b 81       	ldd	r19, Y+3	; 0x03
    12e0:	21 30       	cpi	r18, 0x01	; 1
    12e2:	31 05       	cpc	r19, r1
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <ICU_voidSetTrigger+0x3c>
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <ICU_voidSetTrigger+0x4a>
	{
		case RISING_EDGE:
			/*Set The Rising Edge to be the trigger source*/
			SET_BIT(TCCR1B, TCCR1B_ICES1);
    12e8:	ae e4       	ldi	r26, 0x4E	; 78
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ee e4       	ldi	r30, 0x4E	; 78
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 64       	ori	r24, 0x40	; 64
    12f4:	8c 93       	st	X, r24
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <ICU_voidSetTrigger+0x4a>
			break;
		case FALLING_EDGE:
			/*Set The Falling Edge to be the trigger source*/
			CLR_BIT(TCCR1B, TCCR1B_ICES1);
    12f8:	ae e4       	ldi	r26, 0x4E	; 78
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ee e4       	ldi	r30, 0x4E	; 78
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8f 7b       	andi	r24, 0xBF	; 191
    1304:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	/*Get The Captured Value From ICR1 Register*/
	return ICR1;
    131a:	e6 e4       	ldi	r30, 0x46	; 70
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <ICU_voidInterruptDisbale>:

void ICU_voidInterruptDisbale(void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	/*Disable The ICU Interrupt*/
	CLR_BIT(TIMSK, TIMSK_TICIE1);
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 7d       	andi	r24, 0xDF	; 223
    133c:	8c 93       	st	X, r24
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <ICU_voidSetCallBack>:

void ICU_voidSetCallBack(void (*Copy_pvNotificationFunction)(void))
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <ICU_voidSetCallBack+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
	TIMER_pvICUNotificationFunction = Copy_pvNotificationFunction;
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	90 93 87 00 	sts	0x0087, r25
    135a:	80 93 86 00 	sts	0x0086, r24
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <__vector_10>:

/*ISR for Timer0 Compare Match Event */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	/*Check if the global pointer to function is changed or not*/
	if(TIMER_pvTimer0NotificationFunction != NULL_POINTER)
    1392:	80 91 84 00 	lds	r24, 0x0084
    1396:	90 91 85 00 	lds	r25, 0x0085
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	29 f0       	breq	.+10     	; 0x13a8 <__vector_10+0x40>
	{
		/*Execute the global pointer to function*/
		TIMER_pvTimer0NotificationFunction();
    139e:	e0 91 84 00 	lds	r30, 0x0084
    13a2:	f0 91 85 00 	lds	r31, 0x0085
    13a6:	09 95       	icall
	}
}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_6>:

/*ISR For ICU Capture Event*/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvICUNotificationFunction != NULL_POINTER)
    13f8:	80 91 86 00 	lds	r24, 0x0086
    13fc:	90 91 87 00 	lds	r25, 0x0087
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	29 f0       	breq	.+10     	; 0x140e <__vector_6+0x40>
	{
		TIMER_pvICUNotificationFunction();
    1404:	e0 91 86 00 	lds	r30, 0x0086
    1408:	f0 91 87 00 	lds	r31, 0x0087
    140c:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <SPI_voidMasterInit>:




void SPI_voidMasterInit(void)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	/*Set The Node To Be Master Node*/
	SET_BIT(SPCR, SPCR_MSTR);
    143c:	ad e2       	ldi	r26, 0x2D	; 45
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ed e2       	ldi	r30, 0x2D	; 45
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 61       	ori	r24, 0x10	; 16
    1448:	8c 93       	st	X, r24
	/*Set The MSB to be sent first*/
	CLR_BIT(SPCR, SPCR_DORD);
    144a:	ad e2       	ldi	r26, 0x2D	; 45
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ed e2       	ldi	r30, 0x2D	; 45
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8f 7d       	andi	r24, 0xDF	; 223
    1456:	8c 93       	st	X, r24

	/*Set The Leading Edge To be The Rising Edge*/
	CLR_BIT(SPCR, SPCR_CPOL);
    1458:	ad e2       	ldi	r26, 0x2D	; 45
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ed e2       	ldi	r30, 0x2D	; 45
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	87 7f       	andi	r24, 0xF7	; 247
    1464:	8c 93       	st	X, r24

	/*Sample At Leading Edge*/
	CLR_BIT(SPCR, SPCR_CPHA);
    1466:	ad e2       	ldi	r26, 0x2D	; 45
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ed e2       	ldi	r30, 0x2D	; 45
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8b 7f       	andi	r24, 0xFB	; 251
    1472:	8c 93       	st	X, r24

	/*Clock Prescaler, divide by 16*/
	SET_BIT(SPCR, SPCR_SPR0);
    1474:	ad e2       	ldi	r26, 0x2D	; 45
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ed e2       	ldi	r30, 0x2D	; 45
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    1482:	ad e2       	ldi	r26, 0x2D	; 45
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ed e2       	ldi	r30, 0x2D	; 45
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8d 7f       	andi	r24, 0xFD	; 253
    148e:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    1490:	ae e2       	ldi	r26, 0x2E	; 46
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e2       	ldi	r30, 0x2E	; 46
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8e 7f       	andi	r24, 0xFE	; 254
    149c:	8c 93       	st	X, r24
	/*Enable The SPI*/
	SET_BIT(SPCR, SPCR_SPE);
    149e:	ad e2       	ldi	r26, 0x2D	; 45
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ed e2       	ldi	r30, 0x2D	; 45
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 64       	ori	r24, 0x40	; 64
    14aa:	8c 93       	st	X, r24
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	/*Set The Node To Be Salve Node*/
	CLR_BIT(SPCR, SPCR_MSTR);
    14ba:	ad e2       	ldi	r26, 0x2D	; 45
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ed e2       	ldi	r30, 0x2D	; 45
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7e       	andi	r24, 0xEF	; 239
    14c6:	8c 93       	st	X, r24
	/*Set The MSB to be sent first*/
	CLR_BIT(SPCR, SPCR_DORD);
    14c8:	ad e2       	ldi	r26, 0x2D	; 45
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ed e2       	ldi	r30, 0x2D	; 45
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7d       	andi	r24, 0xDF	; 223
    14d4:	8c 93       	st	X, r24

	/*Set The Leading Edge To be The Rising Edge*/
	CLR_BIT(SPCR, SPCR_CPOL);
    14d6:	ad e2       	ldi	r26, 0x2D	; 45
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ed e2       	ldi	r30, 0x2D	; 45
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	8c 93       	st	X, r24

	/*Sample At Leading Edge*/
	CLR_BIT(SPCR, SPCR_CPHA);
    14e4:	ad e2       	ldi	r26, 0x2D	; 45
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ed e2       	ldi	r30, 0x2D	; 45
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8b 7f       	andi	r24, 0xFB	; 251
    14f0:	8c 93       	st	X, r24
	/*Enable The SPI*/
	SET_BIT(SPCR, SPCR_SPE);
    14f2:	ad e2       	ldi	r26, 0x2D	; 45
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ed e2       	ldi	r30, 0x2D	; 45
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	80 64       	ori	r24, 0x40	; 64
    14fe:	8c 93       	st	X, r24
}
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <SPI_u8Tranceive>:


u8 SPI_u8Tranceive(u8 Copy_u8Data)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Data in SPDR Register To Send*/
	SPDR = Copy_u8Data;
    1512:	ef e2       	ldi	r30, 0x2F	; 47
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	80 83       	st	Z, r24

	/*Polling (Busy Waiting) until the transfer complete*/
	while(GET_BIT(SPSR, SPSR_SPIF) == 0);
    151a:	ee e2       	ldi	r30, 0x2E	; 46
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 23       	and	r24, r24
    1522:	dc f7       	brge	.-10     	; 0x151a <SPI_u8Tranceive+0x14>

	/*Clear The Flag*/
	SET_BIT(SPSR, SPSR_SPIF);
    1524:	ae e2       	ldi	r26, 0x2E	; 46
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ee e2       	ldi	r30, 0x2E	; 46
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 68       	ori	r24, 0x80	; 128
    1530:	8c 93       	st	X, r24

	/*Get The Exchanged Data*/
	return SPDR;
    1532:	ef e2       	ldi	r30, 0x2F	; 47
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z

}
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <GIE_voidEnableGlobalInterrupt>:




void GIE_voidEnableGlobalInterrupt(void)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1548:	af e5       	ldi	r26, 0x5F	; 95
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ef e5       	ldi	r30, 0x5F	; 95
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	8c 93       	st	X, r24
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt(void)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1564:	af e5       	ldi	r26, 0x5F	; 95
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ef e5       	ldi	r30, 0x5F	; 95
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8f 77       	andi	r24, 0x7F	; 127
    1570:	8c 93       	st	X, r24
}
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <EXTI_VoidInit>:
void (*GPF_3)(void) =NULL ;



void EXTI_VoidInit()
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(MCUCR_REG,3);
		CLR_BIT(MCUCR_REG,2);
	#endif
#elif 		INT_ID == INT2
		/*ENABLE INT2 */
		SET_BIT(GICR_REG,5);
    1580:	ab e5       	ldi	r26, 0x5B	; 91
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e5       	ldi	r30, 0x5B	; 91
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	8c 93       	st	X, r24

	/*Falling Edge */
	CLR_BIT(MCUCSR_REG,6);
#elif INT_SENSE_CONTROL == RISING_EDGE
	/*RISING EDGE*/
	SET_BIT(MCUCSR_REG,6);
    158e:	a4 e5       	ldi	r26, 0x54	; 84
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e4 e5       	ldi	r30, 0x54	; 84
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 64       	ori	r24, 0x40	; 64
    159a:	8c 93       	st	X, r24

#endif

#endif

}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <EXTI_VoidEnable>:
void EXTI_VoidEnable(u8 Copy_u8InterruptNumber, u8 Copy_u8SenseControll)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	2a 97       	sbiw	r28, 0x0a	; 10
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8InterruptNumber)
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3a 87       	std	Y+10, r19	; 0x0a
    15c2:	29 87       	std	Y+9, r18	; 0x09
    15c4:	89 85       	ldd	r24, Y+9	; 0x09
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <EXTI_VoidEnable+0x2e>
    15ce:	6d c0       	rjmp	.+218    	; 0x16aa <EXTI_VoidEnable+0x108>
    15d0:	29 85       	ldd	r18, Y+9	; 0x09
    15d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <EXTI_VoidEnable+0x3a>
    15da:	c9 c0       	rjmp	.+402    	; 0x176e <EXTI_VoidEnable+0x1cc>
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <EXTI_VoidEnable+0x44>
    15e4:	e9 c0       	rjmp	.+466    	; 0x17b8 <EXTI_VoidEnable+0x216>
	{
			case INT0 : SET_BIT(GICR_REG,6);
    15e6:	ab e5       	ldi	r26, 0x5B	; 91
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e5       	ldi	r30, 0x5B	; 91
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 64       	ori	r24, 0x40	; 64
    15f2:	8c 93       	st	X, r24

				switch(Copy_u8SenseControll)
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	38 87       	std	Y+8, r19	; 0x08
    15fc:	2f 83       	std	Y+7, r18	; 0x07
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	21 f1       	breq	.+72     	; 0x1650 <EXTI_VoidEnable+0xae>
    1608:	2f 81       	ldd	r18, Y+7	; 0x07
    160a:	38 85       	ldd	r19, Y+8	; 0x08
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	2c f4       	brge	.+10     	; 0x161c <EXTI_VoidEnable+0x7a>
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	98 85       	ldd	r25, Y+8	; 0x08
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	61 f0       	breq	.+24     	; 0x1632 <EXTI_VoidEnable+0x90>
    161a:	ce c0       	rjmp	.+412    	; 0x17b8 <EXTI_VoidEnable+0x216>
    161c:	2f 81       	ldd	r18, Y+7	; 0x07
    161e:	38 85       	ldd	r19, Y+8	; 0x08
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	99 f1       	breq	.+102    	; 0x168c <EXTI_VoidEnable+0xea>
    1626:	8f 81       	ldd	r24, Y+7	; 0x07
    1628:	98 85       	ldd	r25, Y+8	; 0x08
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	f9 f0       	breq	.+62     	; 0x166e <EXTI_VoidEnable+0xcc>
    1630:	c3 c0       	rjmp	.+390    	; 0x17b8 <EXTI_VoidEnable+0x216>
				{
					case FALLING_EDGE :
						/*Falling Edge */
						SET_BIT(MCUCR_REG,1);
    1632:	a5 e5       	ldi	r26, 0x55	; 85
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e5       	ldi	r30, 0x55	; 85
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	82 60       	ori	r24, 0x02	; 2
    163e:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,0);
    1640:	a5 e5       	ldi	r26, 0x55	; 85
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e5 e5       	ldi	r30, 0x55	; 85
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8e 7f       	andi	r24, 0xFE	; 254
    164c:	8c 93       	st	X, r24
    164e:	b4 c0       	rjmp	.+360    	; 0x17b8 <EXTI_VoidEnable+0x216>
						break ;

					case RISING_EDGE :
						SET_BIT(MCUCR_REG,1);
    1650:	a5 e5       	ldi	r26, 0x55	; 85
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e5       	ldi	r30, 0x55	; 85
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	82 60       	ori	r24, 0x02	; 2
    165c:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,0);
    165e:	a5 e5       	ldi	r26, 0x55	; 85
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e5       	ldi	r30, 0x55	; 85
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	81 60       	ori	r24, 0x01	; 1
    166a:	8c 93       	st	X, r24
    166c:	a5 c0       	rjmp	.+330    	; 0x17b8 <EXTI_VoidEnable+0x216>
						break;

					case ON_CHANGE :
					/*ANYCHANGE */
						CLR_BIT(MCUCR_REG,1);
    166e:	a5 e5       	ldi	r26, 0x55	; 85
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e5       	ldi	r30, 0x55	; 85
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8d 7f       	andi	r24, 0xFD	; 253
    167a:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,0);
    167c:	a5 e5       	ldi	r26, 0x55	; 85
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e5       	ldi	r30, 0x55	; 85
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	81 60       	ori	r24, 0x01	; 1
    1688:	8c 93       	st	X, r24
    168a:	96 c0       	rjmp	.+300    	; 0x17b8 <EXTI_VoidEnable+0x216>
						break;
					case LOW_LEVEL :
						CLR_BIT(MCUCR_REG,1);
    168c:	a5 e5       	ldi	r26, 0x55	; 85
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e5       	ldi	r30, 0x55	; 85
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8d 7f       	andi	r24, 0xFD	; 253
    1698:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,0);
    169a:	a5 e5       	ldi	r26, 0x55	; 85
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e5 e5       	ldi	r30, 0x55	; 85
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8e 7f       	andi	r24, 0xFE	; 254
    16a6:	8c 93       	st	X, r24
    16a8:	87 c0       	rjmp	.+270    	; 0x17b8 <EXTI_VoidEnable+0x216>
					default : break ;

				}

			break ;
				case INT1 : SET_BIT(GICR_REG,7);
    16aa:	ab e5       	ldi	r26, 0x5B	; 91
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 68       	ori	r24, 0x80	; 128
    16b6:	8c 93       	st	X, r24

				switch(Copy_u8SenseControll)
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3e 83       	std	Y+6, r19	; 0x06
    16c0:	2d 83       	std	Y+5, r18	; 0x05
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	91 05       	cpc	r25, r1
    16ca:	21 f1       	breq	.+72     	; 0x1714 <EXTI_VoidEnable+0x172>
    16cc:	2d 81       	ldd	r18, Y+5	; 0x05
    16ce:	3e 81       	ldd	r19, Y+6	; 0x06
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <EXTI_VoidEnable+0x13e>
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <EXTI_VoidEnable+0x154>
    16de:	6c c0       	rjmp	.+216    	; 0x17b8 <EXTI_VoidEnable+0x216>
    16e0:	2d 81       	ldd	r18, Y+5	; 0x05
    16e2:	3e 81       	ldd	r19, Y+6	; 0x06
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	99 f1       	breq	.+102    	; 0x1750 <EXTI_VoidEnable+0x1ae>
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	f9 f0       	breq	.+62     	; 0x1732 <EXTI_VoidEnable+0x190>
    16f4:	61 c0       	rjmp	.+194    	; 0x17b8 <EXTI_VoidEnable+0x216>
				{
					case FALLING_EDGE :
						/*Falling Edge */
						SET_BIT(MCUCR_REG,3);
    16f6:	a5 e5       	ldi	r26, 0x55	; 85
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e5       	ldi	r30, 0x55	; 85
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	88 60       	ori	r24, 0x08	; 8
    1702:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,2);
    1704:	a5 e5       	ldi	r26, 0x55	; 85
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e5       	ldi	r30, 0x55	; 85
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	8c 93       	st	X, r24
    1712:	52 c0       	rjmp	.+164    	; 0x17b8 <EXTI_VoidEnable+0x216>
						break ;

					case RISING_EDGE :
						SET_BIT(MCUCR_REG,3);
    1714:	a5 e5       	ldi	r26, 0x55	; 85
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e5       	ldi	r30, 0x55	; 85
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	88 60       	ori	r24, 0x08	; 8
    1720:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,2);
    1722:	a5 e5       	ldi	r26, 0x55	; 85
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e5       	ldi	r30, 0x55	; 85
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	84 60       	ori	r24, 0x04	; 4
    172e:	8c 93       	st	X, r24
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <EXTI_VoidEnable+0x216>
						break;

					case ON_CHANGE :
					/*ANYCHANGE */
						CLR_BIT(MCUCR_REG,3);
    1732:	a5 e5       	ldi	r26, 0x55	; 85
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e5 e5       	ldi	r30, 0x55	; 85
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	87 7f       	andi	r24, 0xF7	; 247
    173e:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REG,2);
    1740:	a5 e5       	ldi	r26, 0x55	; 85
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e5       	ldi	r30, 0x55	; 85
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	84 60       	ori	r24, 0x04	; 4
    174c:	8c 93       	st	X, r24
    174e:	34 c0       	rjmp	.+104    	; 0x17b8 <EXTI_VoidEnable+0x216>
						break;
					case LOW_LEVEL :
						CLR_BIT(MCUCR_REG,3);
    1750:	a5 e5       	ldi	r26, 0x55	; 85
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e5       	ldi	r30, 0x55	; 85
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	87 7f       	andi	r24, 0xF7	; 247
    175c:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REG,2);
    175e:	a5 e5       	ldi	r26, 0x55	; 85
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e5       	ldi	r30, 0x55	; 85
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8b 7f       	andi	r24, 0xFB	; 251
    176a:	8c 93       	st	X, r24
    176c:	25 c0       	rjmp	.+74     	; 0x17b8 <EXTI_VoidEnable+0x216>
						 break ;
					default : break ;

				}
			break;
				case INT2 : SET_BIT(GICR_REG,5);
    176e:	ab e5       	ldi	r26, 0x5B	; 91
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	eb e5       	ldi	r30, 0x5B	; 91
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 62       	ori	r24, 0x20	; 32
    177a:	8c 93       	st	X, r24

					switch(Copy_u8SenseControll)
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3c 83       	std	Y+4, r19	; 0x04
    1784:	2b 83       	std	Y+3, r18	; 0x03
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	31 f0       	breq	.+12     	; 0x179a <EXTI_VoidEnable+0x1f8>
    178e:	2b 81       	ldd	r18, Y+3	; 0x03
    1790:	3c 81       	ldd	r19, Y+4	; 0x04
    1792:	21 30       	cpi	r18, 0x01	; 1
    1794:	31 05       	cpc	r19, r1
    1796:	49 f0       	breq	.+18     	; 0x17aa <EXTI_VoidEnable+0x208>
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <EXTI_VoidEnable+0x216>
					{
						case FALLING_EDGE :
							/*Falling Edge */
							CLR_BIT(MCUCSR_REG,6);
    179a:	a4 e5       	ldi	r26, 0x54	; 84
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e4 e5       	ldi	r30, 0x54	; 84
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 7b       	andi	r24, 0xBF	; 191
    17a6:	8c 93       	st	X, r24
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <EXTI_VoidEnable+0x216>
							break ;

						case RISING_EDGE :
							SET_BIT(MCUCSR_REG,6);
    17aa:	a4 e5       	ldi	r26, 0x54	; 84
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e4 e5       	ldi	r30, 0x54	; 84
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	8c 93       	st	X, r24
							break;



	}
}
    17b8:	2a 96       	adiw	r28, 0x0a	; 10
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <EXTI_VoidDisable>:
void EXTI_VoidDisable(u8 Copy_u8InterruptNumber)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <EXTI_VoidDisable+0x6>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8InterruptNumber )
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3b 83       	std	Y+3, r19	; 0x03
    17e0:	2a 83       	std	Y+2, r18	; 0x02
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	9b 81       	ldd	r25, Y+3	; 0x03
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	89 f0       	breq	.+34     	; 0x180e <EXTI_VoidDisable+0x44>
    17ec:	2a 81       	ldd	r18, Y+2	; 0x02
    17ee:	3b 81       	ldd	r19, Y+3	; 0x03
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	a1 f0       	breq	.+40     	; 0x181e <EXTI_VoidDisable+0x54>
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	b9 f4       	brne	.+46     	; 0x182c <EXTI_VoidDisable+0x62>
	{
			case	INT0 :	CLR_BIT(GICR_REG,6);
    17fe:	ab e5       	ldi	r26, 0x5B	; 91
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	eb e5       	ldi	r30, 0x5B	; 91
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8f 7b       	andi	r24, 0xBF	; 191
    180a:	8c 93       	st	X, r24
    180c:	0f c0       	rjmp	.+30     	; 0x182c <EXTI_VoidDisable+0x62>
								break ;
			case	INT1 :	CLR_BIT(GICR_REG,7);
    180e:	ab e5       	ldi	r26, 0x5B	; 91
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	eb e5       	ldi	r30, 0x5B	; 91
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8f 77       	andi	r24, 0x7F	; 127
    181a:	8c 93       	st	X, r24
    181c:	07 c0       	rjmp	.+14     	; 0x182c <EXTI_VoidDisable+0x62>
											break ;
			case	INT2 :	CLR_BIT(GICR_REG,5);
    181e:	ab e5       	ldi	r26, 0x5B	; 91
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e5       	ldi	r30, 0x5B	; 91
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 7d       	andi	r24, 0xDF	; 223
    182a:	8c 93       	st	X, r24
											break ;
	}
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <EXTI_SetCallBack_INT0>:


void EXTI_SetCallBack_INT0(void(*LPF)(void))
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <EXTI_SetCallBack_INT0+0x6>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	GPF_1  = LPF ;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	9a 81       	ldd	r25, Y+2	; 0x02
    184a:	90 93 89 00 	sts	0x0089, r25
    184e:	80 93 88 00 	sts	0x0088, r24
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <EXTI_SetCallBack_INT1>:
void EXTI_SetCallBack_INT1(void(*LPF)(void))
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <EXTI_SetCallBack_INT1+0x6>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
	GPF_2  = LPF ;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	90 93 8b 00 	sts	0x008B, r25
    1872:	80 93 8a 00 	sts	0x008A, r24
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <EXTI_SetCallBack_INT2>:
void EXTI_SetCallBack_INT2(void(*LPF)(void))
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <EXTI_SetCallBack_INT2+0x6>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
	GPF_3  = LPF ;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	90 93 8d 00 	sts	0x008D, r25
    1896:	80 93 8c 00 	sts	0x008C, r24
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <__vector_1>:

void __vector_1 (void)	__attribute__((signal));

void __vector_1(void)
{
    18a4:	1f 92       	push	r1
    18a6:	0f 92       	push	r0
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	0f 92       	push	r0
    18ac:	11 24       	eor	r1, r1
    18ae:	2f 93       	push	r18
    18b0:	3f 93       	push	r19
    18b2:	4f 93       	push	r20
    18b4:	5f 93       	push	r21
    18b6:	6f 93       	push	r22
    18b8:	7f 93       	push	r23
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	af 93       	push	r26
    18c0:	bf 93       	push	r27
    18c2:	ef 93       	push	r30
    18c4:	ff 93       	push	r31
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	if(GPF_1!=NULL)
    18ce:	80 91 88 00 	lds	r24, 0x0088
    18d2:	90 91 89 00 	lds	r25, 0x0089
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	29 f0       	breq	.+10     	; 0x18e4 <__vector_1+0x40>
		{
			GPF_1();
    18da:	e0 91 88 00 	lds	r30, 0x0088
    18de:	f0 91 89 00 	lds	r31, 0x0089
    18e2:	09 95       	icall
		}

}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_2>:
void __vector_2(void)	__attribute__((signal));

void __vector_2(void)
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	if(GPF_2!=NULL)
    1934:	80 91 8a 00 	lds	r24, 0x008A
    1938:	90 91 8b 00 	lds	r25, 0x008B
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	29 f0       	breq	.+10     	; 0x194a <__vector_2+0x40>
		{
			GPF_2();
    1940:	e0 91 8a 00 	lds	r30, 0x008A
    1944:	f0 91 8b 00 	lds	r31, 0x008B
    1948:	09 95       	icall
		}
	GPF_2 =NULL;
    194a:	10 92 8b 00 	sts	0x008B, r1
    194e:	10 92 8a 00 	sts	0x008A, r1
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_3>:
void __vector_3(void)	__attribute__((signal));

void __vector_3(void)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	6f 93       	push	r22
    198c:	7f 93       	push	r23
    198e:	8f 93       	push	r24
    1990:	9f 93       	push	r25
    1992:	af 93       	push	r26
    1994:	bf 93       	push	r27
    1996:	ef 93       	push	r30
    1998:	ff 93       	push	r31
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	if(GPF_3!=NULL )
    19a2:	80 91 8c 00 	lds	r24, 0x008C
    19a6:	90 91 8d 00 	lds	r25, 0x008D
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <__vector_3+0x40>
		{
			GPF_3();
    19ae:	e0 91 8c 00 	lds	r30, 0x008C
    19b2:	f0 91 8d 00 	lds	r31, 0x008D
    19b6:	09 95       	icall
		}
	GPF_3 = NULL ;
    19b8:	10 92 8d 00 	sts	0x008D, r1
    19bc:	10 92 8c 00 	sts	0x008C, r1
}
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	bf 91       	pop	r27
    19ca:	af 91       	pop	r26
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	7f 91       	pop	r23
    19d2:	6f 91       	pop	r22
    19d4:	5f 91       	pop	r21
    19d6:	4f 91       	pop	r20
    19d8:	3f 91       	pop	r19
    19da:	2f 91       	pop	r18
    19dc:	0f 90       	pop	r0
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	0f 90       	pop	r0
    19e2:	1f 90       	pop	r1
    19e4:	18 95       	reti

000019e6 <DIO_voidSetPinDirection>:
#include "DIO_config.h"



void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinMode)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <DIO_voidSetPinDirection+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <DIO_voidSetPinDirection+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6a 83       	std	Y+2, r22	; 0x02
    19f8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3d 83       	std	Y+5, r19	; 0x05
    1a02:	2c 83       	std	Y+4, r18	; 0x04
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <DIO_voidSetPinDirection+0x2a>
    1a0e:	43 c0       	rjmp	.+134    	; 0x1a96 <DIO_voidSetPinDirection+0xb0>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <DIO_voidSetPinDirection+0x3e>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <DIO_voidSetPinDirection+0x58>
    1a22:	bc c0       	rjmp	.+376    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
    1a24:	2c 81       	ldd	r18, Y+4	; 0x04
    1a26:	3d 81       	ldd	r19, Y+5	; 0x05
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <DIO_voidSetPinDirection+0x4a>
    1a2e:	5f c0       	rjmp	.+190    	; 0x1aee <DIO_voidSetPinDirection+0x108>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <DIO_voidSetPinDirection+0x56>
    1a3a:	85 c0       	rjmp	.+266    	; 0x1b46 <DIO_voidSetPinDirection+0x160>
    1a3c:	af c0       	rjmp	.+350    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
	{
		case PORTA:
			if(Copy_u8PinMode == INPUT)
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 23       	and	r24, r24
    1a42:	a9 f4       	brne	.+42     	; 0x1a6e <DIO_voidSetPinDirection+0x88>
			{
				CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
    1a44:	aa e3       	ldi	r26, 0x3A	; 58
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	ea e3       	ldi	r30, 0x3A	; 58
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_voidSetPinDirection+0x7c>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <DIO_voidSetPinDirection+0x78>
    1a66:	80 95       	com	r24
    1a68:	84 23       	and	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	97 c0       	rjmp	.+302    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRA, Copy_u8PinNumber);
    1a6e:	aa e3       	ldi	r26, 0x3A	; 58
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ea e3       	ldi	r30, 0x3A	; 58
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_voidSetPinDirection+0xa6>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_voidSetPinDirection+0xa2>
    1a90:	84 2b       	or	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	83 c0       	rjmp	.+262    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTB:
			if(Copy_u8PinMode == INPUT)
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 23       	and	r24, r24
    1a9a:	a9 f4       	brne	.+42     	; 0x1ac6 <DIO_voidSetPinDirection+0xe0>
			{
				CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
    1a9c:	a7 e3       	ldi	r26, 0x37	; 55
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e3       	ldi	r30, 0x37	; 55
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_voidSetPinDirection+0xd4>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_voidSetPinDirection+0xd0>
    1abe:	80 95       	com	r24
    1ac0:	84 23       	and	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	6b c0       	rjmp	.+214    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRB, Copy_u8PinNumber);
    1ac6:	a7 e3       	ldi	r26, 0x37	; 55
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e7 e3       	ldi	r30, 0x37	; 55
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_voidSetPinDirection+0xfe>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_voidSetPinDirection+0xfa>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	57 c0       	rjmp	.+174    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTC:
			if(Copy_u8PinMode == INPUT)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 23       	and	r24, r24
    1af2:	a9 f4       	brne	.+42     	; 0x1b1e <DIO_voidSetPinDirection+0x138>
			{
				CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
    1af4:	a4 e3       	ldi	r26, 0x34	; 52
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e4 e3       	ldi	r30, 0x34	; 52
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_voidSetPinDirection+0x12c>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_voidSetPinDirection+0x128>
    1b16:	80 95       	com	r24
    1b18:	84 23       	and	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRC, Copy_u8PinNumber);
    1b1e:	a4 e3       	ldi	r26, 0x34	; 52
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e4 e3       	ldi	r30, 0x34	; 52
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_voidSetPinDirection+0x156>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_voidSetPinDirection+0x152>
    1b40:	84 2b       	or	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	2b c0       	rjmp	.+86     	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTD:
			if(Copy_u8PinMode == INPUT)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	88 23       	and	r24, r24
    1b4a:	a9 f4       	brne	.+42     	; 0x1b76 <DIO_voidSetPinDirection+0x190>
			{
				CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
    1b4c:	a1 e3       	ldi	r26, 0x31	; 49
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e1 e3       	ldi	r30, 0x31	; 49
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <DIO_voidSetPinDirection+0x184>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <DIO_voidSetPinDirection+0x180>
    1b6e:	80 95       	com	r24
    1b70:	84 23       	and	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	13 c0       	rjmp	.+38     	; 0x1b9c <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRD, Copy_u8PinNumber);
    1b76:	a1 e3       	ldi	r26, 0x31	; 49
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e1 e3       	ldi	r30, 0x31	; 49
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_voidSetPinDirection+0x1ae>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_voidSetPinDirection+0x1aa>
    1b98:	84 2b       	or	r24, r20
    1b9a:	8c 93       	st	X, r24
			
			
		default:
			break;
	}
}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <DIO_voidSetPinValue+0x6>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <DIO_voidSetPinValue+0x8>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
    1bbe:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	3d 83       	std	Y+5, r19	; 0x05
    1bc8:	2c 83       	std	Y+4, r18	; 0x04
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <DIO_voidSetPinValue+0x2a>
    1bd4:	43 c0       	rjmp	.+134    	; 0x1c5c <DIO_voidSetPinValue+0xb0>
    1bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	2c f4       	brge	.+10     	; 0x1bea <DIO_voidSetPinValue+0x3e>
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	9d 81       	ldd	r25, Y+5	; 0x05
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	71 f0       	breq	.+28     	; 0x1c04 <DIO_voidSetPinValue+0x58>
    1be8:	bc c0       	rjmp	.+376    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <DIO_voidSetPinValue+0x4a>
    1bf4:	5f c0       	rjmp	.+190    	; 0x1cb4 <DIO_voidSetPinValue+0x108>
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	83 30       	cpi	r24, 0x03	; 3
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <DIO_voidSetPinValue+0x56>
    1c00:	85 c0       	rjmp	.+266    	; 0x1d0c <DIO_voidSetPinValue+0x160>
    1c02:	af c0       	rjmp	.+350    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
	{
		case PORTA:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	a1 f4       	brne	.+40     	; 0x1c32 <DIO_voidSetPinValue+0x86>
			{
				SET_BIT(DIO_PORTA, Copy_u8PinNumber);
    1c0a:	ab e3       	ldi	r26, 0x3B	; 59
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e3       	ldi	r30, 0x3B	; 59
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <DIO_voidSetPinValue+0x7c>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <DIO_voidSetPinValue+0x78>
    1c2c:	84 2b       	or	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	98 c0       	rjmp	.+304    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
    1c32:	ab e3       	ldi	r26, 0x3B	; 59
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	eb e3       	ldi	r30, 0x3B	; 59
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_voidSetPinValue+0xa4>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_voidSetPinValue+0xa0>
    1c54:	80 95       	com	r24
    1c56:	84 23       	and	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	83 c0       	rjmp	.+262    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
		break;
		
		case PORTB:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	a1 f4       	brne	.+40     	; 0x1c8a <DIO_voidSetPinValue+0xde>
			{
				SET_BIT(DIO_PORTB, Copy_u8PinNumber);
    1c62:	a8 e3       	ldi	r26, 0x38	; 56
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e8 e3       	ldi	r30, 0x38	; 56
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_voidSetPinValue+0xd4>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <DIO_voidSetPinValue+0xd0>
    1c84:	84 2b       	or	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	6c c0       	rjmp	.+216    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
    1c8a:	a8 e3       	ldi	r26, 0x38	; 56
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e8 e3       	ldi	r30, 0x38	; 56
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_voidSetPinValue+0xfc>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_voidSetPinValue+0xf8>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	57 c0       	rjmp	.+174    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
		break;

		case PORTC:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	a1 f4       	brne	.+40     	; 0x1ce2 <DIO_voidSetPinValue+0x136>
			{
				SET_BIT(DIO_PORTC, Copy_u8PinNumber);
    1cba:	a5 e3       	ldi	r26, 0x35	; 53
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e3       	ldi	r30, 0x35	; 53
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_voidSetPinValue+0x12c>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_voidSetPinValue+0x128>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	40 c0       	rjmp	.+128    	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
    1ce2:	a5 e3       	ldi	r26, 0x35	; 53
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e5 e3       	ldi	r30, 0x35	; 53
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_voidSetPinValue+0x154>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <DIO_voidSetPinValue+0x150>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	2b c0       	rjmp	.+86     	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
			break;

		case PORTD:
			if (Copy_u8PinState == HIGH) // INPUT_PULLUP
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	a1 f4       	brne	.+40     	; 0x1d3a <DIO_voidSetPinValue+0x18e>
			{
				SET_BIT(DIO_PORTD, Copy_u8PinNumber);
    1d12:	a2 e3       	ldi	r26, 0x32	; 50
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e2 e3       	ldi	r30, 0x32	; 50
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 2e       	mov	r0, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <DIO_voidSetPinValue+0x184>
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <DIO_voidSetPinValue+0x180>
    1d34:	84 2b       	or	r24, r20
    1d36:	8c 93       	st	X, r24
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
    1d3a:	a2 e3       	ldi	r26, 0x32	; 50
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e2 e3       	ldi	r30, 0x32	; 50
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 2e       	mov	r0, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_voidSetPinValue+0x1ac>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <DIO_voidSetPinValue+0x1a8>
    1d5c:	80 95       	com	r24
    1d5e:	84 23       	and	r24, r20
    1d60:	8c 93       	st	X, r24
			}
			break;

	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <DIO_voidSetPortDirection>:
//PORTA = 0b00000001;			// Bit (Pin) 0 in port A has pull up resistor turned on  



void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortMode)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <DIO_voidSetPortDirection+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <DIO_voidSetPortDirection+0x8>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	3c 83       	std	Y+4, r19	; 0x04
    1d8a:	2b 83       	std	Y+3, r18	; 0x03
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	91 05       	cpc	r25, r1
    1d94:	21 f1       	breq	.+72     	; 0x1dde <DIO_voidSetPortDirection+0x6c>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <DIO_voidSetPortDirection+0x38>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <DIO_voidSetPortDirection+0x4e>
    1da8:	46 c0       	rjmp	.+140    	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	21 f1       	breq	.+72     	; 0x1dfc <DIO_voidSetPortDirection+0x8a>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	91 05       	cpc	r25, r1
    1dbc:	71 f1       	breq	.+92     	; 0x1e1a <DIO_voidSetPortDirection+0xa8>
    1dbe:	3b c0       	rjmp	.+118    	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
	{
		case PORTA:
			if(Copy_u8PortMode == OUTPUT)
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	29 f4       	brne	.+10     	; 0x1dd0 <DIO_voidSetPortDirection+0x5e>
			{
				DIO_DDRA = OUTPUT_PORT_VALUE;
    1dc6:	ea e3       	ldi	r30, 0x3A	; 58
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	80 83       	st	Z, r24
    1dce:	33 c0       	rjmp	.+102    	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == INPUT)
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	88 23       	and	r24, r24
    1dd4:	81 f5       	brne	.+96     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRA = INPUT_PORT_VALUE;
    1dd6:	ea e3       	ldi	r30, 0x3A	; 58
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	10 82       	st	Z, r1
    1ddc:	2c c0       	rjmp	.+88     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
		break;
		
		case PORTB:
			if(Copy_u8PortMode == OUTPUT)
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	29 f4       	brne	.+10     	; 0x1dee <DIO_voidSetPortDirection+0x7c>
			{
				DIO_DDRB = OUTPUT_PORT_VALUE;
    1de4:	e7 e3       	ldi	r30, 0x37	; 55
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
    1dec:	24 c0       	rjmp	.+72     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode ==INPUT)
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	88 23       	and	r24, r24
    1df2:	09 f5       	brne	.+66     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRB = INPUT_PORT_VALUE;
    1df4:	e7 e3       	ldi	r30, 0x37	; 55
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	10 82       	st	Z, r1
    1dfa:	1d c0       	rjmp	.+58     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
		break;

		case PORTC:
			if(Copy_u8PortMode == OUTPUT)
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <DIO_voidSetPortDirection+0x9a>
			{
				DIO_DDRC = OUTPUT_PORT_VALUE;
    1e02:	e4 e3       	ldi	r30, 0x34	; 52
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	80 83       	st	Z, r24
    1e0a:	15 c0       	rjmp	.+42     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == INPUT)
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	88 23       	and	r24, r24
    1e10:	91 f4       	brne	.+36     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRC = INPUT_PORT_VALUE;
    1e12:	e4 e3       	ldi	r30, 0x34	; 52
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	10 82       	st	Z, r1
    1e18:	0e c0       	rjmp	.+28     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
		break;

		case PORTD:
			if(Copy_u8PortMode ==OUTPUT)
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <DIO_voidSetPortDirection+0xb8>
			{
				DIO_DDRD = OUTPUT_PORT_VALUE;
    1e20:	e1 e3       	ldi	r30, 0x31	; 49
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	80 83       	st	Z, r24
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == INPUT)
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	88 23       	and	r24, r24
    1e2e:	19 f4       	brne	.+6      	; 0x1e36 <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRD = INPUT_PORT_VALUE;
    1e30:	e1 e3       	ldi	r30, 0x31	; 49
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	10 82       	st	Z, r1
			}
		break;

	}
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <DIO_voidSetPortValue>:


void 	DIO_voidSetPortValue(u8 Copy_u8PortName, u8 Copy_u8Value)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <DIO_voidSetPortValue+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <DIO_voidSetPortValue+0x8>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3c 83       	std	Y+4, r19	; 0x04
    1e5c:	2b 83       	std	Y+3, r18	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	d1 f0       	breq	.+52     	; 0x1e9c <DIO_voidSetPortValue+0x58>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <DIO_voidSetPortValue+0x38>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <DIO_voidSetPortValue+0x4e>
    1e7a:	1e c0       	rjmp	.+60     	; 0x1eb8 <DIO_voidSetPortValue+0x74>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	81 f0       	breq	.+32     	; 0x1ea6 <DIO_voidSetPortValue+0x62>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	81 f0       	breq	.+32     	; 0x1eb0 <DIO_voidSetPortValue+0x6c>
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <DIO_voidSetPortValue+0x74>
	{
		case PORTA: 
			DIO_PORTA = Copy_u8Value;
    1e92:	eb e3       	ldi	r30, 0x3B	; 59
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 83       	st	Z, r24
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <DIO_voidSetPortValue+0x74>
		break;
		
		case PORTB:
			DIO_PORTB = Copy_u8Value;
    1e9c:	e8 e3       	ldi	r30, 0x38	; 56
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	80 83       	st	Z, r24
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <DIO_voidSetPortValue+0x74>
		break;

		case PORTC:
			DIO_PORTC = Copy_u8Value;
    1ea6:	e5 e3       	ldi	r30, 0x35	; 53
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <DIO_voidSetPortValue+0x74>
		break;

		case PORTD:
			DIO_PORTD = Copy_u8Value;
    1eb0:	e2 e3       	ldi	r30, 0x32	; 50
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
		break;

	}
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <DIO_u8GetPinValue+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <DIO_u8GetPinValue+0x8>
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    1ed6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName)
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3d 83       	std	Y+5, r19	; 0x05
    1ee0:	2c 83       	std	Y+4, r18	; 0x04
    1ee2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ee4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ee6:	41 30       	cpi	r20, 0x01	; 1
    1ee8:	51 05       	cpc	r21, r1
    1eea:	41 f1       	breq	.+80     	; 0x1f3c <DIO_u8GetPinValue+0x76>
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	34 f4       	brge	.+12     	; 0x1f02 <DIO_u8GetPinValue+0x3c>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	21 15       	cp	r18, r1
    1efc:	31 05       	cpc	r19, r1
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <DIO_u8GetPinValue+0x52>
    1f00:	52 c0       	rjmp	.+164    	; 0x1fa6 <DIO_u8GetPinValue+0xe0>
    1f02:	4c 81       	ldd	r20, Y+4	; 0x04
    1f04:	5d 81       	ldd	r21, Y+5	; 0x05
    1f06:	42 30       	cpi	r20, 0x02	; 2
    1f08:	51 05       	cpc	r21, r1
    1f0a:	51 f1       	breq	.+84     	; 0x1f60 <DIO_u8GetPinValue+0x9a>
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	83 30       	cpi	r24, 0x03	; 3
    1f12:	91 05       	cpc	r25, r1
    1f14:	b9 f1       	breq	.+110    	; 0x1f84 <DIO_u8GetPinValue+0xbe>
    1f16:	47 c0       	rjmp	.+142    	; 0x1fa6 <DIO_u8GetPinValue+0xe0>
	{
		case PORTA:
			Local_u8PinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    1f18:	e9 e3       	ldi	r30, 0x39	; 57
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a9 01       	movw	r20, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_u8GetPinValue+0x6a>
    1f2c:	55 95       	asr	r21
    1f2e:	47 95       	ror	r20
    1f30:	8a 95       	dec	r24
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_u8GetPinValue+0x66>
    1f34:	ca 01       	movw	r24, r20
    1f36:	81 70       	andi	r24, 0x01	; 1
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	35 c0       	rjmp	.+106    	; 0x1fa6 <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTB:
			Local_u8PinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    1f3c:	e6 e3       	ldi	r30, 0x36	; 54
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a9 01       	movw	r20, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <DIO_u8GetPinValue+0x8e>
    1f50:	55 95       	asr	r21
    1f52:	47 95       	ror	r20
    1f54:	8a 95       	dec	r24
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <DIO_u8GetPinValue+0x8a>
    1f58:	ca 01       	movw	r24, r20
    1f5a:	81 70       	andi	r24, 0x01	; 1
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	23 c0       	rjmp	.+70     	; 0x1fa6 <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTC:
			Local_u8PinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    1f60:	e3 e3       	ldi	r30, 0x33	; 51
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_u8GetPinValue+0xb2>
    1f74:	55 95       	asr	r21
    1f76:	47 95       	ror	r20
    1f78:	8a 95       	dec	r24
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <DIO_u8GetPinValue+0xae>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	11 c0       	rjmp	.+34     	; 0x1fa6 <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTD:
			Local_u8PinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    1f84:	e0 e3       	ldi	r30, 0x30	; 48
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a9 01       	movw	r20, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_u8GetPinValue+0xd6>
    1f98:	55 95       	asr	r21
    1f9a:	47 95       	ror	r20
    1f9c:	8a 95       	dec	r24
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_u8GetPinValue+0xd2>
    1fa0:	ca 01       	movw	r24, r20
    1fa2:	81 70       	andi	r24, 0x01	; 1
    1fa4:	89 83       	std	Y+1, r24	; 0x01
		default:
			/* Error To Be Displayed */
		break;
	}
	
	return Local_u8PinValue;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <ADC_voidInit>:

ADC_STATE = IDLE;
 static u16 *GPu16Copy = NULL;
 static	void(*GPF)(void) =NULL;
void ADC_voidInit 	(void)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62

#if ReferenceSelection ==	AVCC
	//select ref voltage = AVCC
	//DIO_voidSetPortDirection(PORTA , INPUT);

	SET_BIT(ADMUX_REG , ADMUX_REFS0);
    1fc0:	a7 e2       	ldi	r26, 0x27	; 39
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e7 e2       	ldi	r30, 0x27	; 39
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	80 64       	ori	r24, 0x40	; 64
    1fcc:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG , ADMUX_REFS1);
    1fce:	a7 e2       	ldi	r26, 0x27	; 39
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e7 e2       	ldi	r30, 0x27	; 39
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8f 77       	andi	r24, 0x7F	; 127
    1fda:	8c 93       	st	X, r24
	#elif  ADC_RETURN == ADC_LEFT
	// LEFT ADJUST
	SET_BIT(ADMUX_REG , ADMUX_ADLAR);
	#endif
#if PRESCALER == PRE64
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS2);
    1fdc:	a6 e2       	ldi	r26, 0x26	; 38
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e6 e2       	ldi	r30, 0x26	; 38
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	84 60       	ori	r24, 0x04	; 4
    1fe8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
    1fea:	a6 e2       	ldi	r26, 0x26	; 38
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e6 e2       	ldi	r30, 0x26	; 38
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	82 60       	ori	r24, 0x02	; 2
    1ff6:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG , ADCSRA_ADPS0);
    1ff8:	a6 e2       	ldi	r26, 0x26	; 38
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e6 e2       	ldi	r30, 0x26	; 38
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8e 7f       	andi	r24, 0xFE	; 254
    2004:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS1);
	SET_BIT(ADCSRA_REG , ADCSRA_ADPS0);
#elif	PRESCALER == PRE8
#endif
	//ADC Enable
	SET_BIT(ADCSRA_REG , ADCSRA_ADEN);
    2006:	a6 e2       	ldi	r26, 0x26	; 38
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e6 e2       	ldi	r30, 0x26	; 38
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	8c 93       	st	X, r24
	//SET_BIT(ADCSRA_REG , ADCSRA_ADIF);
	//#endif
	//prescaler 64


}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <ADC_u16GetAnalogReadSYNC>:
//Return : u32
//Func Descreption : Function that starting the conversion and return
// it to a u32
//..........................//
u16 ADC_u16GetAnalogReadSYNC(u8 Copy_Channel)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01

	//u32 Local_u32Counter ;
	//clear Mux from 0 to 4 (reg&0b11100000)
	ADMUX_REG &= ADC_CHANNEL_MASK ;
    2026:	a7 e2       	ldi	r26, 0x27	; 39
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e7 e2       	ldi	r30, 0x27	; 39
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 7e       	andi	r24, 0xE0	; 224
    2032:	8c 93       	st	X, r24
	//reg or with copy_channel
	ADMUX_REG |= Copy_Channel ;
    2034:	a7 e2       	ldi	r26, 0x27	; 39
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e7 e2       	ldi	r30, 0x27	; 39
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	90 81       	ld	r25, Z
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	89 2b       	or	r24, r25
    2042:	8c 93       	st	X, r24
	//start conversion
	SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    2044:	a6 e2       	ldi	r26, 0x26	; 38
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e6 e2       	ldi	r30, 0x26	; 38
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	80 64       	ori	r24, 0x40	; 64
    2050:	8c 93       	st	X, r24
	//polling flag
	while((GET_BIT(ADCSRA_REG,ADCSRA_ADIF))==0);
    2052:	e6 e2       	ldi	r30, 0x26	; 38
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	82 95       	swap	r24
    205a:	8f 70       	andi	r24, 0x0F	; 15
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	81 70       	andi	r24, 0x01	; 1
    2062:	90 70       	andi	r25, 0x00	; 0
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	a9 f3       	breq	.-22     	; 0x2052 <ADC_u16GetAnalogReadSYNC+0x38>
	//clear flag
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    2068:	a6 e2       	ldi	r26, 0x26	; 38
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e6 e2       	ldi	r30, 0x26	; 38
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 61       	ori	r24, 0x10	; 16
    2074:	8c 93       	st	X, r24
	//Local_u32ADCDigitalValue = ADCL_REG + (ADCH_REG << 8) ;
//
//	Local_u32ADCAnalogValue = (Local_u32ADCDigitalValue * 500) / 1024 ;

#if ADC_RETURN == BITS_10
	return ADC_REG ;
    2076:	e4 e2       	ldi	r30, 0x24	; 36
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
#elif  ADC_RETURN == BITS_8
	return ADCH_REG ;
#endif
}
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <ADC_u16GetAnalogReadASYNC>:
//.(*PF_NotificationFun).......................//
//.Function Desc:Asynchronus ADC using ISR ...//
//.NOTE!!!:Enable Global Interrupt in main...//
//..........................................//
u8 	ADC_u16GetAnalogReadASYNC(u8 Copy_Channel,u16 *Pu8Reading,void (*PF_NotificationFun)(void))
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <ADC_u16GetAnalogReadASYNC+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <ADC_u16GetAnalogReadASYNC+0x8>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <ADC_u16GetAnalogReadASYNC+0xa>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	7c 83       	std	Y+4, r23	; 0x04
    2098:	6b 83       	std	Y+3, r22	; 0x03
    209a:	5e 83       	std	Y+6, r21	; 0x06
    209c:	4d 83       	std	Y+5, r20	; 0x05
	u8	Local_uErrorState = OK;
    209e:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_STATE == IDLE)
    20a0:	80 91 68 00 	lds	r24, 0x0068
    20a4:	90 91 69 00 	lds	r25, 0x0069
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	91 05       	cpc	r25, r1
    20ac:	a9 f5       	brne	.+106    	; 0x2118 <ADC_u16GetAnalogReadASYNC+0x92>
	{


		if((Pu8Reading==NULL)||(PF_NotificationFun==NULL))
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	21 f0       	breq	.+8      	; 0x20be <ADC_u16GetAnalogReadASYNC+0x38>
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	19 f4       	brne	.+6      	; 0x20c4 <ADC_u16GetAnalogReadASYNC+0x3e>
		{
			Local_uErrorState = NOK;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	2c c0       	rjmp	.+88     	; 0x211c <ADC_u16GetAnalogReadASYNC+0x96>
		}
		else
		{
			//assign the value to gp
			GPu16Copy=Pu8Reading;
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	90 93 8f 00 	sts	0x008F, r25
    20cc:	80 93 8e 00 	sts	0x008E, r24
			GPF=PF_NotificationFun;
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	90 93 91 00 	sts	0x0091, r25
    20d8:	80 93 90 00 	sts	0x0090, r24
			//u32 Local_u32Counter ;
			//clear Mux from 0 to 4 (reg&0b11100000)
			ADMUX_REG &= ADC_CHANNEL_MASK ;
    20dc:	a7 e2       	ldi	r26, 0x27	; 39
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e7 e2       	ldi	r30, 0x27	; 39
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 7e       	andi	r24, 0xE0	; 224
    20e8:	8c 93       	st	X, r24
			//reg or with copy_channel
			ADMUX_REG |= Copy_Channel ;
    20ea:	a7 e2       	ldi	r26, 0x27	; 39
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e7 e2       	ldi	r30, 0x27	; 39
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	90 81       	ld	r25, Z
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	89 2b       	or	r24, r25
    20f8:	8c 93       	st	X, r24
			//start conversion
			SET_BIT(ADCSRA_REG , ADCSRA_ADSC);
    20fa:	a6 e2       	ldi	r26, 0x26	; 38
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e2       	ldi	r30, 0x26	; 38
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 64       	ori	r24, 0x40	; 64
    2106:	8c 93       	st	X, r24
			//enable Interrupt
			SET_BIT(ADCSRA_REG,ADC_ADIE);
    2108:	a6 e2       	ldi	r26, 0x26	; 38
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e2       	ldi	r30, 0x26	; 38
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	88 60       	ori	r24, 0x08	; 8
    2114:	8c 93       	st	X, r24
    2116:	02 c0       	rjmp	.+4      	; 0x211c <ADC_u16GetAnalogReadASYNC+0x96>
		}
	}
	else {
		 Local_uErrorState = BUSY_FUNC;
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_uErrorState ;
    211c:	89 81       	ldd	r24, Y+1	; 0x01
}
    211e:	26 96       	adiw	r28, 0x06	; 6
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <__vector_16>:

void __vector_16(void) __attribute__((signal));

void __vector_16(void)
{
    2130:	1f 92       	push	r1
    2132:	0f 92       	push	r0
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	0f 92       	push	r0
    2138:	11 24       	eor	r1, r1
    213a:	2f 93       	push	r18
    213c:	3f 93       	push	r19
    213e:	4f 93       	push	r20
    2140:	5f 93       	push	r21
    2142:	6f 93       	push	r22
    2144:	7f 93       	push	r23
    2146:	8f 93       	push	r24
    2148:	9f 93       	push	r25
    214a:	af 93       	push	r26
    214c:	bf 93       	push	r27
    214e:	ef 93       	push	r30
    2150:	ff 93       	push	r31
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62

	//Read ADC Result
	*GPu16Copy=ADC_REG;
    215a:	a0 91 8e 00 	lds	r26, 0x008E
    215e:	b0 91 8f 00 	lds	r27, 0x008F
    2162:	e4 e2       	ldi	r30, 0x24	; 36
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	8d 93       	st	X+, r24
    216c:	9c 93       	st	X, r25
	//Change the state of ADC TO IDLE
	ADC_STATE = IDLE ;
    216e:	84 e0       	ldi	r24, 0x04	; 4
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	90 93 69 00 	sts	0x0069, r25
    2176:	80 93 68 00 	sts	0x0068, r24
	//Invoke Notification func
	GPF();
    217a:	e0 91 90 00 	lds	r30, 0x0090
    217e:	f0 91 91 00 	lds	r31, 0x0091
    2182:	09 95       	icall
	//Disable Interrupt
	CLR_BIT(ADCSRA_REG,ADC_ADIE);
    2184:	a6 e2       	ldi	r26, 0x26	; 38
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e6 e2       	ldi	r30, 0x26	; 38
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	87 7f       	andi	r24, 0xF7	; 247
    2190:	8c 93       	st	X, r24
}
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	ff 91       	pop	r31
    2198:	ef 91       	pop	r30
    219a:	bf 91       	pop	r27
    219c:	af 91       	pop	r26
    219e:	9f 91       	pop	r25
    21a0:	8f 91       	pop	r24
    21a2:	7f 91       	pop	r23
    21a4:	6f 91       	pop	r22
    21a6:	5f 91       	pop	r21
    21a8:	4f 91       	pop	r20
    21aa:	3f 91       	pop	r19
    21ac:	2f 91       	pop	r18
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0f 90       	pop	r0
    21b4:	1f 90       	pop	r1
    21b6:	18 95       	reti

000021b8 <LCD_voidSendCommand>:
#include <util/delay.h>



void LCD_voidSendCommand(u8 Copy_u8Command)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	2f 97       	sbiw	r28, 0x0f	; 15
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set The RS Pin To Be Low: 0v for Command */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	65 e0       	ldi	r22, 0x05	; 5
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	
	/* Set The RW Pin To Be Low: 0v for Write */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	66 e0       	ldi	r22, 0x06	; 6
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	
	/* Set The Port Value To Be The Command */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    21e6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <DIO_voidSetPortValue>
	
	/* Set The Enable Pin To High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	67 e0       	ldi	r22, 0x07	; 7
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e4       	ldi	r27, 0x40	; 64
    21fc:	8b 87       	std	Y+11, r24	; 0x0b
    21fe:	9c 87       	std	Y+12, r25	; 0x0c
    2200:	ad 87       	std	Y+13, r26	; 0x0d
    2202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	a9 87       	std	Y+9, r26	; 0x09
    2222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <LCD_voidSendCommand+0xee>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_voidSendCommand+0xdc>
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <LCD_voidSendCommand+0xd0>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_voidSendCommand+0x118>
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait For 2msec */
	_delay_ms(2);
	
	/* Set The Enable Pin To Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN,LOW);
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	67 e0       	ldi	r22, 0x07	; 7
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	
}
    22e2:	2f 96       	adiw	r28, 0x0f	; 15
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	2f 97       	sbiw	r28, 0x0f	; 15
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set The RS Pin To Be High: 5v for Data */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	65 e0       	ldi	r22, 0x05	; 5
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	
	/* Set The RW Pin To Be Low: 0v for Write */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	66 e0       	ldi	r22, 0x06	; 6
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	
	/* Set The Port Value To Be The Data */
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Data);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	6f 85       	ldd	r22, Y+15	; 0x0f
    2322:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <DIO_voidSetPortValue>
	
	/* Set The Enable Pin To High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, HIGH);
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	67 e0       	ldi	r22, 0x07	; 7
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a0 e0       	ldi	r26, 0x00	; 0
    2336:	b0 e4       	ldi	r27, 0x40	; 64
    2338:	8b 87       	std	Y+11, r24	; 0x0b
    233a:	9c 87       	std	Y+12, r25	; 0x0c
    233c:	ad 87       	std	Y+13, r26	; 0x0d
    233e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a ef       	ldi	r20, 0xFA	; 250
    234e:	54 e4       	ldi	r21, 0x44	; 68
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8f 83       	std	Y+7, r24	; 0x07
    235a:	98 87       	std	Y+8, r25	; 0x08
    235c:	a9 87       	std	Y+9, r26	; 0x09
    235e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	2c f4       	brge	.+10     	; 0x2382 <LCD_voidSendData+0x8e>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
    2380:	3f c0       	rjmp	.+126    	; 0x2400 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2396:	18 16       	cp	r1, r24
    2398:	4c f5       	brge	.+82     	; 0x23ec <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	6b 85       	ldd	r22, Y+11	; 0x0b
    239c:	7c 85       	ldd	r23, Y+12	; 0x0c
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <LCD_voidSendData+0xee>
    23c4:	88 ec       	ldi	r24, 0xC8	; 200
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_voidSendData+0xdc>
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f7       	brne	.-38     	; 0x23c4 <LCD_voidSendData+0xd0>
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <LCD_voidSendData+0x118>
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait For 2msec */
	_delay_ms(2);
	
	/* Set The Enable Pin To Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, LOW);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	67 e0       	ldi	r22, 0x07	; 7
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	
}
    241e:	2f 96       	adiw	r28, 0x0f	; 15
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <LCD_voidInit>:

void LCD_voidInit(void)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	2e 97       	sbiw	r28, 0x0e	; 14
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
	/* Set The Data Port To Be Output */
	DIO_voidSetPortDirection(LCD_DATA_PORT, OUTPUT);
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <DIO_voidSetPortDirection>
	
	/* Set The Control Pins To Be Output */
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	65 e0       	ldi	r22, 0x05	; 5
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	66 e0       	ldi	r22, 0x06	; 6
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	67 e0       	ldi	r22, 0x07	; 7
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 e2       	ldi	r26, 0x20	; 32
    2470:	b2 e4       	ldi	r27, 0x42	; 66
    2472:	8b 87       	std	Y+11, r24	; 0x0b
    2474:	9c 87       	std	Y+12, r25	; 0x0c
    2476:	ad 87       	std	Y+13, r26	; 0x0d
    2478:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247a:	6b 85       	ldd	r22, Y+11	; 0x0b
    247c:	7c 85       	ldd	r23, Y+12	; 0x0c
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	4a ef       	ldi	r20, 0xFA	; 250
    2488:	54 e4       	ldi	r21, 0x44	; 68
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	8f 83       	std	Y+7, r24	; 0x07
    2494:	98 87       	std	Y+8, r25	; 0x08
    2496:	a9 87       	std	Y+9, r26	; 0x09
    2498:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	5f e3       	ldi	r21, 0x3F	; 63
    24aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ae:	88 23       	and	r24, r24
    24b0:	2c f4       	brge	.+10     	; 0x24bc <LCD_voidInit+0x8c>
		__ticks = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	3f c0       	rjmp	.+126    	; 0x253a <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	3f ef       	ldi	r19, 0xFF	; 255
    24c8:	4f e7       	ldi	r20, 0x7F	; 127
    24ca:	57 e4       	ldi	r21, 0x47	; 71
    24cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	4c f5       	brge	.+82     	; 0x2526 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e2       	ldi	r20, 0x20	; 32
    24e2:	51 e4       	ldi	r21, 0x41	; 65
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <LCD_voidInit+0xec>
    24fe:	88 ec       	ldi	r24, 0xC8	; 200
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_voidInit+0xda>
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	69 f7       	brne	.-38     	; 0x24fe <LCD_voidInit+0xce>
    2524:	14 c0       	rjmp	.+40     	; 0x254e <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_voidInit+0x116>
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
	/* Wait For 40msec*/
	_delay_ms(40);
	/* Send The Function set, N: 1 => 2-Lines, F: 0 => 5*8 dots*/
	LCD_voidSendCommand(0x38);
    254e:	88 e3       	ldi	r24, 0x38	; 56
    2550:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0F);
    2554:	8f e0       	ldi	r24, 0x0F	; 15
    2556:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_voidSendCommand>
	
}
    2560:	2e 96       	adiw	r28, 0x0e	; 14
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <LCD_voidGoToXY>:



void LCD_voidGoToXY(u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	00 d0       	rcall	.+0      	; 0x2578 <LCD_voidGoToXY+0x6>
    2578:	0f 92       	push	r0
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	8a 83       	std	Y+2, r24	; 0x02
    2580:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0;
    2582:	19 82       	std	Y+1, r1	; 0x01
	/* Check if we are at the first row */
	if(Copy_u8XPosition == 0)
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	88 23       	and	r24, r24
    2588:	19 f4       	brne	.+6      	; 0x2590 <LCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8YPosition;
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	06 c0       	rjmp	.+12     	; 0x259c <LCD_voidGoToXY+0x2a>
	}
	/* Check if we are at the second row */
	else if(Copy_u8XPosition == 1)
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	19 f4       	brne	.+6      	; 0x259c <LCD_voidGoToXY+0x2a>
	{
		/* Add 0x40 To The Y-Position */
		Local_u8Address = Copy_u8YPosition + 0x40;
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	80 5c       	subi	r24, 0xC0	; 192
    259a:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Set The 8th Bit to be 1 */
	SET_BIT(Local_u8Address, 7);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	80 68       	ori	r24, 0x80	; 128
    25a0:	89 83       	std	Y+1, r24	; 0x01
	/* Send The Set Address Of DDRAM */
	LCD_voidSendCommand(Local_u8Address);
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_voidSendCommand>
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8String)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <LCD_voidSendString+0x6>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	9b 83       	std	Y+3, r25	; 0x03
    25c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    25c4:	19 82       	std	Y+1, r1	; 0x01
    25c6:	0e c0       	rjmp	.+28     	; 0x25e4 <LCD_voidSendString+0x30>
	while(Copy_pu8String[Local_u8LoopCounter] != '\0')
	{
		LCD_voidSendData(Copy_pu8String[Local_u8LoopCounter]);
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	fc 01       	movw	r30, r24
    25d4:	e2 0f       	add	r30, r18
    25d6:	f3 1f       	adc	r31, r19
    25d8:	80 81       	ld	r24, Z
    25da:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_voidSendData>
		Local_u8LoopCounter++;
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8 * Copy_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Copy_pu8String[Local_u8LoopCounter] != '\0')
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	39 f7       	brne	.-50     	; 0x25c8 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <LCD_voidSendCustomCharacter>:
void LCD_voidSendCustomCharacter(
								u8 * Copy_pu8CharacterArray, 
								u8 Copy_u8PatternNum,
								u8 Copy_u8XPosition,
								u8 Copy_u8YPosition)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	27 97       	sbiw	r28, 0x07	; 7
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	6d 83       	std	Y+5, r22	; 0x05
    2620:	4e 83       	std	Y+6, r20	; 0x06
    2622:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter;
	u8 Local_u8CGRAMAddress;
	/* Calculate the CGRAM Address = PatternNum * 8 */
	Local_u8CGRAMAddress = Copy_u8PatternNum * 8;
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CGRAMAddress, 6);
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	80 64       	ori	r24, 0x40	; 64
    263c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Set CGRAM Address */
	LCD_voidSendCommand(Local_u8CGRAMAddress);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_voidSendCommand>
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    2644:	1a 82       	std	Y+2, r1	; 0x02
    2646:	0e c0       	rjmp	.+28     	; 0x2664 <LCD_voidSendCustomCharacter+0x5e>
	{
		/* Send Byte from The CharacterArray */
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);	
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	fc 01       	movw	r30, r24
    2654:	e2 0f       	add	r30, r18
    2656:	f3 1f       	adc	r31, r19
    2658:	80 81       	ld	r24, Z
    265a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_voidSendData>
	/* Calculate the CGRAM Address = PatternNum * 8 */
	Local_u8CGRAMAddress = Copy_u8PatternNum * 8;
	SET_BIT(Local_u8CGRAMAddress, 6);
	/* Send Set CGRAM Address */
	LCD_voidSendCommand(Local_u8CGRAMAddress);
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	8f 5f       	subi	r24, 0xFF	; 255
    2662:	8a 83       	std	Y+2, r24	; 0x02
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	88 30       	cpi	r24, 0x08	; 8
    2668:	78 f3       	brcs	.-34     	; 0x2648 <LCD_voidSendCustomCharacter+0x42>
	{
		/* Send Byte from The CharacterArray */
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);	
	}
	/* Send The Command To Set DDRAM Address */
	LCD_voidGoToXY(Copy_u8XPosition, Copy_u8YPosition);
    266a:	8e 81       	ldd	r24, Y+6	; 0x06
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_voidGoToXY>
	/* Display the pattern From the CGRAM */ 
	LCD_voidSendData(Copy_u8PatternNum);
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_voidSendData>
}
    2678:	27 96       	adiw	r28, 0x07	; 7
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <LCD_voidSendNumber>:

void LCD_voidSendNumber(u16 Copy_u16Number)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	2e 97       	sbiw	r28, 0x0e	; 14
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	9e 87       	std	Y+14, r25	; 0x0e
    26a0:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8Result[10];
	s8 Local_s8LoopCounter=0;
    26a2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8NumOfIterations = 0;
    26a4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16Number == 0)
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	21 f4       	brne	.+8      	; 0x26b6 <LCD_voidSendNumber+0x2c>
	{
		LCD_voidSendData('0');
    26ae:	80 e3       	ldi	r24, 0x30	; 48
    26b0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_voidSendData>
    26b4:	44 c0       	rjmp	.+136    	; 0x273e <LCD_voidSendNumber+0xb4>
	}
	else if(Copy_u16Number > 0)
    26b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <LCD_voidSendNumber+0x36>
    26be:	3f c0       	rjmp	.+126    	; 0x273e <LCD_voidSendNumber+0xb4>
    26c0:	22 c0       	rjmp	.+68     	; 0x2706 <LCD_voidSendNumber+0x7c>
	{
		while(Copy_u16Number != 0)
		{
			Local_u8Result[Local_s8LoopCounter] = Copy_u16Number % 10;
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	e8 2f       	mov	r30, r24
    26c6:	ff 27       	eor	r31, r31
    26c8:	e7 fd       	sbrc	r30, 7
    26ca:	f0 95       	com	r31
    26cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d0:	2a e0       	ldi	r18, 0x0A	; 10
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	b9 01       	movw	r22, r18
    26d6:	0e 94 33 19 	call	0x3266	; 0x3266 <__udivmodhi4>
    26da:	28 2f       	mov	r18, r24
    26dc:	ce 01       	movw	r24, r28
    26de:	03 96       	adiw	r24, 0x03	; 3
    26e0:	e8 0f       	add	r30, r24
    26e2:	f9 1f       	adc	r31, r25
    26e4:	20 83       	st	Z, r18
			Copy_u16Number /= 10;
    26e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ea:	2a e0       	ldi	r18, 0x0A	; 10
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	b9 01       	movw	r22, r18
    26f0:	0e 94 33 19 	call	0x3266	; 0x3266 <__udivmodhi4>
    26f4:	cb 01       	movw	r24, r22
    26f6:	9e 87       	std	Y+14, r25	; 0x0e
    26f8:	8d 87       	std	Y+13, r24	; 0x0d
			Local_s8LoopCounter++;
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8NumOfIterations++;
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	8f 5f       	subi	r24, 0xFF	; 255
    2704:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_voidSendData('0');
	}
	else if(Copy_u16Number > 0)
	{
		while(Copy_u16Number != 0)
    2706:	8d 85       	ldd	r24, Y+13	; 0x0d
    2708:	9e 85       	ldd	r25, Y+14	; 0x0e
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	d1 f6       	brne	.-76     	; 0x26c2 <LCD_voidSendNumber+0x38>
			Local_u8Result[Local_s8LoopCounter] = Copy_u16Number % 10;
			Copy_u16Number /= 10;
			Local_s8LoopCounter++;
			Local_u8NumOfIterations++;
		}
		for(Local_s8LoopCounter = (Local_u8NumOfIterations-1); Local_s8LoopCounter>=0; Local_s8LoopCounter--)
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	81 50       	subi	r24, 0x01	; 1
    2712:	8a 83       	std	Y+2, r24	; 0x02
    2714:	11 c0       	rjmp	.+34     	; 0x2738 <LCD_voidSendNumber+0xae>
		{
			LCD_voidSendData(Local_u8Result[Local_s8LoopCounter] + '0');
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	28 2f       	mov	r18, r24
    271a:	33 27       	eor	r19, r19
    271c:	27 fd       	sbrc	r18, 7
    271e:	30 95       	com	r19
    2720:	ce 01       	movw	r24, r28
    2722:	03 96       	adiw	r24, 0x03	; 3
    2724:	fc 01       	movw	r30, r24
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
    272a:	80 81       	ld	r24, Z
    272c:	80 5d       	subi	r24, 0xD0	; 208
    272e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_voidSendData>
			Local_u8Result[Local_s8LoopCounter] = Copy_u16Number % 10;
			Copy_u16Number /= 10;
			Local_s8LoopCounter++;
			Local_u8NumOfIterations++;
		}
		for(Local_s8LoopCounter = (Local_u8NumOfIterations-1); Local_s8LoopCounter>=0; Local_s8LoopCounter--)
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	81 50       	subi	r24, 0x01	; 1
    2736:	8a 83       	std	Y+2, r24	; 0x02
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	88 23       	and	r24, r24
    273c:	64 f7       	brge	.-40     	; 0x2716 <LCD_voidSendNumber+0x8c>
			LCD_voidSendData(Local_u8Result[Local_s8LoopCounter] + '0');
		}
	}


}
    273e:	2e 96       	adiw	r28, 0x0e	; 14
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <LCD_voidClearDisplay>:


void LCD_voidClearDisplay(void)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(CLEAR_COMMAND);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <LCD_voidSendCommand>
}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <KPD_voidInit>:
//.I/O : VOID ...............     //
//.RETURN : VOID  ..........     //
//.Desc:Initilazing KEYPAD..    //
//.............................//
void KPD_voidInit(void)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL1,OUTPUT);
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	64 e0       	ldi	r22, 0x04	; 4
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL2,OUTPUT);
    2776:	83 e0       	ldi	r24, 0x03	; 3
    2778:	65 e0       	ldi	r22, 0x05	; 5
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL3,OUTPUT);
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	66 e0       	ldi	r22, 0x06	; 6
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_COL,KEYPAD_COL4,OUTPUT);
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	67 e0       	ldi	r22, 0x07	; 7
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R0,INPUT);
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	64 e0       	ldi	r22, 0x04	; 4
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R1,INPUT);
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	65 e0       	ldi	r22, 0x05	; 5
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R2,INPUT);
    27a8:	82 e0       	ldi	r24, 0x02	; 2
    27aa:	66 e0       	ldi	r22, 0x06	; 6
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT_RO,KEYPAD_R3,INPUT);
    27b2:	82 e0       	ldi	r24, 0x02	; 2
    27b4:	67 e0       	ldi	r22, 0x07	; 7
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL1,HIGH);
    27bc:	83 e0       	ldi	r24, 0x03	; 3
    27be:	64 e0       	ldi	r22, 0x04	; 4
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL2,HIGH);
    27c6:	83 e0       	ldi	r24, 0x03	; 3
    27c8:	65 e0       	ldi	r22, 0x05	; 5
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL3,HIGH);
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	66 e0       	ldi	r22, 0x06	; 6
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,KEYPAD_COL4,HIGH);
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	67 e0       	ldi	r22, 0x07	; 7
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PORTC,KEYPAD_R0,HIGH);
    27e4:	82 e0       	ldi	r24, 0x02	; 2
    27e6:	64 e0       	ldi	r22, 0x04	; 4
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,KEYPAD_R1,HIGH);
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	65 e0       	ldi	r22, 0x05	; 5
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,KEYPAD_R2,HIGH);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,KEYPAD_R3,HIGH);
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	67 e0       	ldi	r22, 0x07	; 7
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
}
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <KPD_u8GetPressedKey+0x6>
    2818:	00 d0       	rcall	.+0      	; 0x281a <KPD_u8GetPressedKey+0x8>
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pinvalue;
	u8 Local_PressedKey=255;
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ColsIterator;
	u8 Local_u8RowsIterator;
	u8 Local_u8Flag =0;
    2824:	19 82       	std	Y+1, r1	; 0x01
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
    2826:	1b 82       	std	Y+3, r1	; 0x03
    2828:	67 c0       	rjmp	.+206    	; 0x28f8 <KPD_u8GetPressedKey+0xe6>
{
    //DEACTIVATE CURRENT COL
	DIO_voidSetPinValue(KEYPAD_PORT_COL,Local_Au8Cols_Num[Local_u8ColsIterator],LOW);
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	fc 01       	movw	r30, r24
    2832:	e6 59       	subi	r30, 0x96	; 150
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	90 81       	ld	r25, Z
    2838:	83 e0       	ldi	r24, 0x03	; 3
    283a:	69 2f       	mov	r22, r25
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	for( Local_u8RowsIterator=0;Local_u8RowsIterator<4;Local_u8RowsIterator++ )
    2842:	1a 82       	std	Y+2, r1	; 0x02
    2844:	43 c0       	rjmp	.+134    	; 0x28cc <KPD_u8GetPressedKey+0xba>
	{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	fc 01       	movw	r30, r24
    284e:	e2 59       	subi	r30, 0x92	; 146
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	90 81       	ld	r25, Z
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	69 2f       	mov	r22, r25
    2858:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <DIO_u8GetPinValue>
    285c:	8d 83       	std	Y+5, r24	; 0x05
		if(Local_u8Pinvalue==0)
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	88 23       	and	r24, r24
    2862:	89 f5       	brne	.+98     	; 0x28c6 <KPD_u8GetPressedKey+0xb4>
		{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	fc 01       	movw	r30, r24
    286c:	e2 59       	subi	r30, 0x92	; 146
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	90 81       	ld	r25, Z
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	69 2f       	mov	r22, r25
    2876:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <DIO_u8GetPinValue>
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	0c c0       	rjmp	.+24     	; 0x2896 <KPD_u8GetPressedKey+0x84>
		while(Local_u8Pinvalue==0)
		{
			Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	fc 01       	movw	r30, r24
    2886:	e2 59       	subi	r30, 0x92	; 146
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	90 81       	ld	r25, Z
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	69 2f       	mov	r22, r25
    2890:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <DIO_u8GetPinValue>
    2894:	8d 83       	std	Y+5, r24	; 0x05
	{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
		if(Local_u8Pinvalue==0)
		{
		Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
		while(Local_u8Pinvalue==0)
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	88 23       	and	r24, r24
    289a:	89 f3       	breq	.-30     	; 0x287e <KPD_u8GetPressedKey+0x6c>
		{
			Local_u8Pinvalue=DIO_u8GetPinValue(KEYPAD_PORT_RO,Local_Au8Rows_Num[Local_u8RowsIterator]);
		}
		Local_PressedKey=Local_Au8KeysArr[Local_u8RowsIterator][Local_u8ColsIterator];
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	48 2f       	mov	r20, r24
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	ca 01       	movw	r24, r20
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	82 0f       	add	r24, r18
    28b4:	93 1f       	adc	r25, r19
    28b6:	fc 01       	movw	r30, r24
    28b8:	ee 58       	subi	r30, 0x8E	; 142
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8Flag =1 ;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <KPD_u8GetPressedKey+0xc2>
	u8 Local_u8Flag =0;
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
{
    //DEACTIVATE CURRENT COL
	DIO_voidSetPinValue(KEYPAD_PORT_COL,Local_Au8Cols_Num[Local_u8ColsIterator],LOW);
	for( Local_u8RowsIterator=0;Local_u8RowsIterator<4;Local_u8RowsIterator++ )
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	8a 83       	std	Y+2, r24	; 0x02
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	84 30       	cpi	r24, 0x04	; 4
    28d0:	08 f4       	brcc	.+2      	; 0x28d4 <KPD_u8GetPressedKey+0xc2>
    28d2:	b9 cf       	rjmp	.-142    	; 0x2846 <KPD_u8GetPressedKey+0x34>
		Local_PressedKey=Local_Au8KeysArr[Local_u8RowsIterator][Local_u8ColsIterator];
		Local_u8Flag =1 ;
		break;
		}
	}
	DIO_voidSetPinValue(KEYPAD_PORT_COL,Local_Au8Cols_Num[Local_u8ColsIterator],HIGH);
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	fc 01       	movw	r30, r24
    28dc:	e6 59       	subi	r30, 0x96	; 150
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	90 81       	ld	r25, Z
    28e2:	83 e0       	ldi	r24, 0x03	; 3
    28e4:	69 2f       	mov	r22, r25
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	if(Local_u8Flag==1 )
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	39 f0       	breq	.+14     	; 0x2900 <KPD_u8GetPressedKey+0xee>
	u8 Local_u8Pinvalue;
	u8 Local_PressedKey=255;
	u8 Local_u8ColsIterator;
	u8 Local_u8RowsIterator;
	u8 Local_u8Flag =0;
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	8b 83       	std	Y+3, r24	; 0x03
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	08 f4       	brcc	.+2      	; 0x2900 <KPD_u8GetPressedKey+0xee>
    28fe:	95 cf       	rjmp	.-214    	; 0x282a <KPD_u8GetPressedKey+0x18>
	if(Local_u8Flag==1 )
	{
		break;
	}
}
return Local_PressedKey ;
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	62 97       	sbiw	r28, 0x12	; 18
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	99 8b       	std	Y+17, r25	; 0x11
    2928:	88 8b       	std	Y+16, r24	; 0x10
    292a:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    292c:	88 89       	ldd	r24, Y+16	; 0x10
    292e:	99 89       	ldd	r25, Y+17	; 0x11
    2930:	89 2f       	mov	r24, r25
    2932:	99 27       	eor	r25, r25
    2934:	80 65       	ori	r24, 0x50	; 80
    2936:	8f 87       	std	Y+15, r24	; 0x0f

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    2938:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    293c:	8f 85       	ldd	r24, Y+15	; 0x0f
    293e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    2942:	88 89       	ldd	r24, Y+16	; 0x10
    2944:	0e 94 c8 07 	call	0xf90	; 0xf90 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    2948:	8a 89       	ldd	r24, Y+18	; 0x12
    294a:	0e 94 c8 07 	call	0xf90	; 0xf90 <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    294e:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_voidSendStopCondition>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e2       	ldi	r26, 0x20	; 32
    2958:	b1 e4       	ldi	r27, 0x41	; 65
    295a:	8b 87       	std	Y+11, r24	; 0x0b
    295c:	9c 87       	std	Y+12, r25	; 0x0c
    295e:	ad 87       	std	Y+13, r26	; 0x0d
    2960:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	6b 85       	ldd	r22, Y+11	; 0x0b
    2964:	7c 85       	ldd	r23, Y+12	; 0x0c
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	9e 85       	ldd	r25, Y+14	; 0x0e
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8f 83       	std	Y+7, r24	; 0x07
    297c:	98 87       	std	Y+8, r25	; 0x08
    297e:	a9 87       	std	Y+9, r26	; 0x09
    2980:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	89 85       	ldd	r24, Y+9	; 0x09
    2988:	9a 85       	ldd	r25, Y+10	; 0x0a
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29be:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <EEPROM_voidSendDataByte+0xf2>
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9c 83       	std	Y+4, r25	; 0x04
    29ec:	8b 83       	std	Y+3, r24	; 0x03
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <EEPROM_voidSendDataByte+0xe0>
    29f6:	9c 83       	std	Y+4, r25	; 0x04
    29f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <EEPROM_voidSendDataByte+0xd4>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a10:	78 85       	ldd	r23, Y+8	; 0x08
    2a12:	89 85       	ldd	r24, Y+9	; 0x09
    2a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	9a 83       	std	Y+2, r25	; 0x02
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <EEPROM_voidSendDataByte+0x11c>
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    2a36:	62 96       	adiw	r28, 0x12	; 18
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	62 97       	sbiw	r28, 0x12	; 18
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	9a 8b       	std	Y+18, r25	; 0x12
    2a5e:	89 8b       	std	Y+17, r24	; 0x11
	u8 Data ;
	u8 Local_add ;
	Local_add = EEPROM_FIXED_ADDRESS |(A2_CONNECTION<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    2a60:	89 89       	ldd	r24, Y+17	; 0x11
    2a62:	9a 89       	ldd	r25, Y+18	; 0x12
    2a64:	89 2f       	mov	r24, r25
    2a66:	99 27       	eor	r25, r25
    2a68:	80 65       	ori	r24, 0x50	; 80
    2a6a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    2a6c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TWI_ErrorStatusSendStartConditionWithACK>
	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_add);
    2a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a72:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <TWI_ErrorStatusSendSlaveAddressWithWriteACK>
	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)(Copy_u16LocationAddress));
    2a76:	89 89       	ldd	r24, Y+17	; 0x11
    2a78:	0e 94 c8 07 	call	0xf90	; 0xf90 <TWI_ErrorStatusMasterWriteDataByteWithACK>
	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    2a7c:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>
	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_add);
    2a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a82:	0e 94 93 07 	call	0xf26	; 0xf26 <TWI_ErrorStatusSendSlaveAddressWithReadACK>
	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithNACK(&Data);
    2a86:	ce 01       	movw	r24, r28
    2a88:	40 96       	adiw	r24, 0x10	; 16
    2a8a:	0e 94 20 08 	call	0x1040	; 0x1040 <TWI_ErrorStatusMasterReadDataByteWithNACK>
	/*send the stop condition*/
	TWI_voidSendStopCondition();
    2a8e:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_voidSendStopCondition>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e2       	ldi	r26, 0x20	; 32
    2a98:	b1 e4       	ldi	r27, 0x41	; 65
    2a9a:	8b 87       	std	Y+11, r24	; 0x0b
    2a9c:	9c 87       	std	Y+12, r25	; 0x0c
    2a9e:	ad 87       	std	Y+13, r26	; 0x0d
    2aa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a ef       	ldi	r20, 0xFA	; 250
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8f 83       	std	Y+7, r24	; 0x07
    2abc:	98 87       	std	Y+8, r25	; 0x08
    2abe:	a9 87       	std	Y+9, r26	; 0x09
    2ac0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac4:	78 85       	ldd	r23, Y+8	; 0x08
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	2c f4       	brge	.+10     	; 0x2ae4 <EEPROM_u8ReadDataByte+0x9c>
		__ticks = 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
    2ae2:	3f c0       	rjmp	.+126    	; 0x2b62 <EEPROM_u8ReadDataByte+0x11a>
	else if (__tmp > 65535)
    2ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae6:	78 85       	ldd	r23, Y+8	; 0x08
    2ae8:	89 85       	ldd	r24, Y+9	; 0x09
    2aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	3f ef       	ldi	r19, 0xFF	; 255
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	57 e4       	ldi	r21, 0x47	; 71
    2af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af8:	18 16       	cp	r1, r24
    2afa:	4c f5       	brge	.+82     	; 0x2b4e <EEPROM_u8ReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <EEPROM_u8ReadDataByte+0xfc>
    2b26:	88 ec       	ldi	r24, 0xC8	; 200
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9c 83       	std	Y+4, r25	; 0x04
    2b2c:	8b 83       	std	Y+3, r24	; 0x03
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	9c 81       	ldd	r25, Y+4	; 0x04
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <EEPROM_u8ReadDataByte+0xea>
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	69 f7       	brne	.-38     	; 0x2b26 <EEPROM_u8ReadDataByte+0xde>
    2b4c:	14 c0       	rjmp	.+40     	; 0x2b76 <EEPROM_u8ReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	9e 81       	ldd	r25, Y+6	; 0x06
    2b66:	9a 83       	std	Y+2, r25	; 0x02
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <EEPROM_u8ReadDataByte+0x126>
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
	/*Delay until the write cycle is finished*/
	_delay_ms(10);
	//return data
	return Data ;
    2b76:	88 89       	ldd	r24, Y+16	; 0x10
}
    2b78:	62 96       	adiw	r28, 0x12	; 18
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <EEPROM_voidSendWord>:

void EEPROM_voidSendWord(u16 Copy_u16LocationAddress , u16 Copy_u16DataByte )
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <EEPROM_voidSendWord+0x6>
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <EEPROM_voidSendWord+0x8>
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	7c 83       	std	Y+4, r23	; 0x04
    2b9c:	6b 83       	std	Y+3, r22	; 0x03
	EEPROM_voidSendDataByte(Copy_u16LocationAddress ,  (u8)Copy_u16DataByte  );
    2b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	62 2f       	mov	r22, r18
    2ba6:	0e 94 89 14 	call	0x2912	; 0x2912 <EEPROM_voidSendDataByte>
	EEPROM_voidSendDataByte(Copy_u16LocationAddress+1 ,  (Copy_u16DataByte>>8)  );
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	9c 01       	movw	r18, r24
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	89 2f       	mov	r24, r25
    2bba:	99 27       	eor	r25, r25
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	c9 01       	movw	r24, r18
    2bc0:	64 2f       	mov	r22, r20
    2bc2:	0e 94 89 14 	call	0x2912	; 0x2912 <EEPROM_voidSendDataByte>
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <EEPROM_u16ReadWord>:
u16 EEPROM_u16ReadWord(u16 Copy_u16LocationAddress )
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <EEPROM_u16ReadWord+0x6>
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <EEPROM_u16ReadWord+0x8>
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <EEPROM_u16ReadWord+0xa>
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
	u8 DATA_LOW ;
	u8 DATA_HIGH ;
	u16 DATA ;
	DATA_LOW= 	EEPROM_u8ReadDataByte(Copy_u16LocationAddress );
    2be6:	8d 81       	ldd	r24, Y+5	; 0x05
    2be8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bea:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_u8ReadDataByte>
    2bee:	8c 83       	std	Y+4, r24	; 0x04
	DATA_HIGH = EEPROM_u8ReadDataByte(Copy_u16LocationAddress+1);
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <EEPROM_u8ReadDataByte>
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
	DATA = DATA_LOW +(DATA_HIGH<<8) ;
    2bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	98 2f       	mov	r25, r24
    2c0a:	88 27       	eor	r24, r24
    2c0c:	82 0f       	add	r24, r18
    2c0e:	93 1f       	adc	r25, r19
    2c10:	9a 83       	std	Y+2, r25	; 0x02
    2c12:	89 83       	std	Y+1, r24	; 0x01
	return DATA ;
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c18:	26 96       	adiw	r28, 0x06	; 6
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <DC_MOTOR_VoidInit>:
#include"DC_MOTOR_Interface.h"
#include"../../MCAL/DIO/DIO_Private.h"
#include"DC_MOTOR_Config.h"

void DC_MOTOR_VoidInit(void)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(MOTOR_PORT,MOTOR_PIN1,OUTPUT);
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	66 e0       	ldi	r22, 0x06	; 6
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTOR_PORT,MOTOR_PIN2,OUTPUT);
    2c3c:	82 e0       	ldi	r24, 0x02	; 2
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <DC_MOTOR_VoidDirection>:

void DC_MOTOR_VoidDirection(u8 Copy_u8Direction)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <DC_MOTOR_VoidDirection+0x6>
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Direction)
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	3b 83       	std	Y+3, r19	; 0x03
    2c62:	2a 83       	std	Y+2, r18	; 0x02
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	31 f0       	breq	.+12     	; 0x2c78 <DC_MOTOR_VoidDirection+0x2c>
    2c6c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c6e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c70:	21 30       	cpi	r18, 0x01	; 1
    2c72:	31 05       	cpc	r19, r1
    2c74:	61 f0       	breq	.+24     	; 0x2c8e <DC_MOTOR_VoidDirection+0x42>
    2c76:	15 c0       	rjmp	.+42     	; 0x2ca2 <DC_MOTOR_VoidDirection+0x56>
	{
			case CCW :
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN2,LOW);
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	67 e0       	ldi	r22, 0x07	; 7
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN1,HIGH);
    2c82:	82 e0       	ldi	r24, 0x02	; 2
    2c84:	66 e0       	ldi	r22, 0x06	; 6
    2c86:	41 e0       	ldi	r20, 0x01	; 1
    2c88:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    2c8c:	0a c0       	rjmp	.+20     	; 0x2ca2 <DC_MOTOR_VoidDirection+0x56>

							break ;
			case CW	:
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN1,LOW);
    2c8e:	82 e0       	ldi	r24, 0x02	; 2
    2c90:	66 e0       	ldi	r22, 0x06	; 6
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN2,HIGH);
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	67 e0       	ldi	r22, 0x07	; 7
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
							break;
	}
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <DC_MOTOR_VoidStop>:

void DC_MOTOR_VoidStop()
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN1,LOW);
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	66 e0       	ldi	r22, 0x06	; 6
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN2,LOW);
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	67 e0       	ldi	r22, 0x07	; 7
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
}
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <App_voidInit>:
#include"../HAL/DC_MOTOR/DC_MOTOR_Interface.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void App_voidInit(void)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62

		TIMER_voidTimer1Init();
    2cd8:	0e 94 a3 08 	call	0x1146	; 0x1146 <TIMER_voidTimer1Init>
		M_UART_voidInit();
    2cdc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <M_UART_voidInit>
		ADC_voidInit();
    2ce0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <ADC_voidInit>
		DC_MOTOR_VoidInit();
    2ce4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <DC_MOTOR_VoidInit>
		DIO_voidSetPinDirection(PORTD,PIN0,INPUT);
    2ce8:	83 e0       	ldi	r24, 0x03	; 3
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTD,PIN1,OUTPUT);
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	61 e0       	ldi	r22, 0x01	; 1
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTB,PIN0,OUTPUT);
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTB,PIN1,OUTPUT);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTB,PIN2,OUTPUT);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	62 e0       	ldi	r22, 0x02	; 2
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTA,PIN0,INPUT);
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTD,PIN5,OUTPUT);
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	65 e0       	ldi	r22, 0x05	; 5
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTC,PIN5,OUTPUT);
    2d2e:	82 e0       	ldi	r24, 0x02	; 2
    2d30:	65 e0       	ldi	r22, 0x05	; 5
    2d32:	41 e0       	ldi	r20, 0x01	; 1
    2d34:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTC,PIN0,OUTPUT);
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	41 e0       	ldi	r20, 0x01	; 1
    2d3e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTC,PIN1,OUTPUT);
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	61 e0       	ldi	r22, 0x01	; 1
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <DIO_voidSetPinDirection>

}
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <main>:

int main(void)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	eb 97       	sbiw	r28, 0x3b	; 59
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61

static u8 local_stats = 0;
	App_voidInit();
    2d66:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <App_voidInit>
    u8 read = 0;
    2d6a:	19 ae       	std	Y+57, r1	; 0x39
    read = M_UART_voidRecieveData();
    2d6c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <M_UART_voidRecieveData>
    2d70:	89 af       	std	Y+57, r24	; 0x39
	while(1)
	{
      switch(read)
    2d72:	89 ad       	ldd	r24, Y+57	; 0x39
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	3b af       	std	Y+59, r19	; 0x3b
    2d7a:	2a af       	std	Y+58, r18	; 0x3a
    2d7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d7e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d80:	85 30       	cpi	r24, 0x05	; 5
    2d82:	91 05       	cpc	r25, r1
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <main+0x36>
    2d86:	da c0       	rjmp	.+436    	; 0x2f3c <main+0x1ea>
    2d88:	2a ad       	ldd	r18, Y+58	; 0x3a
    2d8a:	3b ad       	ldd	r19, Y+59	; 0x3b
    2d8c:	26 30       	cpi	r18, 0x06	; 6
    2d8e:	31 05       	cpc	r19, r1
    2d90:	f4 f4       	brge	.+60     	; 0x2dce <main+0x7c>
    2d92:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d94:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	91 05       	cpc	r25, r1
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <main+0x4c>
    2d9c:	42 c0       	rjmp	.+132    	; 0x2e22 <main+0xd0>
    2d9e:	2a ad       	ldd	r18, Y+58	; 0x3a
    2da0:	3b ad       	ldd	r19, Y+59	; 0x3b
    2da2:	23 30       	cpi	r18, 0x03	; 3
    2da4:	31 05       	cpc	r19, r1
    2da6:	34 f4       	brge	.+12     	; 0x2db4 <main+0x62>
    2da8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2daa:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dac:	81 30       	cpi	r24, 0x01	; 1
    2dae:	91 05       	cpc	r25, r1
    2db0:	99 f1       	breq	.+102    	; 0x2e18 <main+0xc6>
    2db2:	55 c2       	rjmp	.+1194   	; 0x325e <main+0x50c>
    2db4:	2a ad       	ldd	r18, Y+58	; 0x3a
    2db6:	3b ad       	ldd	r19, Y+59	; 0x3b
    2db8:	23 30       	cpi	r18, 0x03	; 3
    2dba:	31 05       	cpc	r19, r1
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <main+0x6e>
    2dbe:	41 c0       	rjmp	.+130    	; 0x2e42 <main+0xf0>
    2dc0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dc2:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dc4:	84 30       	cpi	r24, 0x04	; 4
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <main+0x7a>
    2dca:	b3 c0       	rjmp	.+358    	; 0x2f32 <main+0x1e0>
    2dcc:	48 c2       	rjmp	.+1168   	; 0x325e <main+0x50c>
    2dce:	2a ad       	ldd	r18, Y+58	; 0x3a
    2dd0:	3b ad       	ldd	r19, Y+59	; 0x3b
    2dd2:	28 30       	cpi	r18, 0x08	; 8
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <main+0x88>
    2dd8:	c6 c0       	rjmp	.+396    	; 0x2f66 <main+0x214>
    2dda:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ddc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dde:	89 30       	cpi	r24, 0x09	; 9
    2de0:	91 05       	cpc	r25, r1
    2de2:	6c f4       	brge	.+26     	; 0x2dfe <main+0xac>
    2de4:	2a ad       	ldd	r18, Y+58	; 0x3a
    2de6:	3b ad       	ldd	r19, Y+59	; 0x3b
    2de8:	26 30       	cpi	r18, 0x06	; 6
    2dea:	31 05       	cpc	r19, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <main+0x9e>
    2dee:	37 c2       	rjmp	.+1134   	; 0x325e <main+0x50c>
    2df0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2df2:	9b ad       	ldd	r25, Y+59	; 0x3b
    2df4:	87 30       	cpi	r24, 0x07	; 7
    2df6:	91 05       	cpc	r25, r1
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <main+0xaa>
    2dfa:	b0 c0       	rjmp	.+352    	; 0x2f5c <main+0x20a>
    2dfc:	30 c2       	rjmp	.+1120   	; 0x325e <main+0x50c>
    2dfe:	2a ad       	ldd	r18, Y+58	; 0x3a
    2e00:	3b ad       	ldd	r19, Y+59	; 0x3b
    2e02:	29 30       	cpi	r18, 0x09	; 9
    2e04:	31 05       	cpc	r19, r1
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <main+0xb8>
    2e08:	be c0       	rjmp	.+380    	; 0x2f86 <main+0x234>
    2e0a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e0c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e0e:	8a 30       	cpi	r24, 0x0A	; 10
    2e10:	91 05       	cpc	r25, r1
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <main+0xc4>
    2e14:	30 c1       	rjmp	.+608    	; 0x3076 <main+0x324>
    2e16:	23 c2       	rjmp	.+1094   	; 0x325e <main+0x50c>
      {
      //light
      case 1:
    	  DIO_voidSetPortValue(PORTB,1);
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	61 e0       	ldi	r22, 0x01	; 1
    2e1c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <DIO_voidSetPortValue>
    2e20:	1e c2       	rjmp	.+1084   	; 0x325e <main+0x50c>
    	  break;
    	  //fan
      case 2:
    	  DIO_voidSetPinValue(PORTC,PIN5,HIGH);
    2e22:	82 e0       	ldi	r24, 0x02	; 2
    2e24:	65 e0       	ldi	r22, 0x05	; 5
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    	  DIO_voidSetPinValue(PORTC,PIN1,LOW);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	61 e0       	ldi	r22, 0x01	; 1
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    	  DIO_voidSetPinValue(PORTC,PIN0,LOW);
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    2e40:	0e c2       	rjmp	.+1052   	; 0x325e <main+0x50c>

    	  break;
      case 3:
    	  DC_MOTOR_VoidDirection(CW);
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <DC_MOTOR_VoidDirection>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e8       	ldi	r25, 0x80	; 128
    2e4c:	ab e3       	ldi	r26, 0x3B	; 59
    2e4e:	b5 e4       	ldi	r27, 0x45	; 69
    2e50:	8d ab       	std	Y+53, r24	; 0x35
    2e52:	9e ab       	std	Y+54, r25	; 0x36
    2e54:	af ab       	std	Y+55, r26	; 0x37
    2e56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6d a9       	ldd	r22, Y+53	; 0x35
    2e5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a ef       	ldi	r20, 0xFA	; 250
    2e66:	54 e4       	ldi	r21, 0x44	; 68
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	89 ab       	std	Y+49, r24	; 0x31
    2e72:	9a ab       	std	Y+50, r25	; 0x32
    2e74:	ab ab       	std	Y+51, r26	; 0x33
    2e76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e78:	69 a9       	ldd	r22, Y+49	; 0x31
    2e7a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <main+0x148>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	98 ab       	std	Y+48, r25	; 0x30
    2e96:	8f a7       	std	Y+47, r24	; 0x2f
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <main+0x1c6>
	else if (__tmp > 65535)
    2e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb4:	7e a9       	ldd	r23, Y+54	; 0x36
    2eb6:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb8:	98 ad       	ldd	r25, Y+56	; 0x38
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	98 ab       	std	Y+48, r25	; 0x30
    2ed8:	8f a7       	std	Y+47, r24	; 0x2f
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <main+0x1a8>
    2edc:	88 ec       	ldi	r24, 0xC8	; 200
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9e a7       	std	Y+46, r25	; 0x2e
    2ee2:	8d a7       	std	Y+45, r24	; 0x2d
    2ee4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ee6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <main+0x196>
    2eec:	9e a7       	std	Y+46, r25	; 0x2e
    2eee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	98 ab       	std	Y+48, r25	; 0x30
    2ef8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efc:	98 a9       	ldd	r25, Y+48	; 0x30
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <main+0x18a>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	69 a9       	ldd	r22, Y+49	; 0x31
    2f06:	7a a9       	ldd	r23, Y+50	; 0x32
    2f08:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	98 ab       	std	Y+48, r25	; 0x30
    2f16:	8f a7       	std	Y+47, r24	; 0x2f
    2f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f1c:	9c a7       	std	Y+44, r25	; 0x2c
    2f1e:	8b a7       	std	Y+43, r24	; 0x2b
    2f20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <main+0x1d2>
    2f28:	9c a7       	std	Y+44, r25	; 0x2c
    2f2a:	8b a7       	std	Y+43, r24	; 0x2b
    	  _delay_ms(3000);
		  DC_MOTOR_VoidStop();
    2f2c:	0e 94 57 16 	call	0x2cae	; 0x2cae <DC_MOTOR_VoidStop>
    2f30:	96 c1       	rjmp	.+812    	; 0x325e <main+0x50c>
    	  break;
      case 4:
    	  DIO_voidSetPortValue(PORTB,2);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	62 e0       	ldi	r22, 0x02	; 2
    2f36:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <DIO_voidSetPortValue>
    2f3a:	91 c1       	rjmp	.+802    	; 0x325e <main+0x50c>

    	  break;
      case 5:
    	  DIO_voidSetPinValue(PORTC,PIN0,HIGH);
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	41 e0       	ldi	r20, 0x01	; 1
    2f42:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    	  DIO_voidSetPinValue(PORTC,PIN5,LOW);
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	65 e0       	ldi	r22, 0x05	; 5
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    	  DIO_voidSetPinValue(PORTC,PIN1,LOW);
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    2f5a:	81 c1       	rjmp	.+770    	; 0x325e <main+0x50c>
      case 6:

    	  break;

      case 7:
    	  DIO_voidSetPortValue(PORTB,4);
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	64 e0       	ldi	r22, 0x04	; 4
    2f60:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <DIO_voidSetPortValue>
    2f64:	7c c1       	rjmp	.+760    	; 0x325e <main+0x50c>

    	  break;

      case 8:
    	  DIO_voidSetPinValue(PORTC,PIN1,HIGH);
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	61 e0       	ldi	r22, 0x01	; 1
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    	  DIO_voidSetPinValue(PORTC,PIN0,LOW);
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    	  DIO_voidSetPinValue(PORTC,PIN5,LOW);
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	65 e0       	ldi	r22, 0x05	; 5
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_voidSetPinValue>
    2f84:	6c c1       	rjmp	.+728    	; 0x325e <main+0x50c>
    	  break;

      case 9:
    	  DC_MOTOR_VoidDirection(CCW);
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <DC_MOTOR_VoidDirection>
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e8       	ldi	r25, 0x80	; 128
    2f90:	ab e3       	ldi	r26, 0x3B	; 59
    2f92:	b5 e4       	ldi	r27, 0x45	; 69
    2f94:	8f a3       	std	Y+39, r24	; 0x27
    2f96:	98 a7       	std	Y+40, r25	; 0x28
    2f98:	a9 a7       	std	Y+41, r26	; 0x29
    2f9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2fa0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	4a ef       	ldi	r20, 0xFA	; 250
    2faa:	54 e4       	ldi	r21, 0x44	; 68
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	8b a3       	std	Y+35, r24	; 0x23
    2fb6:	9c a3       	std	Y+36, r25	; 0x24
    2fb8:	ad a3       	std	Y+37, r26	; 0x25
    2fba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e8       	ldi	r20, 0x80	; 128
    2fca:	5f e3       	ldi	r21, 0x3F	; 63
    2fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd0:	88 23       	and	r24, r24
    2fd2:	2c f4       	brge	.+10     	; 0x2fde <main+0x28c>
		__ticks = 1;
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	9a a3       	std	Y+34, r25	; 0x22
    2fda:	89 a3       	std	Y+33, r24	; 0x21
    2fdc:	3f c0       	rjmp	.+126    	; 0x305c <main+0x30a>
	else if (__tmp > 65535)
    2fde:	6b a1       	ldd	r22, Y+35	; 0x23
    2fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	3f ef       	ldi	r19, 0xFF	; 255
    2fea:	4f e7       	ldi	r20, 0x7F	; 127
    2fec:	57 e4       	ldi	r21, 0x47	; 71
    2fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff2:	18 16       	cp	r1, r24
    2ff4:	4c f5       	brge	.+82     	; 0x3048 <main+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ff8:	78 a5       	ldd	r23, Y+40	; 0x28
    2ffa:	89 a5       	ldd	r24, Y+41	; 0x29
    2ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e2       	ldi	r20, 0x20	; 32
    3004:	51 e4       	ldi	r21, 0x41	; 65
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9a a3       	std	Y+34, r25	; 0x22
    301c:	89 a3       	std	Y+33, r24	; 0x21
    301e:	0f c0       	rjmp	.+30     	; 0x303e <main+0x2ec>
    3020:	88 ec       	ldi	r24, 0xC8	; 200
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	98 a3       	std	Y+32, r25	; 0x20
    3026:	8f 8f       	std	Y+31, r24	; 0x1f
    3028:	8f 8d       	ldd	r24, Y+31	; 0x1f
    302a:	98 a1       	ldd	r25, Y+32	; 0x20
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <main+0x2da>
    3030:	98 a3       	std	Y+32, r25	; 0x20
    3032:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3034:	89 a1       	ldd	r24, Y+33	; 0x21
    3036:	9a a1       	ldd	r25, Y+34	; 0x22
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	9a a3       	std	Y+34, r25	; 0x22
    303c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303e:	89 a1       	ldd	r24, Y+33	; 0x21
    3040:	9a a1       	ldd	r25, Y+34	; 0x22
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	69 f7       	brne	.-38     	; 0x3020 <main+0x2ce>
    3046:	14 c0       	rjmp	.+40     	; 0x3070 <main+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3048:	6b a1       	ldd	r22, Y+35	; 0x23
    304a:	7c a1       	ldd	r23, Y+36	; 0x24
    304c:	8d a1       	ldd	r24, Y+37	; 0x25
    304e:	9e a1       	ldd	r25, Y+38	; 0x26
    3050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	9a a3       	std	Y+34, r25	; 0x22
    305a:	89 a3       	std	Y+33, r24	; 0x21
    305c:	89 a1       	ldd	r24, Y+33	; 0x21
    305e:	9a a1       	ldd	r25, Y+34	; 0x22
    3060:	9e 8f       	std	Y+30, r25	; 0x1e
    3062:	8d 8f       	std	Y+29, r24	; 0x1d
    3064:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3066:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <main+0x316>
    306c:	9e 8f       	std	Y+30, r25	; 0x1e
    306e:	8d 8f       	std	Y+29, r24	; 0x1d
    	  _delay_ms(3000);
    	  DC_MOTOR_VoidStop();
    3070:	0e 94 57 16 	call	0x2cae	; 0x2cae <DC_MOTOR_VoidStop>
    3074:	f4 c0       	rjmp	.+488    	; 0x325e <main+0x50c>
    	  break;
      case 10 :
    	  if(local_stats == 0)
    3076:	80 91 92 00 	lds	r24, 0x0092
    307a:	88 23       	and	r24, r24
    307c:	09 f0       	breq	.+2      	; 0x3080 <main+0x32e>
    307e:	ef c0       	rjmp	.+478    	; 0x325e <main+0x50c>
    	  {
    	  TIMER_voidTimer1ASetCompareValue(999);
    3080:	87 ee       	ldi	r24, 0xE7	; 231
    3082:	93 e0       	ldi	r25, 0x03	; 3
    3084:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TIMER_voidTimer1ASetCompareValue>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	aa e7       	ldi	r26, 0x7A	; 122
    308e:	b4 e4       	ldi	r27, 0x44	; 68
    3090:	89 8f       	std	Y+25, r24	; 0x19
    3092:	9a 8f       	std	Y+26, r25	; 0x1a
    3094:	ab 8f       	std	Y+27, r26	; 0x1b
    3096:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	69 8d       	ldd	r22, Y+25	; 0x19
    309a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    309c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    309e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a ef       	ldi	r20, 0xFA	; 250
    30a6:	54 e4       	ldi	r21, 0x44	; 68
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8d 8b       	std	Y+21, r24	; 0x15
    30b2:	9e 8b       	std	Y+22, r25	; 0x16
    30b4:	af 8b       	std	Y+23, r26	; 0x17
    30b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30b8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ba:	7e 89       	ldd	r23, Y+22	; 0x16
    30bc:	8f 89       	ldd	r24, Y+23	; 0x17
    30be:	98 8d       	ldd	r25, Y+24	; 0x18
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <main+0x388>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9c 8b       	std	Y+20, r25	; 0x14
    30d6:	8b 8b       	std	Y+19, r24	; 0x13
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <main+0x406>
	else if (__tmp > 65535)
    30da:	6d 89       	ldd	r22, Y+21	; 0x15
    30dc:	7e 89       	ldd	r23, Y+22	; 0x16
    30de:	8f 89       	ldd	r24, Y+23	; 0x17
    30e0:	98 8d       	ldd	r25, Y+24	; 0x18
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <main+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	69 8d       	ldd	r22, Y+25	; 0x19
    30f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9c 8b       	std	Y+20, r25	; 0x14
    3118:	8b 8b       	std	Y+19, r24	; 0x13
    311a:	0f c0       	rjmp	.+30     	; 0x313a <main+0x3e8>
    311c:	88 ec       	ldi	r24, 0xC8	; 200
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9a 8b       	std	Y+18, r25	; 0x12
    3122:	89 8b       	std	Y+17, r24	; 0x11
    3124:	89 89       	ldd	r24, Y+17	; 0x11
    3126:	9a 89       	ldd	r25, Y+18	; 0x12
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <main+0x3d6>
    312c:	9a 8b       	std	Y+18, r25	; 0x12
    312e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8b 89       	ldd	r24, Y+19	; 0x13
    3132:	9c 89       	ldd	r25, Y+20	; 0x14
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9c 8b       	std	Y+20, r25	; 0x14
    3138:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8b 89       	ldd	r24, Y+19	; 0x13
    313c:	9c 89       	ldd	r25, Y+20	; 0x14
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <main+0x3ca>
    3142:	14 c0       	rjmp	.+40     	; 0x316c <main+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	6d 89       	ldd	r22, Y+21	; 0x15
    3146:	7e 89       	ldd	r23, Y+22	; 0x16
    3148:	8f 89       	ldd	r24, Y+23	; 0x17
    314a:	98 8d       	ldd	r25, Y+24	; 0x18
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9c 8b       	std	Y+20, r25	; 0x14
    3156:	8b 8b       	std	Y+19, r24	; 0x13
    3158:	8b 89       	ldd	r24, Y+19	; 0x13
    315a:	9c 89       	ldd	r25, Y+20	; 0x14
    315c:	98 8b       	std	Y+16, r25	; 0x10
    315e:	8f 87       	std	Y+15, r24	; 0x0f
    3160:	8f 85       	ldd	r24, Y+15	; 0x0f
    3162:	98 89       	ldd	r25, Y+16	; 0x10
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <main+0x412>
    3168:	98 8b       	std	Y+16, r25	; 0x10
    316a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			TIMER_voidTimer1ASetCompareValue(1999);
    316c:	8f ec       	ldi	r24, 0xCF	; 207
    316e:	97 e0       	ldi	r25, 0x07	; 7
    3170:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TIMER_voidTimer1ASetCompareValue>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	aa e7       	ldi	r26, 0x7A	; 122
    317a:	b4 e4       	ldi	r27, 0x44	; 68
    317c:	8b 87       	std	Y+11, r24	; 0x0b
    317e:	9c 87       	std	Y+12, r25	; 0x0c
    3180:	ad 87       	std	Y+13, r26	; 0x0d
    3182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3184:	6b 85       	ldd	r22, Y+11	; 0x0b
    3186:	7c 85       	ldd	r23, Y+12	; 0x0c
    3188:	8d 85       	ldd	r24, Y+13	; 0x0d
    318a:	9e 85       	ldd	r25, Y+14	; 0x0e
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a ef       	ldi	r20, 0xFA	; 250
    3192:	54 e4       	ldi	r21, 0x44	; 68
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8f 83       	std	Y+7, r24	; 0x07
    319e:	98 87       	std	Y+8, r25	; 0x08
    31a0:	a9 87       	std	Y+9, r26	; 0x09
    31a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31a4:	6f 81       	ldd	r22, Y+7	; 0x07
    31a6:	78 85       	ldd	r23, Y+8	; 0x08
    31a8:	89 85       	ldd	r24, Y+9	; 0x09
    31aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e8       	ldi	r20, 0x80	; 128
    31b2:	5f e3       	ldi	r21, 0x3F	; 63
    31b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	2c f4       	brge	.+10     	; 0x31c6 <main+0x474>
		__ticks = 1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	3f c0       	rjmp	.+126    	; 0x3244 <main+0x4f2>
	else if (__tmp > 65535)
    31c6:	6f 81       	ldd	r22, Y+7	; 0x07
    31c8:	78 85       	ldd	r23, Y+8	; 0x08
    31ca:	89 85       	ldd	r24, Y+9	; 0x09
    31cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	4c f5       	brge	.+82     	; 0x3230 <main+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31de:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e2       	ldi	r20, 0x20	; 32
    31ec:	51 e4       	ldi	r21, 0x41	; 65
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <main+0x4d4>
    3208:	88 ec       	ldi	r24, 0xC8	; 200
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	8b 83       	std	Y+3, r24	; 0x03
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <main+0x4c2>
    3218:	9c 83       	std	Y+4, r25	; 0x04
    321a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	9e 83       	std	Y+6, r25	; 0x06
    3224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3226:	8d 81       	ldd	r24, Y+5	; 0x05
    3228:	9e 81       	ldd	r25, Y+6	; 0x06
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	69 f7       	brne	.-38     	; 0x3208 <main+0x4b6>
    322e:	14 c0       	rjmp	.+40     	; 0x3258 <main+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3230:	6f 81       	ldd	r22, Y+7	; 0x07
    3232:	78 85       	ldd	r23, Y+8	; 0x08
    3234:	89 85       	ldd	r24, Y+9	; 0x09
    3236:	9a 85       	ldd	r25, Y+10	; 0x0a
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	89 83       	std	Y+1, r24	; 0x01
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	9a 81       	ldd	r25, Y+2	; 0x02
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <main+0x4fe>
    3254:	9a 83       	std	Y+2, r25	; 0x02
    3256:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			local_stats =1;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	80 93 92 00 	sts	0x0092, r24
    	  }
    	  break ;
      default:	break;
      }

      read = M_UART_voidRecieveData();
    325e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <M_UART_voidRecieveData>
    3262:	89 af       	std	Y+57, r24	; 0x39
    3264:	86 cd       	rjmp	.-1268   	; 0x2d72 <main+0x20>

00003266 <__udivmodhi4>:
    3266:	aa 1b       	sub	r26, r26
    3268:	bb 1b       	sub	r27, r27
    326a:	51 e1       	ldi	r21, 0x11	; 17
    326c:	07 c0       	rjmp	.+14     	; 0x327c <__udivmodhi4_ep>

0000326e <__udivmodhi4_loop>:
    326e:	aa 1f       	adc	r26, r26
    3270:	bb 1f       	adc	r27, r27
    3272:	a6 17       	cp	r26, r22
    3274:	b7 07       	cpc	r27, r23
    3276:	10 f0       	brcs	.+4      	; 0x327c <__udivmodhi4_ep>
    3278:	a6 1b       	sub	r26, r22
    327a:	b7 0b       	sbc	r27, r23

0000327c <__udivmodhi4_ep>:
    327c:	88 1f       	adc	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	5a 95       	dec	r21
    3282:	a9 f7       	brne	.-22     	; 0x326e <__udivmodhi4_loop>
    3284:	80 95       	com	r24
    3286:	90 95       	com	r25
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	08 95       	ret

0000328e <__prologue_saves__>:
    328e:	2f 92       	push	r2
    3290:	3f 92       	push	r3
    3292:	4f 92       	push	r4
    3294:	5f 92       	push	r5
    3296:	6f 92       	push	r6
    3298:	7f 92       	push	r7
    329a:	8f 92       	push	r8
    329c:	9f 92       	push	r9
    329e:	af 92       	push	r10
    32a0:	bf 92       	push	r11
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	ca 1b       	sub	r28, r26
    32b8:	db 0b       	sbc	r29, r27
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	09 94       	ijmp

000032c6 <__epilogue_restores__>:
    32c6:	2a 88       	ldd	r2, Y+18	; 0x12
    32c8:	39 88       	ldd	r3, Y+17	; 0x11
    32ca:	48 88       	ldd	r4, Y+16	; 0x10
    32cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    32d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    32d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    32d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    32d8:	b9 84       	ldd	r11, Y+9	; 0x09
    32da:	c8 84       	ldd	r12, Y+8	; 0x08
    32dc:	df 80       	ldd	r13, Y+7	; 0x07
    32de:	ee 80       	ldd	r14, Y+6	; 0x06
    32e0:	fd 80       	ldd	r15, Y+5	; 0x05
    32e2:	0c 81       	ldd	r16, Y+4	; 0x04
    32e4:	1b 81       	ldd	r17, Y+3	; 0x03
    32e6:	aa 81       	ldd	r26, Y+2	; 0x02
    32e8:	b9 81       	ldd	r27, Y+1	; 0x01
    32ea:	ce 0f       	add	r28, r30
    32ec:	d1 1d       	adc	r29, r1
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	ed 01       	movw	r28, r26
    32fa:	08 95       	ret

000032fc <_exit>:
    32fc:	f8 94       	cli

000032fe <__stop_program>:
    32fe:	ff cf       	rjmp	.-2      	; 0x32fe <__stop_program>
